/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/@stdlib/math-base-assert-is-nan/lib/main.js
var require_main = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-nan/lib/main.js"(exports, module2) {
    "use strict";
    function isnan(x) {
      return x !== x;
    }
    module2.exports = isnan;
  }
});

// node_modules/@stdlib/math-base-assert-is-nan/lib/index.js
var require_lib = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-nan/lib/index.js"(exports, module2) {
    "use strict";
    var isnan = require_main();
    module2.exports = isnan;
  }
});

// node_modules/@stdlib/constants-float64-pinf/lib/index.js
var require_lib2 = __commonJS({
  "node_modules/@stdlib/constants-float64-pinf/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_PINF = Number.POSITIVE_INFINITY;
    module2.exports = FLOAT64_PINF;
  }
});

// node_modules/@stdlib/number-ctor/lib/number.js
var require_number = __commonJS({
  "node_modules/@stdlib/number-ctor/lib/number.js"(exports, module2) {
    "use strict";
    module2.exports = Number;
  }
});

// node_modules/@stdlib/number-ctor/lib/index.js
var require_lib3 = __commonJS({
  "node_modules/@stdlib/number-ctor/lib/index.js"(exports, module2) {
    "use strict";
    var Number2 = require_number();
    module2.exports = Number2;
  }
});

// node_modules/@stdlib/constants-float64-ninf/lib/index.js
var require_lib4 = __commonJS({
  "node_modules/@stdlib/constants-float64-ninf/lib/index.js"(exports, module2) {
    "use strict";
    var Number2 = require_lib3();
    var FLOAT64_NINF = Number2.NEGATIVE_INFINITY;
    module2.exports = FLOAT64_NINF;
  }
});

// node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js
var require_main2 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-infinite/lib/main.js"(exports, module2) {
    "use strict";
    var PINF = require_lib2();
    var NINF = require_lib4();
    function isInfinite(x) {
      return x === PINF || x === NINF;
    }
    module2.exports = isInfinite;
  }
});

// node_modules/@stdlib/math-base-assert-is-infinite/lib/index.js
var require_lib5 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-infinite/lib/index.js"(exports, module2) {
    "use strict";
    var isInfinite = require_main2();
    module2.exports = isInfinite;
  }
});

// node_modules/@stdlib/math-base-special-floor/lib/main.js
var require_main3 = __commonJS({
  "node_modules/@stdlib/math-base-special-floor/lib/main.js"(exports, module2) {
    "use strict";
    var floor = Math.floor;
    module2.exports = floor;
  }
});

// node_modules/@stdlib/math-base-special-floor/lib/index.js
var require_lib6 = __commonJS({
  "node_modules/@stdlib/math-base-special-floor/lib/index.js"(exports, module2) {
    "use strict";
    var floor = require_main3();
    module2.exports = floor;
  }
});

// node_modules/@stdlib/math-base-assert-is-integer/lib/is_integer.js
var require_is_integer = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-integer/lib/is_integer.js"(exports, module2) {
    "use strict";
    var floor = require_lib6();
    function isInteger(x) {
      return floor(x) === x;
    }
    module2.exports = isInteger;
  }
});

// node_modules/@stdlib/math-base-assert-is-integer/lib/index.js
var require_lib7 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-integer/lib/index.js"(exports, module2) {
    "use strict";
    var isInteger = require_is_integer();
    module2.exports = isInteger;
  }
});

// node_modules/@stdlib/math-base-assert-is-even/lib/is_even.js
var require_is_even = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-even/lib/is_even.js"(exports, module2) {
    "use strict";
    var isInteger = require_lib7();
    function isEven(x) {
      return isInteger(x / 2);
    }
    module2.exports = isEven;
  }
});

// node_modules/@stdlib/math-base-assert-is-even/lib/index.js
var require_lib8 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-even/lib/index.js"(exports, module2) {
    "use strict";
    var isEven = require_is_even();
    module2.exports = isEven;
  }
});

// node_modules/@stdlib/math-base-assert-is-odd/lib/is_odd.js
var require_is_odd = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-odd/lib/is_odd.js"(exports, module2) {
    "use strict";
    var isEven = require_lib8();
    function isOdd(x) {
      if (x > 0) {
        return isEven(x - 1);
      }
      return isEven(x + 1);
    }
    module2.exports = isOdd;
  }
});

// node_modules/@stdlib/math-base-assert-is-odd/lib/index.js
var require_lib9 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-odd/lib/index.js"(exports, module2) {
    "use strict";
    var isOdd = require_is_odd();
    module2.exports = isOdd;
  }
});

// node_modules/@stdlib/math-base-special-sqrt/lib/main.js
var require_main4 = __commonJS({
  "node_modules/@stdlib/math-base-special-sqrt/lib/main.js"(exports, module2) {
    "use strict";
    var sqrt = Math.sqrt;
    module2.exports = sqrt;
  }
});

// node_modules/@stdlib/math-base-special-sqrt/lib/index.js
var require_lib10 = __commonJS({
  "node_modules/@stdlib/math-base-special-sqrt/lib/index.js"(exports, module2) {
    "use strict";
    var sqrt = require_main4();
    module2.exports = sqrt;
  }
});

// node_modules/@stdlib/math-base-special-abs/lib/main.js
var require_main5 = __commonJS({
  "node_modules/@stdlib/math-base-special-abs/lib/main.js"(exports, module2) {
    "use strict";
    function abs(x) {
      return Math.abs(x);
    }
    module2.exports = abs;
  }
});

// node_modules/@stdlib/math-base-special-abs/lib/index.js
var require_lib11 = __commonJS({
  "node_modules/@stdlib/math-base-special-abs/lib/index.js"(exports, module2) {
    "use strict";
    var abs = require_main5();
    module2.exports = abs;
  }
});

// node_modules/@stdlib/assert-has-symbol-support/lib/main.js
var require_main6 = __commonJS({
  "node_modules/@stdlib/assert-has-symbol-support/lib/main.js"(exports, module2) {
    "use strict";
    function hasSymbolSupport() {
      return typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    }
    module2.exports = hasSymbolSupport;
  }
});

// node_modules/@stdlib/assert-has-symbol-support/lib/index.js
var require_lib12 = __commonJS({
  "node_modules/@stdlib/assert-has-symbol-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasSymbolSupport = require_main6();
    module2.exports = hasSymbolSupport;
  }
});

// node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js
var require_main7 = __commonJS({
  "node_modules/@stdlib/assert-has-tostringtag-support/lib/main.js"(exports, module2) {
    "use strict";
    var hasSymbols = require_lib12();
    var FLG = hasSymbols();
    function hasToStringTagSupport() {
      return FLG && typeof Symbol.toStringTag === "symbol";
    }
    module2.exports = hasToStringTagSupport;
  }
});

// node_modules/@stdlib/assert-has-tostringtag-support/lib/index.js
var require_lib13 = __commonJS({
  "node_modules/@stdlib/assert-has-tostringtag-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasToStringTagSupport = require_main7();
    module2.exports = hasToStringTagSupport;
  }
});

// node_modules/@stdlib/utils-native-class/lib/tostring.js
var require_tostring = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/tostring.js"(exports, module2) {
    "use strict";
    var toStr = Object.prototype.toString;
    module2.exports = toStr;
  }
});

// node_modules/@stdlib/utils-native-class/lib/native_class.js
var require_native_class = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/native_class.js"(exports, module2) {
    "use strict";
    var toStr = require_tostring();
    function nativeClass(v) {
      return toStr.call(v);
    }
    module2.exports = nativeClass;
  }
});

// node_modules/@stdlib/assert-has-own-property/lib/main.js
var require_main8 = __commonJS({
  "node_modules/@stdlib/assert-has-own-property/lib/main.js"(exports, module2) {
    "use strict";
    var has = Object.prototype.hasOwnProperty;
    function hasOwnProp(value, property) {
      if (value === void 0 || value === null) {
        return false;
      }
      return has.call(value, property);
    }
    module2.exports = hasOwnProp;
  }
});

// node_modules/@stdlib/assert-has-own-property/lib/index.js
var require_lib14 = __commonJS({
  "node_modules/@stdlib/assert-has-own-property/lib/index.js"(exports, module2) {
    "use strict";
    var hasOwnProp = require_main8();
    module2.exports = hasOwnProp;
  }
});

// node_modules/@stdlib/utils-native-class/lib/tostringtag.js
var require_tostringtag = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/tostringtag.js"(exports, module2) {
    "use strict";
    var toStrTag = typeof Symbol === "function" ? Symbol.toStringTag : "";
    module2.exports = toStrTag;
  }
});

// node_modules/@stdlib/utils-native-class/lib/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/polyfill.js"(exports, module2) {
    "use strict";
    var hasOwnProp = require_lib14();
    var toStringTag = require_tostringtag();
    var toStr = require_tostring();
    function nativeClass(v) {
      var isOwn;
      var tag;
      var out;
      if (v === null || v === void 0) {
        return toStr.call(v);
      }
      tag = v[toStringTag];
      isOwn = hasOwnProp(v, toStringTag);
      try {
        v[toStringTag] = void 0;
      } catch (err) {
        return toStr.call(v);
      }
      out = toStr.call(v);
      if (isOwn) {
        v[toStringTag] = tag;
      } else {
        delete v[toStringTag];
      }
      return out;
    }
    module2.exports = nativeClass;
  }
});

// node_modules/@stdlib/utils-native-class/lib/index.js
var require_lib15 = __commonJS({
  "node_modules/@stdlib/utils-native-class/lib/index.js"(exports, module2) {
    "use strict";
    var hasToStringTag = require_lib13();
    var builtin = require_native_class();
    var polyfill = require_polyfill();
    var nativeClass;
    if (hasToStringTag()) {
      nativeClass = polyfill;
    } else {
      nativeClass = builtin;
    }
    module2.exports = nativeClass;
  }
});

// node_modules/@stdlib/assert-is-uint32array/lib/main.js
var require_main9 = __commonJS({
  "node_modules/@stdlib/assert-is-uint32array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasUint32Array = typeof Uint32Array === "function";
    function isUint32Array(value) {
      return hasUint32Array && value instanceof Uint32Array || nativeClass(value) === "[object Uint32Array]";
    }
    module2.exports = isUint32Array;
  }
});

// node_modules/@stdlib/assert-is-uint32array/lib/index.js
var require_lib16 = __commonJS({
  "node_modules/@stdlib/assert-is-uint32array/lib/index.js"(exports, module2) {
    "use strict";
    var isUint32Array = require_main9();
    module2.exports = isUint32Array;
  }
});

// node_modules/@stdlib/constants-uint32-max/lib/index.js
var require_lib17 = __commonJS({
  "node_modules/@stdlib/constants-uint32-max/lib/index.js"(exports, module2) {
    "use strict";
    var UINT32_MAX = 4294967295;
    module2.exports = UINT32_MAX;
  }
});

// node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js
var require_uint32array = __commonJS({
  "node_modules/@stdlib/assert-has-uint32array-support/lib/uint32array.js"(exports, module2) {
    "use strict";
    var main = typeof Uint32Array === "function" ? Uint32Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint32array-support/lib/main.js
var require_main10 = __commonJS({
  "node_modules/@stdlib/assert-has-uint32array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isUint32Array = require_lib16();
    var UINT32_MAX = require_lib17();
    var GlobalUint32Array = require_uint32array();
    function hasUint32ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint32Array !== "function") {
        return false;
      }
      try {
        arr = [1, 3.14, -3.14, UINT32_MAX + 1, UINT32_MAX + 2];
        arr = new GlobalUint32Array(arr);
        bool = isUint32Array(arr) && arr[0] === 1 && arr[1] === 3 && arr[2] === UINT32_MAX - 2 && arr[3] === 0 && arr[4] === 1;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasUint32ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint32array-support/lib/index.js
var require_lib18 = __commonJS({
  "node_modules/@stdlib/assert-has-uint32array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint32ArraySupport = require_main10();
    module2.exports = hasUint32ArraySupport;
  }
});

// node_modules/@stdlib/array-uint32/lib/uint32array.js
var require_uint32array2 = __commonJS({
  "node_modules/@stdlib/array-uint32/lib/uint32array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Uint32Array === "function" ? Uint32Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint32/lib/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/@stdlib/array-uint32/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint32/lib/index.js
var require_lib19 = __commonJS({
  "node_modules/@stdlib/array-uint32/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint32ArraySupport = require_lib18();
    var builtin = require_uint32array2();
    var polyfill = require_polyfill2();
    var ctor;
    if (hasUint32ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-float64array/lib/main.js
var require_main11 = __commonJS({
  "node_modules/@stdlib/assert-is-float64array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasFloat64Array = typeof Float64Array === "function";
    function isFloat64Array(value) {
      return hasFloat64Array && value instanceof Float64Array || nativeClass(value) === "[object Float64Array]";
    }
    module2.exports = isFloat64Array;
  }
});

// node_modules/@stdlib/assert-is-float64array/lib/index.js
var require_lib20 = __commonJS({
  "node_modules/@stdlib/assert-is-float64array/lib/index.js"(exports, module2) {
    "use strict";
    var isFloat64Array = require_main11();
    module2.exports = isFloat64Array;
  }
});

// node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js
var require_float64array = __commonJS({
  "node_modules/@stdlib/assert-has-float64array-support/lib/float64array.js"(exports, module2) {
    "use strict";
    var main = typeof Float64Array === "function" ? Float64Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-float64array-support/lib/main.js
var require_main12 = __commonJS({
  "node_modules/@stdlib/assert-has-float64array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isFloat64Array = require_lib20();
    var GlobalFloat64Array = require_float64array();
    function hasFloat64ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalFloat64Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalFloat64Array([1, 3.14, -3.14, NaN]);
        bool = isFloat64Array(arr) && arr[0] === 1 && arr[1] === 3.14 && arr[2] === -3.14 && arr[3] !== arr[3];
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasFloat64ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-float64array-support/lib/index.js
var require_lib21 = __commonJS({
  "node_modules/@stdlib/assert-has-float64array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasFloat64ArraySupport = require_main12();
    module2.exports = hasFloat64ArraySupport;
  }
});

// node_modules/@stdlib/array-float64/lib/float64array.js
var require_float64array2 = __commonJS({
  "node_modules/@stdlib/array-float64/lib/float64array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Float64Array === "function" ? Float64Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-float64/lib/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/@stdlib/array-float64/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-float64/lib/index.js
var require_lib22 = __commonJS({
  "node_modules/@stdlib/array-float64/lib/index.js"(exports, module2) {
    "use strict";
    var hasFloat64ArraySupport = require_lib21();
    var builtin = require_float64array2();
    var polyfill = require_polyfill3();
    var ctor;
    if (hasFloat64ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-uint8array/lib/main.js
var require_main13 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasUint8Array = typeof Uint8Array === "function";
    function isUint8Array(value) {
      return hasUint8Array && value instanceof Uint8Array || nativeClass(value) === "[object Uint8Array]";
    }
    module2.exports = isUint8Array;
  }
});

// node_modules/@stdlib/assert-is-uint8array/lib/index.js
var require_lib23 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8array/lib/index.js"(exports, module2) {
    "use strict";
    var isUint8Array = require_main13();
    module2.exports = isUint8Array;
  }
});

// node_modules/@stdlib/constants-uint8-max/lib/index.js
var require_lib24 = __commonJS({
  "node_modules/@stdlib/constants-uint8-max/lib/index.js"(exports, module2) {
    "use strict";
    var UINT8_MAX = 255 | 0;
    module2.exports = UINT8_MAX;
  }
});

// node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js
var require_uint8array = __commonJS({
  "node_modules/@stdlib/assert-has-uint8array-support/lib/uint8array.js"(exports, module2) {
    "use strict";
    var main = typeof Uint8Array === "function" ? Uint8Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint8array-support/lib/main.js
var require_main14 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isUint8Array = require_lib23();
    var UINT8_MAX = require_lib24();
    var GlobalUint8Array = require_uint8array();
    function hasUint8ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint8Array !== "function") {
        return false;
      }
      try {
        arr = [1, 3.14, -3.14, UINT8_MAX + 1, UINT8_MAX + 2];
        arr = new GlobalUint8Array(arr);
        bool = isUint8Array(arr) && arr[0] === 1 && arr[1] === 3 && arr[2] === UINT8_MAX - 2 && arr[3] === 0 && arr[4] === 1;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasUint8ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint8array-support/lib/index.js
var require_lib25 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint8ArraySupport = require_main14();
    module2.exports = hasUint8ArraySupport;
  }
});

// node_modules/@stdlib/array-uint8/lib/uint8array.js
var require_uint8array2 = __commonJS({
  "node_modules/@stdlib/array-uint8/lib/uint8array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Uint8Array === "function" ? Uint8Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint8/lib/polyfill.js
var require_polyfill4 = __commonJS({
  "node_modules/@stdlib/array-uint8/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint8/lib/index.js
var require_lib26 = __commonJS({
  "node_modules/@stdlib/array-uint8/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint8ArraySupport = require_lib25();
    var builtin = require_uint8array2();
    var polyfill = require_polyfill4();
    var ctor;
    if (hasUint8ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-uint16array/lib/main.js
var require_main15 = __commonJS({
  "node_modules/@stdlib/assert-is-uint16array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasUint16Array = typeof Uint16Array === "function";
    function isUint16Array(value) {
      return hasUint16Array && value instanceof Uint16Array || nativeClass(value) === "[object Uint16Array]";
    }
    module2.exports = isUint16Array;
  }
});

// node_modules/@stdlib/assert-is-uint16array/lib/index.js
var require_lib27 = __commonJS({
  "node_modules/@stdlib/assert-is-uint16array/lib/index.js"(exports, module2) {
    "use strict";
    var isUint16Array = require_main15();
    module2.exports = isUint16Array;
  }
});

// node_modules/@stdlib/constants-uint16-max/lib/index.js
var require_lib28 = __commonJS({
  "node_modules/@stdlib/constants-uint16-max/lib/index.js"(exports, module2) {
    "use strict";
    var UINT16_MAX = 65535 | 0;
    module2.exports = UINT16_MAX;
  }
});

// node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js
var require_uint16array = __commonJS({
  "node_modules/@stdlib/assert-has-uint16array-support/lib/uint16array.js"(exports, module2) {
    "use strict";
    var main = typeof Uint16Array === "function" ? Uint16Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint16array-support/lib/main.js
var require_main16 = __commonJS({
  "node_modules/@stdlib/assert-has-uint16array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isUint16Array = require_lib27();
    var UINT16_MAX = require_lib28();
    var GlobalUint16Array = require_uint16array();
    function hasUint16ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint16Array !== "function") {
        return false;
      }
      try {
        arr = [1, 3.14, -3.14, UINT16_MAX + 1, UINT16_MAX + 2];
        arr = new GlobalUint16Array(arr);
        bool = isUint16Array(arr) && arr[0] === 1 && arr[1] === 3 && arr[2] === UINT16_MAX - 2 && arr[3] === 0 && arr[4] === 1;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasUint16ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint16array-support/lib/index.js
var require_lib29 = __commonJS({
  "node_modules/@stdlib/assert-has-uint16array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint16ArraySupport = require_main16();
    module2.exports = hasUint16ArraySupport;
  }
});

// node_modules/@stdlib/array-uint16/lib/uint16array.js
var require_uint16array2 = __commonJS({
  "node_modules/@stdlib/array-uint16/lib/uint16array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Uint16Array === "function" ? Uint16Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint16/lib/polyfill.js
var require_polyfill5 = __commonJS({
  "node_modules/@stdlib/array-uint16/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint16/lib/index.js
var require_lib30 = __commonJS({
  "node_modules/@stdlib/array-uint16/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint16ArraySupport = require_lib29();
    var builtin = require_uint16array2();
    var polyfill = require_polyfill5();
    var ctor;
    if (hasUint16ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-little-endian/lib/ctors.js
var require_ctors = __commonJS({
  "node_modules/@stdlib/assert-is-little-endian/lib/ctors.js"(exports, module2) {
    "use strict";
    var Uint8Array2 = require_lib26();
    var Uint16Array2 = require_lib30();
    var ctors = {
      "uint16": Uint16Array2,
      "uint8": Uint8Array2
    };
    module2.exports = ctors;
  }
});

// node_modules/@stdlib/assert-is-little-endian/lib/main.js
var require_main17 = __commonJS({
  "node_modules/@stdlib/assert-is-little-endian/lib/main.js"(exports, module2) {
    "use strict";
    var ctors = require_ctors();
    var bool;
    function isLittleEndian() {
      var uint16view;
      var uint8view;
      uint16view = new ctors["uint16"](1);
      uint16view[0] = 4660;
      uint8view = new ctors["uint8"](uint16view.buffer);
      return uint8view[0] === 52;
    }
    bool = isLittleEndian();
    module2.exports = bool;
  }
});

// node_modules/@stdlib/assert-is-little-endian/lib/index.js
var require_lib31 = __commonJS({
  "node_modules/@stdlib/assert-is-little-endian/lib/index.js"(exports, module2) {
    "use strict";
    var IS_LITTLE_ENDIAN = require_main17();
    module2.exports = IS_LITTLE_ENDIAN;
  }
});

// node_modules/@stdlib/number-float64-base-to-words/lib/indices.js
var require_indices = __commonJS({
  "node_modules/@stdlib/number-float64-base-to-words/lib/indices.js"(exports, module2) {
    "use strict";
    var isLittleEndian = require_lib31();
    var indices;
    var HIGH;
    var LOW;
    if (isLittleEndian === true) {
      HIGH = 1;
      LOW = 0;
    } else {
      HIGH = 0;
      LOW = 1;
    }
    indices = {
      "HIGH": HIGH,
      "LOW": LOW
    };
    module2.exports = indices;
  }
});

// node_modules/@stdlib/number-float64-base-to-words/lib/to_words.js
var require_to_words = __commonJS({
  "node_modules/@stdlib/number-float64-base-to-words/lib/to_words.js"(exports, module2) {
    "use strict";
    var Uint32Array2 = require_lib19();
    var Float64Array2 = require_lib22();
    var indices = require_indices();
    var FLOAT64_VIEW = new Float64Array2(1);
    var UINT32_VIEW = new Uint32Array2(FLOAT64_VIEW.buffer);
    var HIGH = indices.HIGH;
    var LOW = indices.LOW;
    function toWords(out, x) {
      FLOAT64_VIEW[0] = x;
      out[0] = UINT32_VIEW[HIGH];
      out[1] = UINT32_VIEW[LOW];
      return out;
    }
    module2.exports = toWords;
  }
});

// node_modules/@stdlib/number-float64-base-to-words/lib/main.js
var require_main18 = __commonJS({
  "node_modules/@stdlib/number-float64-base-to-words/lib/main.js"(exports, module2) {
    "use strict";
    var fcn = require_to_words();
    function toWords(out, x) {
      if (arguments.length === 1) {
        return fcn([0, 0], out);
      }
      return fcn(out, x);
    }
    module2.exports = toWords;
  }
});

// node_modules/@stdlib/number-float64-base-to-words/lib/index.js
var require_lib32 = __commonJS({
  "node_modules/@stdlib/number-float64-base-to-words/lib/index.js"(exports, module2) {
    "use strict";
    var toWords = require_main18();
    module2.exports = toWords;
  }
});

// node_modules/@stdlib/number-float64-base-set-low-word/lib/low.js
var require_low = __commonJS({
  "node_modules/@stdlib/number-float64-base-set-low-word/lib/low.js"(exports, module2) {
    "use strict";
    var isLittleEndian = require_lib31();
    var LOW;
    if (isLittleEndian === true) {
      LOW = 0;
    } else {
      LOW = 1;
    }
    module2.exports = LOW;
  }
});

// node_modules/@stdlib/number-float64-base-set-low-word/lib/main.js
var require_main19 = __commonJS({
  "node_modules/@stdlib/number-float64-base-set-low-word/lib/main.js"(exports, module2) {
    "use strict";
    var Uint32Array2 = require_lib19();
    var Float64Array2 = require_lib22();
    var LOW = require_low();
    var FLOAT64_VIEW = new Float64Array2(1);
    var UINT32_VIEW = new Uint32Array2(FLOAT64_VIEW.buffer);
    function setLowWord(x, low) {
      FLOAT64_VIEW[0] = x;
      UINT32_VIEW[LOW] = low >>> 0;
      return FLOAT64_VIEW[0];
    }
    module2.exports = setLowWord;
  }
});

// node_modules/@stdlib/number-float64-base-set-low-word/lib/index.js
var require_lib33 = __commonJS({
  "node_modules/@stdlib/number-float64-base-set-low-word/lib/index.js"(exports, module2) {
    "use strict";
    var setLowWord = require_main19();
    module2.exports = setLowWord;
  }
});

// node_modules/@stdlib/number-uint32-base-to-int32/lib/main.js
var require_main20 = __commonJS({
  "node_modules/@stdlib/number-uint32-base-to-int32/lib/main.js"(exports, module2) {
    "use strict";
    function uint32ToInt32(x) {
      return x | 0;
    }
    module2.exports = uint32ToInt32;
  }
});

// node_modules/@stdlib/number-uint32-base-to-int32/lib/index.js
var require_lib34 = __commonJS({
  "node_modules/@stdlib/number-uint32-base-to-int32/lib/index.js"(exports, module2) {
    "use strict";
    var uint32ToInt32 = require_main20();
    module2.exports = uint32ToInt32;
  }
});

// node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js
var require_high = __commonJS({
  "node_modules/@stdlib/number-float64-base-get-high-word/lib/high.js"(exports, module2) {
    "use strict";
    var isLittleEndian = require_lib31();
    var HIGH;
    if (isLittleEndian === true) {
      HIGH = 1;
    } else {
      HIGH = 0;
    }
    module2.exports = HIGH;
  }
});

// node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js
var require_main21 = __commonJS({
  "node_modules/@stdlib/number-float64-base-get-high-word/lib/main.js"(exports, module2) {
    "use strict";
    var Uint32Array2 = require_lib19();
    var Float64Array2 = require_lib22();
    var HIGH = require_high();
    var FLOAT64_VIEW = new Float64Array2(1);
    var UINT32_VIEW = new Uint32Array2(FLOAT64_VIEW.buffer);
    function getHighWord(x) {
      FLOAT64_VIEW[0] = x;
      return UINT32_VIEW[HIGH];
    }
    module2.exports = getHighWord;
  }
});

// node_modules/@stdlib/number-float64-base-get-high-word/lib/index.js
var require_lib35 = __commonJS({
  "node_modules/@stdlib/number-float64-base-get-high-word/lib/index.js"(exports, module2) {
    "use strict";
    var getHighWord = require_main21();
    module2.exports = getHighWord;
  }
});

// node_modules/@stdlib/number-float64-base-from-words/lib/indices.js
var require_indices2 = __commonJS({
  "node_modules/@stdlib/number-float64-base-from-words/lib/indices.js"(exports, module2) {
    "use strict";
    var isLittleEndian = require_lib31();
    var indices;
    var HIGH;
    var LOW;
    if (isLittleEndian === true) {
      HIGH = 1;
      LOW = 0;
    } else {
      HIGH = 0;
      LOW = 1;
    }
    indices = {
      "HIGH": HIGH,
      "LOW": LOW
    };
    module2.exports = indices;
  }
});

// node_modules/@stdlib/number-float64-base-from-words/lib/main.js
var require_main22 = __commonJS({
  "node_modules/@stdlib/number-float64-base-from-words/lib/main.js"(exports, module2) {
    "use strict";
    var Uint32Array2 = require_lib19();
    var Float64Array2 = require_lib22();
    var indices = require_indices2();
    var FLOAT64_VIEW = new Float64Array2(1);
    var UINT32_VIEW = new Uint32Array2(FLOAT64_VIEW.buffer);
    var HIGH = indices.HIGH;
    var LOW = indices.LOW;
    function fromWords(high, low) {
      UINT32_VIEW[HIGH] = high;
      UINT32_VIEW[LOW] = low;
      return FLOAT64_VIEW[0];
    }
    module2.exports = fromWords;
  }
});

// node_modules/@stdlib/number-float64-base-from-words/lib/index.js
var require_lib36 = __commonJS({
  "node_modules/@stdlib/number-float64-base-from-words/lib/index.js"(exports, module2) {
    "use strict";
    var fromWords = require_main22();
    module2.exports = fromWords;
  }
});

// node_modules/@stdlib/math-base-special-copysign/lib/copysign.js
var require_copysign = __commonJS({
  "node_modules/@stdlib/math-base-special-copysign/lib/copysign.js"(exports, module2) {
    "use strict";
    var toWords = require_lib32();
    var getHighWord = require_lib35();
    var fromWords = require_lib36();
    var SIGN_MASK = 2147483648 >>> 0;
    var MAGNITUDE_MASK = 2147483647 | 0;
    var WORDS = [0, 0];
    function copysign(x, y) {
      var hx;
      var hy;
      toWords(WORDS, x);
      hx = WORDS[0];
      hx &= MAGNITUDE_MASK;
      hy = getHighWord(y);
      hy &= SIGN_MASK;
      hx |= hy;
      return fromWords(hx, WORDS[1]);
    }
    module2.exports = copysign;
  }
});

// node_modules/@stdlib/math-base-special-copysign/lib/index.js
var require_lib37 = __commonJS({
  "node_modules/@stdlib/math-base-special-copysign/lib/index.js"(exports, module2) {
    "use strict";
    var copysign = require_copysign();
    module2.exports = copysign;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/x_is_zero.js
var require_x_is_zero = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/x_is_zero.js"(exports, module2) {
    "use strict";
    var isOdd = require_lib9();
    var copysign = require_lib37();
    var NINF = require_lib4();
    var PINF = require_lib2();
    function pow(x, y) {
      if (y === NINF) {
        return PINF;
      }
      if (y === PINF) {
        return 0;
      }
      if (y > 0) {
        if (isOdd(y)) {
          return x;
        }
        return 0;
      }
      if (isOdd(y)) {
        return copysign(PINF, x);
      }
      return PINF;
    }
    module2.exports = pow;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/y_is_huge.js
var require_y_is_huge = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/y_is_huge.js"(exports, module2) {
    "use strict";
    var getHighWord = require_lib35();
    var ABS_MASK = 2147483647 | 0;
    var HIGH_MAX_NEAR_UNITY = 1072693247 | 0;
    var HUGE = 1e300;
    var TINY = 1e-300;
    function pow(x, y) {
      var ahx;
      var hx;
      hx = getHighWord(x);
      ahx = hx & ABS_MASK;
      if (ahx <= HIGH_MAX_NEAR_UNITY) {
        if (y < 0) {
          return HUGE * HUGE;
        }
        return TINY * TINY;
      }
      if (y > 0) {
        return HUGE * HUGE;
      }
      return TINY * TINY;
    }
    module2.exports = pow;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/y_is_infinite.js
var require_y_is_infinite = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/y_is_infinite.js"(exports, module2) {
    "use strict";
    var abs = require_lib11();
    var PINF = require_lib2();
    function pow(x, y) {
      if (x === -1) {
        return (x - x) / (x - x);
      }
      if (x === 1) {
        return 1;
      }
      if (abs(x) < 1 === (y === PINF)) {
        return 0;
      }
      return PINF;
    }
    module2.exports = pow;
  }
});

// node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js
var require_high2 = __commonJS({
  "node_modules/@stdlib/number-float64-base-set-high-word/lib/high.js"(exports, module2) {
    "use strict";
    var isLittleEndian = require_lib31();
    var HIGH;
    if (isLittleEndian === true) {
      HIGH = 1;
    } else {
      HIGH = 0;
    }
    module2.exports = HIGH;
  }
});

// node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js
var require_main23 = __commonJS({
  "node_modules/@stdlib/number-float64-base-set-high-word/lib/main.js"(exports, module2) {
    "use strict";
    var Uint32Array2 = require_lib19();
    var Float64Array2 = require_lib22();
    var HIGH = require_high2();
    var FLOAT64_VIEW = new Float64Array2(1);
    var UINT32_VIEW = new Uint32Array2(FLOAT64_VIEW.buffer);
    function setHighWord(x, high) {
      FLOAT64_VIEW[0] = x;
      UINT32_VIEW[HIGH] = high >>> 0;
      return FLOAT64_VIEW[0];
    }
    module2.exports = setHighWord;
  }
});

// node_modules/@stdlib/number-float64-base-set-high-word/lib/index.js
var require_lib38 = __commonJS({
  "node_modules/@stdlib/number-float64-base-set-high-word/lib/index.js"(exports, module2) {
    "use strict";
    var setHighWord = require_main23();
    module2.exports = setHighWord;
  }
});

// node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js
var require_lib39 = __commonJS({
  "node_modules/@stdlib/constants-float64-exponent-bias/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_EXPONENT_BIAS = 1023 | 0;
    module2.exports = FLOAT64_EXPONENT_BIAS;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/polyval_l.js
var require_polyval_l = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/polyval_l.js"(exports, module2) {
    "use strict";
    function evalpoly(x) {
      if (x === 0) {
        return 0.5999999999999946;
      }
      return 0.5999999999999946 + x * (0.4285714285785502 + x * (0.33333332981837743 + x * (0.272728123808534 + x * (0.23066074577556175 + x * 0.20697501780033842))));
    }
    module2.exports = evalpoly;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/log2ax.js
var require_log2ax = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/log2ax.js"(exports, module2) {
    "use strict";
    var getHighWord = require_lib35();
    var setLowWord = require_lib33();
    var setHighWord = require_lib38();
    var BIAS = require_lib39();
    var polyvalL = require_polyval_l();
    var HIGH_SIGNIFICAND_MASK = 1048575 | 0;
    var HIGH_MIN_NORMAL_EXP = 1048576 | 0;
    var HIGH_BIASED_EXP_0 = 1072693248 | 0;
    var HIGH_BIASED_EXP_NEG_512 = 536870912 | 0;
    var HIGH_SIGNIFICAND_HALF = 524288 | 0;
    var HIGH_NUM_SIGNIFICAND_BITS = 20 | 0;
    var TWO53 = 9007199254740992;
    var CP = 0.9617966939259756;
    var CP_HI = 0.9617967009544373;
    var CP_LO = -7028461650952758e-24;
    var BP = [
      1,
      1.5
    ];
    var DP_HI = [
      0,
      0.5849624872207642
    ];
    var DP_LO = [
      0,
      1350039202129749e-23
    ];
    function log2ax(out, ax, ahx) {
      var tmp;
      var ss;
      var s2;
      var hs;
      var ls;
      var ht;
      var lt;
      var bp;
      var dp;
      var hp;
      var lp;
      var hz;
      var lz;
      var t1;
      var t2;
      var t;
      var r;
      var u;
      var v;
      var n;
      var j;
      var k;
      n = 0 | 0;
      if (ahx < HIGH_MIN_NORMAL_EXP) {
        ax *= TWO53;
        n -= 53 | 0;
        ahx = getHighWord(ax);
      }
      n += (ahx >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS | 0;
      j = ahx & HIGH_SIGNIFICAND_MASK | 0;
      ahx = j | HIGH_BIASED_EXP_0 | 0;
      if (j <= 235662) {
        k = 0;
      } else if (j < 767610) {
        k = 1;
      } else {
        k = 0;
        n += 1 | 0;
        ahx -= HIGH_MIN_NORMAL_EXP;
      }
      ax = setHighWord(ax, ahx);
      bp = BP[k];
      u = ax - bp;
      v = 1 / (ax + bp);
      ss = u * v;
      hs = setLowWord(ss, 0);
      tmp = (ahx >> 1 | HIGH_BIASED_EXP_NEG_512) + HIGH_SIGNIFICAND_HALF;
      tmp += k << 18;
      ht = setHighWord(0, tmp);
      lt = ax - (ht - bp);
      ls = v * (u - hs * ht - hs * lt);
      s2 = ss * ss;
      r = s2 * s2 * polyvalL(s2);
      r += ls * (hs + ss);
      s2 = hs * hs;
      ht = 3 + s2 + r;
      ht = setLowWord(ht, 0);
      lt = r - (ht - 3 - s2);
      u = hs * ht;
      v = ls * ht + lt * ss;
      hp = u + v;
      hp = setLowWord(hp, 0);
      lp = v - (hp - u);
      hz = CP_HI * hp;
      lz = CP_LO * hp + lp * CP + DP_LO[k];
      dp = DP_HI[k];
      t = n;
      t1 = hz + lz + dp + t;
      t1 = setLowWord(t1, 0);
      t2 = lz - (t1 - t - dp - hz);
      out[0] = t1;
      out[1] = t2;
      return out;
    }
    module2.exports = log2ax;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/polyval_w.js
var require_polyval_w = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/polyval_w.js"(exports, module2) {
    "use strict";
    function evalpoly(x) {
      if (x === 0) {
        return 0.5;
      }
      return 0.5 + x * (-0.3333333333333333 + x * 0.25);
    }
    module2.exports = evalpoly;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/logx.js
var require_logx = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/logx.js"(exports, module2) {
    "use strict";
    var setLowWord = require_lib33();
    var polyvalW = require_polyval_w();
    var INV_LN2 = 1.4426950408889634;
    var INV_LN2_HI = 1.4426950216293335;
    var INV_LN2_LO = 19259629911266175e-24;
    function logx(out, ax) {
      var t2;
      var t1;
      var t;
      var w;
      var u;
      var v;
      t = ax - 1;
      w = t * t * polyvalW(t);
      u = INV_LN2_HI * t;
      v = t * INV_LN2_LO - w * INV_LN2;
      t1 = u + v;
      t1 = setLowWord(t1, 0);
      t2 = v - (t1 - u);
      out[0] = t1;
      out[1] = t2;
      return out;
    }
    module2.exports = logx;
  }
});

// node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js
var require_lib40 = __commonJS({
  "node_modules/@stdlib/constants-float64-max-base2-exponent/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_MAX_BASE2_EXPONENT = 1023 | 0;
    module2.exports = FLOAT64_MAX_BASE2_EXPONENT;
  }
});

// node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js
var require_lib41 = __commonJS({
  "node_modules/@stdlib/constants-float64-max-base2-exponent-subnormal/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL = -1023 | 0;
    module2.exports = FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL;
  }
});

// node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js
var require_lib42 = __commonJS({
  "node_modules/@stdlib/constants-float64-min-base2-exponent-subnormal/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL = -1074 | 0;
    module2.exports = FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL;
  }
});

// node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js
var require_lib43 = __commonJS({
  "node_modules/@stdlib/constants-float64-smallest-normal/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_SMALLEST_NORMAL = 22250738585072014e-324;
    module2.exports = FLOAT64_SMALLEST_NORMAL;
  }
});

// node_modules/@stdlib/number-float64-base-normalize/lib/normalize.js
var require_normalize = __commonJS({
  "node_modules/@stdlib/number-float64-base-normalize/lib/normalize.js"(exports, module2) {
    "use strict";
    var FLOAT64_SMALLEST_NORMAL = require_lib43();
    var isInfinite = require_lib5();
    var isnan = require_lib();
    var abs = require_lib11();
    var SCALAR = 4503599627370496;
    function normalize(out, x) {
      if (isnan(x) || isInfinite(x)) {
        out[0] = x;
        out[1] = 0;
        return out;
      }
      if (x !== 0 && abs(x) < FLOAT64_SMALLEST_NORMAL) {
        out[0] = x * SCALAR;
        out[1] = -52;
        return out;
      }
      out[0] = x;
      out[1] = 0;
      return out;
    }
    module2.exports = normalize;
  }
});

// node_modules/@stdlib/number-float64-base-normalize/lib/main.js
var require_main24 = __commonJS({
  "node_modules/@stdlib/number-float64-base-normalize/lib/main.js"(exports, module2) {
    "use strict";
    var fcn = require_normalize();
    function normalize(out, x) {
      if (arguments.length === 1) {
        return fcn([0, 0], out);
      }
      return fcn(out, x);
    }
    module2.exports = normalize;
  }
});

// node_modules/@stdlib/number-float64-base-normalize/lib/index.js
var require_lib44 = __commonJS({
  "node_modules/@stdlib/number-float64-base-normalize/lib/index.js"(exports, module2) {
    "use strict";
    var normalize = require_main24();
    module2.exports = normalize;
  }
});

// node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js
var require_lib45 = __commonJS({
  "node_modules/@stdlib/constants-float64-high-word-exponent-mask/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_HIGH_WORD_EXPONENT_MASK = 2146435072;
    module2.exports = FLOAT64_HIGH_WORD_EXPONENT_MASK;
  }
});

// node_modules/@stdlib/number-float64-base-exponent/lib/main.js
var require_main25 = __commonJS({
  "node_modules/@stdlib/number-float64-base-exponent/lib/main.js"(exports, module2) {
    "use strict";
    var getHighWord = require_lib35();
    var EXP_MASK = require_lib45();
    var BIAS = require_lib39();
    function exponent(x) {
      var high = getHighWord(x);
      high = (high & EXP_MASK) >>> 20;
      return high - BIAS | 0;
    }
    module2.exports = exponent;
  }
});

// node_modules/@stdlib/number-float64-base-exponent/lib/index.js
var require_lib46 = __commonJS({
  "node_modules/@stdlib/number-float64-base-exponent/lib/index.js"(exports, module2) {
    "use strict";
    var exponent = require_main25();
    module2.exports = exponent;
  }
});

// node_modules/@stdlib/math-base-special-ldexp/lib/ldexp.js
var require_ldexp = __commonJS({
  "node_modules/@stdlib/math-base-special-ldexp/lib/ldexp.js"(exports, module2) {
    "use strict";
    var PINF = require_lib2();
    var NINF = require_lib4();
    var BIAS = require_lib39();
    var MAX_EXPONENT = require_lib40();
    var MAX_SUBNORMAL_EXPONENT = require_lib41();
    var MIN_SUBNORMAL_EXPONENT = require_lib42();
    var isnan = require_lib();
    var isInfinite = require_lib5();
    var copysign = require_lib37();
    var normalize = require_lib44();
    var floatExp = require_lib46();
    var toWords = require_lib32();
    var fromWords = require_lib36();
    var TWO52_INV = 2220446049250313e-31;
    var CLEAR_EXP_MASK = 2148532223 >>> 0;
    var FRAC = [0, 0];
    var WORDS = [0, 0];
    function ldexp(frac, exp) {
      var high;
      var m;
      if (frac === 0 || isnan(frac) || isInfinite(frac)) {
        return frac;
      }
      normalize(FRAC, frac);
      frac = FRAC[0];
      exp += FRAC[1];
      exp += floatExp(frac);
      if (exp < MIN_SUBNORMAL_EXPONENT) {
        return copysign(0, frac);
      }
      if (exp > MAX_EXPONENT) {
        if (frac < 0) {
          return NINF;
        }
        return PINF;
      }
      if (exp <= MAX_SUBNORMAL_EXPONENT) {
        exp += 52;
        m = TWO52_INV;
      } else {
        m = 1;
      }
      toWords(WORDS, frac);
      high = WORDS[0];
      high &= CLEAR_EXP_MASK;
      high |= exp + BIAS << 20;
      return m * fromWords(high, WORDS[1]);
    }
    module2.exports = ldexp;
  }
});

// node_modules/@stdlib/math-base-special-ldexp/lib/index.js
var require_lib47 = __commonJS({
  "node_modules/@stdlib/math-base-special-ldexp/lib/index.js"(exports, module2) {
    "use strict";
    var ldexp = require_ldexp();
    module2.exports = ldexp;
  }
});

// node_modules/@stdlib/constants-float64-ln-two/lib/index.js
var require_lib48 = __commonJS({
  "node_modules/@stdlib/constants-float64-ln-two/lib/index.js"(exports, module2) {
    "use strict";
    var LN2 = 0.6931471805599453;
    module2.exports = LN2;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/polyval_p.js
var require_polyval_p = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/polyval_p.js"(exports, module2) {
    "use strict";
    function evalpoly(x) {
      if (x === 0) {
        return 0.16666666666666602;
      }
      return 0.16666666666666602 + x * (-0.0027777777777015593 + x * (6613756321437934e-20 + x * (-16533902205465252e-22 + x * 41381367970572385e-24)));
    }
    module2.exports = evalpoly;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/pow2.js
var require_pow2 = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/pow2.js"(exports, module2) {
    "use strict";
    var getHighWord = require_lib35();
    var setHighWord = require_lib38();
    var setLowWord = require_lib33();
    var uint32ToInt32 = require_lib34();
    var ldexp = require_lib47();
    var LN2 = require_lib48();
    var BIAS = require_lib39();
    var polyvalP = require_polyval_p();
    var ABS_MASK = 2147483647 | 0;
    var HIGH_SIGNIFICAND_MASK = 1048575 | 0;
    var HIGH_MIN_NORMAL_EXP = 1048576 | 0;
    var HIGH_BIASED_EXP_NEG_1 = 1071644672 | 0;
    var HIGH_NUM_SIGNIFICAND_BITS = 20 | 0;
    var LN2_HI = 0.6931471824645996;
    var LN2_LO = -1904654299957768e-24;
    function pow2(j, hp, lp) {
      var tmp;
      var t1;
      var t;
      var r;
      var u;
      var v;
      var w;
      var z;
      var n;
      var i;
      var k;
      i = j & ABS_MASK | 0;
      k = (i >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS | 0;
      n = 0;
      if (i > HIGH_BIASED_EXP_NEG_1) {
        n = j + (HIGH_MIN_NORMAL_EXP >> k + 1) >>> 0;
        k = ((n & ABS_MASK) >> HIGH_NUM_SIGNIFICAND_BITS) - BIAS | 0;
        tmp = (n & ~(HIGH_SIGNIFICAND_MASK >> k)) >>> 0;
        t = setHighWord(0, tmp);
        n = (n & HIGH_SIGNIFICAND_MASK | HIGH_MIN_NORMAL_EXP) >> HIGH_NUM_SIGNIFICAND_BITS - k >>> 0;
        if (j < 0) {
          n = -n;
        }
        hp -= t;
      }
      t = lp + hp;
      t = setLowWord(t, 0);
      u = t * LN2_HI;
      v = (lp - (t - hp)) * LN2 + t * LN2_LO;
      z = u + v;
      w = v - (z - u);
      t = z * z;
      t1 = z - t * polyvalP(t);
      r = z * t1 / (t1 - 2) - (w + z * w);
      z = 1 - (r - z);
      j = getHighWord(z);
      j = uint32ToInt32(j);
      j += n << HIGH_NUM_SIGNIFICAND_BITS >>> 0;
      if (j >> HIGH_NUM_SIGNIFICAND_BITS <= 0) {
        z = ldexp(z, n);
      } else {
        z = setHighWord(z, j);
      }
      return z;
    }
    module2.exports = pow2;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/pow.js
var require_pow = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/pow.js"(exports, module2) {
    "use strict";
    var isnan = require_lib();
    var isOdd = require_lib9();
    var isInfinite = require_lib5();
    var isInteger = require_lib7();
    var sqrt = require_lib10();
    var abs = require_lib11();
    var toWords = require_lib32();
    var setLowWord = require_lib33();
    var uint32ToInt32 = require_lib34();
    var NINF = require_lib4();
    var PINF = require_lib2();
    var xIsZero = require_x_is_zero();
    var yIsHuge = require_y_is_huge();
    var yIsInfinite = require_y_is_infinite();
    var log2ax = require_log2ax();
    var logx = require_logx();
    var pow2 = require_pow2();
    var ABS_MASK = 2147483647 | 0;
    var HIGH_MAX_NEAR_UNITY = 1072693247 | 0;
    var HIGH_BIASED_EXP_31 = 1105199104 | 0;
    var HIGH_BIASED_EXP_64 = 1139802112 | 0;
    var HIGH_BIASED_EXP_10 = 1083179008 | 0;
    var HIGH_BIASED_EXP_0 = 1072693248 | 0;
    var HIGH_1075 = 1083231232 | 0;
    var HIGH_NEG_1075 = 3230714880 >>> 0;
    var HIGH_NUM_NONSIGN_BITS = 31 | 0;
    var HUGE = 1e300;
    var TINY = 1e-300;
    var OVT = 8008566259537294e-32;
    var WORDS = [0 | 0, 0 | 0];
    var LOG_WORKSPACE = [0, 0];
    function pow(x, y) {
      var ahx;
      var ahy;
      var ax;
      var hx;
      var lx;
      var hy;
      var ly;
      var sx;
      var sy;
      var y1;
      var hp;
      var lp;
      var t;
      var z;
      var j;
      var i;
      if (isnan(x) || isnan(y)) {
        return NaN;
      }
      toWords(WORDS, y);
      hy = WORDS[0];
      ly = WORDS[1];
      if (ly === 0) {
        if (y === 0) {
          return 1;
        }
        if (y === 1) {
          return x;
        }
        if (y === -1) {
          return 1 / x;
        }
        if (y === 0.5) {
          return sqrt(x);
        }
        if (y === -0.5) {
          return 1 / sqrt(x);
        }
        if (y === 2) {
          return x * x;
        }
        if (y === 3) {
          return x * x * x;
        }
        if (y === 4) {
          x *= x;
          return x * x;
        }
        if (isInfinite(y)) {
          return yIsInfinite(x, y);
        }
      }
      toWords(WORDS, x);
      hx = WORDS[0];
      lx = WORDS[1];
      if (lx === 0) {
        if (hx === 0) {
          return xIsZero(x, y);
        }
        if (x === 1) {
          return 1;
        }
        if (x === -1 && isOdd(y)) {
          return -1;
        }
        if (isInfinite(x)) {
          if (x === NINF) {
            return pow(-0, -y);
          }
          if (y < 0) {
            return 0;
          }
          return PINF;
        }
      }
      if (x < 0 && isInteger(y) === false) {
        return (x - x) / (x - x);
      }
      ax = abs(x);
      ahx = hx & ABS_MASK | 0;
      ahy = hy & ABS_MASK | 0;
      sx = hx >>> HIGH_NUM_NONSIGN_BITS | 0;
      sy = hy >>> HIGH_NUM_NONSIGN_BITS | 0;
      if (sx && isOdd(y)) {
        sx = -1;
      } else {
        sx = 1;
      }
      if (ahy > HIGH_BIASED_EXP_31) {
        if (ahy > HIGH_BIASED_EXP_64) {
          return yIsHuge(x, y);
        }
        if (ahx < HIGH_MAX_NEAR_UNITY) {
          if (sy === 1) {
            return sx * HUGE * HUGE;
          }
          return sx * TINY * TINY;
        }
        if (ahx > HIGH_BIASED_EXP_0) {
          if (sy === 0) {
            return sx * HUGE * HUGE;
          }
          return sx * TINY * TINY;
        }
        t = logx(LOG_WORKSPACE, ax);
      } else {
        t = log2ax(LOG_WORKSPACE, ax, ahx);
      }
      y1 = setLowWord(y, 0);
      lp = (y - y1) * t[0] + y * t[1];
      hp = y1 * t[0];
      z = lp + hp;
      toWords(WORDS, z);
      j = uint32ToInt32(WORDS[0]);
      i = uint32ToInt32(WORDS[1]);
      if (j >= HIGH_BIASED_EXP_10) {
        if ((j - HIGH_BIASED_EXP_10 | i) !== 0) {
          return sx * HUGE * HUGE;
        }
        if (lp + OVT > z - hp) {
          return sx * HUGE * HUGE;
        }
      } else if ((j & ABS_MASK) >= HIGH_1075) {
        if ((j - HIGH_NEG_1075 | i) !== 0) {
          return sx * TINY * TINY;
        }
        if (lp <= z - hp) {
          return sx * TINY * TINY;
        }
      }
      z = pow2(j, hp, lp);
      return sx * z;
    }
    module2.exports = pow;
  }
});

// node_modules/@stdlib/math-base-special-pow/lib/index.js
var require_lib49 = __commonJS({
  "node_modules/@stdlib/math-base-special-pow/lib/index.js"(exports, module2) {
    "use strict";
    var pow = require_pow();
    module2.exports = pow;
  }
});

// node_modules/@stdlib/math-base-special-round/lib/round.js
var require_round = __commonJS({
  "node_modules/@stdlib/math-base-special-round/lib/round.js"(exports, module2) {
    "use strict";
    var round = Math.round;
    module2.exports = round;
  }
});

// node_modules/@stdlib/math-base-special-round/lib/index.js
var require_lib50 = __commonJS({
  "node_modules/@stdlib/math-base-special-round/lib/index.js"(exports, module2) {
    "use strict";
    var round = require_round();
    module2.exports = round;
  }
});

// node_modules/@stdlib/constants-float64-max-safe-integer/lib/index.js
var require_lib51 = __commonJS({
  "node_modules/@stdlib/constants-float64-max-safe-integer/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_MAX_SAFE_INTEGER = 9007199254740991;
    module2.exports = FLOAT64_MAX_SAFE_INTEGER;
  }
});

// node_modules/@stdlib/constants-float64-max-base10-exponent/lib/index.js
var require_lib52 = __commonJS({
  "node_modules/@stdlib/constants-float64-max-base10-exponent/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_MAX_BASE10_EXPONENT = 308 | 0;
    module2.exports = FLOAT64_MAX_BASE10_EXPONENT;
  }
});

// node_modules/@stdlib/constants-float64-min-base10-exponent/lib/index.js
var require_lib53 = __commonJS({
  "node_modules/@stdlib/constants-float64-min-base10-exponent/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_MIN_BASE10_EXPONENT = -308 | 0;
    module2.exports = FLOAT64_MIN_BASE10_EXPONENT;
  }
});

// node_modules/@stdlib/constants-float64-min-base10-exponent-subnormal/lib/index.js
var require_lib54 = __commonJS({
  "node_modules/@stdlib/constants-float64-min-base10-exponent-subnormal/lib/index.js"(exports, module2) {
    "use strict";
    var FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL = -324 | 0;
    module2.exports = FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL;
  }
});

// node_modules/@stdlib/math-base-special-roundn/lib/roundn.js
var require_roundn = __commonJS({
  "node_modules/@stdlib/math-base-special-roundn/lib/roundn.js"(exports, module2) {
    "use strict";
    var isnan = require_lib();
    var isInfinite = require_lib5();
    var pow = require_lib49();
    var abs = require_lib11();
    var round = require_lib50();
    var MAX_SAFE_INTEGER = require_lib51();
    var MAX_EXP = require_lib52();
    var MIN_EXP = require_lib53();
    var MIN_EXP_SUBNORMAL = require_lib54();
    var MAX_INT = MAX_SAFE_INTEGER + 1;
    var HUGE = 1e308;
    function roundn2(x, n) {
      var s;
      var y;
      if (isnan(x) || isnan(n) || isInfinite(n)) {
        return NaN;
      }
      if (isInfinite(x) || x === 0 || n < MIN_EXP_SUBNORMAL || abs(x) > MAX_INT && n <= 0) {
        return x;
      }
      if (n > MAX_EXP) {
        return 0 * x;
      }
      if (n < MIN_EXP) {
        s = pow(10, -(n + MAX_EXP));
        y = x * HUGE * s;
        if (isInfinite(y)) {
          return x;
        }
        return round(y) / HUGE / s;
      }
      s = pow(10, -n);
      y = x * s;
      if (isInfinite(y)) {
        return x;
      }
      return round(y) / s;
    }
    module2.exports = roundn2;
  }
});

// node_modules/@stdlib/math-base-special-roundn/lib/index.js
var require_lib55 = __commonJS({
  "node_modules/@stdlib/math-base-special-roundn/lib/index.js"(exports, module2) {
    "use strict";
    var roundn2 = require_roundn();
    module2.exports = roundn2;
  }
});

// node_modules/@stdlib/datasets-stopwords-en/data/words.json
var require_words = __commonJS({
  "node_modules/@stdlib/datasets-stopwords-en/data/words.json"(exports, module2) {
    module2.exports = [
      "a",
      "about",
      "above",
      "across",
      "actually",
      "after",
      "again",
      "against",
      "all",
      "almost",
      "alone",
      "along",
      "already",
      "also",
      "although",
      "always",
      "among",
      "an",
      "and",
      "another",
      "any",
      "anybody",
      "anyone",
      "anything",
      "anywhere",
      "are",
      "around",
      "as",
      "ask",
      "asked",
      "asking",
      "asks",
      "at",
      "away",
      "b",
      "be",
      "became",
      "because",
      "become",
      "becomes",
      "becoming",
      "been",
      "before",
      "behind",
      "being",
      "best",
      "better",
      "between",
      "both",
      "but",
      "by",
      "c",
      "came",
      "can",
      "certain",
      "certainly",
      "clearly",
      "come",
      "consider",
      "considering",
      "could",
      "d",
      "did",
      "different",
      "do",
      "does",
      "doing",
      "done",
      "down",
      "downwards",
      "during",
      "e",
      "each",
      "eg",
      "eight",
      "either",
      "enough",
      "even",
      "ever",
      "every",
      "everybody",
      "everyone",
      "everything",
      "everywhere",
      "ex",
      "exactly",
      "example",
      "except",
      "f",
      "fact",
      "facts",
      "far",
      "few",
      "first",
      "five",
      "for",
      "four",
      "from",
      "further",
      "g",
      "get",
      "gets",
      "given",
      "gives",
      "go",
      "going",
      "got",
      "h",
      "had",
      "has",
      "have",
      "having",
      "he",
      "her",
      "here",
      "herself",
      "him",
      "himself",
      "his",
      "how",
      "however",
      "i",
      "ie",
      "if",
      "in",
      "into",
      "is",
      "it",
      "its",
      "itself",
      "j",
      "just",
      "k",
      "keep",
      "keeps",
      "knew",
      "know",
      "known",
      "knows",
      "l",
      "last",
      "later",
      "least",
      "less",
      "let",
      "like",
      "likely",
      "m",
      "many",
      "may",
      "me",
      "might",
      "more",
      "most",
      "mostly",
      "much",
      "must",
      "my",
      "myself",
      "n",
      "necessary",
      "need",
      "needs",
      "never",
      "new",
      "next",
      "nine",
      "no",
      "nobody",
      "non",
      "not",
      "nothing",
      "now",
      "nowhere",
      "o",
      "of",
      "off",
      "often",
      "old",
      "on",
      "once",
      "one",
      "only",
      "or",
      "other",
      "others",
      "our",
      "out",
      "over",
      "p",
      "per",
      "perhaps",
      "please",
      "possible",
      "put",
      "q",
      "quite",
      "r",
      "rather",
      "really",
      "right",
      "s",
      "said",
      "same",
      "saw",
      "say",
      "says",
      "second",
      "see",
      "seem",
      "seemed",
      "seems",
      "seven",
      "several",
      "shall",
      "she",
      "should",
      "since",
      "six",
      "so",
      "some",
      "somebody",
      "someone",
      "something",
      "somewhere",
      "still",
      "such",
      "sure",
      "t",
      "take",
      "taken",
      "ten",
      "than",
      "that",
      "the",
      "their",
      "them",
      "then",
      "there",
      "therefore",
      "therein",
      "thereupon",
      "these",
      "they",
      "think",
      "third",
      "this",
      "those",
      "though",
      "three",
      "through",
      "thus",
      "to",
      "together",
      "too",
      "took",
      "toward",
      "two",
      "u",
      "under",
      "until",
      "up",
      "upon",
      "us",
      "use",
      "used",
      "uses",
      "v",
      "very",
      "w",
      "want",
      "wanted",
      "wants",
      "was",
      "way",
      "we",
      "well",
      "went",
      "were",
      "what",
      "when",
      "where",
      "whether",
      "which",
      "while",
      "who",
      "whole",
      "whose",
      "why",
      "will",
      "with",
      "within",
      "without",
      "would",
      "x",
      "y",
      "yet",
      "you",
      "your",
      "yours",
      "z"
    ];
  }
});

// node_modules/@stdlib/datasets-stopwords-en/lib/browser.js
var require_browser = __commonJS({
  "node_modules/@stdlib/datasets-stopwords-en/lib/browser.js"(exports, module2) {
    "use strict";
    var data = require_words();
    function stopwords2() {
      return data.slice();
    }
    module2.exports = stopwords2;
  }
});

// node_modules/@stdlib/utils-define-property/lib/define_property.js
var require_define_property = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/define_property.js"(exports, module2) {
    "use strict";
    var main = typeof Object.defineProperty === "function" ? Object.defineProperty : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js
var require_has_define_property_support = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/has_define_property_support.js"(exports, module2) {
    "use strict";
    var defineProperty = require_define_property();
    function hasDefinePropertySupport() {
      try {
        defineProperty({}, "x", {});
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = hasDefinePropertySupport;
  }
});

// node_modules/@stdlib/utils-define-property/lib/builtin.js
var require_builtin = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/builtin.js"(exports, module2) {
    "use strict";
    var defineProperty = Object.defineProperty;
    module2.exports = defineProperty;
  }
});

// node_modules/@stdlib/utils-define-property/lib/polyfill.js
var require_polyfill6 = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/polyfill.js"(exports, module2) {
    "use strict";
    var objectProtoype = Object.prototype;
    var toStr = objectProtoype.toString;
    var defineGetter = objectProtoype.__defineGetter__;
    var defineSetter = objectProtoype.__defineSetter__;
    var lookupGetter = objectProtoype.__lookupGetter__;
    var lookupSetter = objectProtoype.__lookupSetter__;
    function defineProperty(obj, prop, descriptor) {
      var prototype;
      var hasValue;
      var hasGet;
      var hasSet;
      if (typeof obj !== "object" || obj === null || toStr.call(obj) === "[object Array]") {
        throw new TypeError("invalid argument. First argument must be an object. Value: `" + obj + "`.");
      }
      if (typeof descriptor !== "object" || descriptor === null || toStr.call(descriptor) === "[object Array]") {
        throw new TypeError("invalid argument. Property descriptor must be an object. Value: `" + descriptor + "`.");
      }
      hasValue = "value" in descriptor;
      if (hasValue) {
        if (lookupGetter.call(obj, prop) || lookupSetter.call(obj, prop)) {
          prototype = obj.__proto__;
          obj.__proto__ = objectProtoype;
          delete obj[prop];
          obj[prop] = descriptor.value;
          obj.__proto__ = prototype;
        } else {
          obj[prop] = descriptor.value;
        }
      }
      hasGet = "get" in descriptor;
      hasSet = "set" in descriptor;
      if (hasValue && (hasGet || hasSet)) {
        throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");
      }
      if (hasGet && defineGetter) {
        defineGetter.call(obj, prop, descriptor.get);
      }
      if (hasSet && defineSetter) {
        defineSetter.call(obj, prop, descriptor.set);
      }
      return obj;
    }
    module2.exports = defineProperty;
  }
});

// node_modules/@stdlib/utils-define-property/lib/index.js
var require_lib56 = __commonJS({
  "node_modules/@stdlib/utils-define-property/lib/index.js"(exports, module2) {
    "use strict";
    var hasDefinePropertySupport = require_has_define_property_support();
    var builtin = require_builtin();
    var polyfill = require_polyfill6();
    var defineProperty;
    if (hasDefinePropertySupport()) {
      defineProperty = builtin;
    } else {
      defineProperty = polyfill;
    }
    module2.exports = defineProperty;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js
var require_main26 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/main.js"(exports, module2) {
    "use strict";
    var defineProperty = require_lib56();
    function setNonEnumerableReadOnly(obj, prop, value) {
      defineProperty(obj, prop, {
        "configurable": false,
        "enumerable": false,
        "writable": false,
        "value": value
      });
    }
    module2.exports = setNonEnumerableReadOnly;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/index.js
var require_lib57 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-property/lib/index.js"(exports, module2) {
    "use strict";
    var setNonEnumerableReadOnly = require_main26();
    module2.exports = setNonEnumerableReadOnly;
  }
});

// node_modules/@stdlib/assert-is-number/lib/primitive.js
var require_primitive = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/primitive.js"(exports, module2) {
    "use strict";
    function isNumber(value) {
      return typeof value === "number";
    }
    module2.exports = isNumber;
  }
});

// node_modules/@stdlib/assert-is-number/lib/tostring.js
var require_tostring2 = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/tostring.js"(exports, module2) {
    "use strict";
    var Number2 = require_lib3();
    var toString = Number2.prototype.toString;
    module2.exports = toString;
  }
});

// node_modules/@stdlib/assert-is-number/lib/try2serialize.js
var require_try2serialize = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/try2serialize.js"(exports, module2) {
    "use strict";
    var toString = require_tostring2();
    function test(value) {
      try {
        toString.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = test;
  }
});

// node_modules/@stdlib/assert-is-number/lib/object.js
var require_object = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/object.js"(exports, module2) {
    "use strict";
    var hasToStringTag = require_lib13();
    var nativeClass = require_lib15();
    var Number2 = require_lib3();
    var test = require_try2serialize();
    var FLG = hasToStringTag();
    function isNumber(value) {
      if (typeof value === "object") {
        if (value instanceof Number2) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object Number]";
      }
      return false;
    }
    module2.exports = isNumber;
  }
});

// node_modules/@stdlib/assert-is-number/lib/main.js
var require_main27 = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive();
    var isObject = require_object();
    function isNumber(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isNumber;
  }
});

// node_modules/@stdlib/assert-is-number/lib/index.js
var require_lib58 = __commonJS({
  "node_modules/@stdlib/assert-is-number/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isNumber = require_main27();
    var isPrimitive = require_primitive();
    var isObject = require_object();
    setReadOnly(isNumber, "isPrimitive", isPrimitive);
    setReadOnly(isNumber, "isObject", isObject);
    module2.exports = isNumber;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/integer.js
var require_integer = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/integer.js"(exports, module2) {
    "use strict";
    var PINF = require_lib2();
    var NINF = require_lib4();
    var isInt = require_lib7();
    function isInteger(value) {
      return value < PINF && value > NINF && isInt(value);
    }
    module2.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/primitive.js
var require_primitive2 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/primitive.js"(exports, module2) {
    "use strict";
    var isNumber = require_lib58().isPrimitive;
    var isInt = require_integer();
    function isInteger(value) {
      return isNumber(value) && isInt(value);
    }
    module2.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/object.js
var require_object2 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/object.js"(exports, module2) {
    "use strict";
    var isNumber = require_lib58().isObject;
    var isInt = require_integer();
    function isInteger(value) {
      return isNumber(value) && isInt(value.valueOf());
    }
    module2.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/main.js
var require_main28 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive2();
    var isObject = require_object2();
    function isInteger(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-integer/lib/index.js
var require_lib59 = __commonJS({
  "node_modules/@stdlib/assert-is-integer/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isInteger = require_main28();
    var isPrimitive = require_primitive2();
    var isObject = require_object2();
    setReadOnly(isInteger, "isPrimitive", isPrimitive);
    setReadOnly(isInteger, "isObject", isObject);
    module2.exports = isInteger;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js
var require_primitive3 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/primitive.js"(exports, module2) {
    "use strict";
    var isInteger = require_lib59().isPrimitive;
    function isNonNegativeInteger(value) {
      return isInteger(value) && value >= 0;
    }
    module2.exports = isNonNegativeInteger;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js
var require_object3 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/object.js"(exports, module2) {
    "use strict";
    var isInteger = require_lib59().isObject;
    function isNonNegativeInteger(value) {
      return isInteger(value) && value.valueOf() >= 0;
    }
    module2.exports = isNonNegativeInteger;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js
var require_main29 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive3();
    var isObject = require_object3();
    function isNonNegativeInteger(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isNonNegativeInteger;
  }
});

// node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js
var require_lib60 = __commonJS({
  "node_modules/@stdlib/assert-is-nonnegative-integer/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isNonNegativeInteger = require_main29();
    var isPrimitive = require_primitive3();
    var isObject = require_object3();
    setReadOnly(isNonNegativeInteger, "isPrimitive", isPrimitive);
    setReadOnly(isNonNegativeInteger, "isObject", isObject);
    module2.exports = isNonNegativeInteger;
  }
});

// node_modules/@stdlib/assert-is-positive-integer/lib/primitive.js
var require_primitive4 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-integer/lib/primitive.js"(exports, module2) {
    "use strict";
    var isInteger = require_lib59().isPrimitive;
    function isPositiveInteger(value) {
      return isInteger(value) && value > 0;
    }
    module2.exports = isPositiveInteger;
  }
});

// node_modules/@stdlib/assert-is-positive-integer/lib/object.js
var require_object4 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-integer/lib/object.js"(exports, module2) {
    "use strict";
    var isInteger = require_lib59().isObject;
    function isPositiveInteger(value) {
      return isInteger(value) && value.valueOf() > 0;
    }
    module2.exports = isPositiveInteger;
  }
});

// node_modules/@stdlib/assert-is-positive-integer/lib/main.js
var require_main30 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-integer/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive4();
    var isObject = require_object4();
    function isPositiveInteger(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isPositiveInteger;
  }
});

// node_modules/@stdlib/assert-is-positive-integer/lib/index.js
var require_lib61 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-integer/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isPositiveInteger = require_main30();
    var isPrimitive = require_primitive4();
    var isObject = require_object4();
    setReadOnly(isPositiveInteger, "isPrimitive", isPrimitive);
    setReadOnly(isPositiveInteger, "isObject", isObject);
    module2.exports = isPositiveInteger;
  }
});

// node_modules/@stdlib/assert-is-array/lib/main.js
var require_main31 = __commonJS({
  "node_modules/@stdlib/assert-is-array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var f;
    function isArray(value) {
      return nativeClass(value) === "[object Array]";
    }
    if (Array.isArray) {
      f = Array.isArray;
    } else {
      f = isArray;
    }
    module2.exports = f;
  }
});

// node_modules/@stdlib/assert-is-array/lib/index.js
var require_lib62 = __commonJS({
  "node_modules/@stdlib/assert-is-array/lib/index.js"(exports, module2) {
    "use strict";
    var isArray = require_main31();
    module2.exports = isArray;
  }
});

// node_modules/@stdlib/assert-tools-array-function/lib/arrayfcn.js
var require_arrayfcn = __commonJS({
  "node_modules/@stdlib/assert-tools-array-function/lib/arrayfcn.js"(exports, module2) {
    "use strict";
    var isArray = require_lib62();
    function arrayfcn(predicate) {
      if (typeof predicate !== "function") {
        throw new TypeError("invalid argument. Must provide a function. Value: `" + predicate + "`.");
      }
      return every;
      function every(value) {
        var len;
        var i;
        if (!isArray(value)) {
          return false;
        }
        len = value.length;
        if (len === 0) {
          return false;
        }
        for (i = 0; i < len; i++) {
          if (predicate(value[i]) === false) {
            return false;
          }
        }
        return true;
      }
    }
    module2.exports = arrayfcn;
  }
});

// node_modules/@stdlib/assert-tools-array-function/lib/index.js
var require_lib63 = __commonJS({
  "node_modules/@stdlib/assert-tools-array-function/lib/index.js"(exports, module2) {
    "use strict";
    var arrayfcn = require_arrayfcn();
    module2.exports = arrayfcn;
  }
});

// node_modules/@stdlib/assert-is-string/lib/primitive.js
var require_primitive5 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/primitive.js"(exports, module2) {
    "use strict";
    function isString(value) {
      return typeof value === "string";
    }
    module2.exports = isString;
  }
});

// node_modules/@stdlib/assert-is-string/lib/valueof.js
var require_valueof = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/valueof.js"(exports, module2) {
    "use strict";
    var valueOf = String.prototype.valueOf;
    module2.exports = valueOf;
  }
});

// node_modules/@stdlib/assert-is-string/lib/try2valueof.js
var require_try2valueof = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/try2valueof.js"(exports, module2) {
    "use strict";
    var valueOf = require_valueof();
    function test(value) {
      try {
        valueOf.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = test;
  }
});

// node_modules/@stdlib/assert-is-string/lib/object.js
var require_object5 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/object.js"(exports, module2) {
    "use strict";
    var hasToStringTag = require_lib13();
    var nativeClass = require_lib15();
    var test = require_try2valueof();
    var FLG = hasToStringTag();
    function isString(value) {
      if (typeof value === "object") {
        if (value instanceof String) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object String]";
      }
      return false;
    }
    module2.exports = isString;
  }
});

// node_modules/@stdlib/assert-is-string/lib/main.js
var require_main32 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive5();
    var isObject = require_object5();
    function isString(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isString;
  }
});

// node_modules/@stdlib/assert-is-string/lib/index.js
var require_lib64 = __commonJS({
  "node_modules/@stdlib/assert-is-string/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isString = require_main32();
    var isPrimitive = require_primitive5();
    var isObject = require_object5();
    setReadOnly(isString, "isPrimitive", isPrimitive);
    setReadOnly(isString, "isObject", isObject);
    module2.exports = isString;
  }
});

// node_modules/@stdlib/assert-is-string-array/lib/index.js
var require_lib65 = __commonJS({
  "node_modules/@stdlib/assert-is-string-array/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var arrayfun = require_lib63();
    var isString = require_lib64();
    var isStringArray = arrayfun(isString);
    setReadOnly(isStringArray, "primitives", arrayfun(isString.isPrimitive));
    setReadOnly(isStringArray, "objects", arrayfun(isString.isObject));
    module2.exports = isStringArray;
  }
});

// node_modules/@stdlib/utils-define-read-only-property/lib/main.js
var require_main33 = __commonJS({
  "node_modules/@stdlib/utils-define-read-only-property/lib/main.js"(exports, module2) {
    "use strict";
    var defineProperty = require_lib56();
    function setReadOnly(obj, prop, value) {
      defineProperty(obj, prop, {
        "configurable": false,
        "enumerable": true,
        "writable": false,
        "value": value
      });
    }
    module2.exports = setReadOnly;
  }
});

// node_modules/@stdlib/utils-define-read-only-property/lib/index.js
var require_lib66 = __commonJS({
  "node_modules/@stdlib/utils-define-read-only-property/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_main33();
    module2.exports = setReadOnly;
  }
});

// node_modules/@stdlib/constants-array-max-typed-array-length/lib/index.js
var require_lib67 = __commonJS({
  "node_modules/@stdlib/constants-array-max-typed-array-length/lib/index.js"(exports, module2) {
    "use strict";
    var MAX_TYPED_ARRAY_LENGTH = 9007199254740991;
    module2.exports = MAX_TYPED_ARRAY_LENGTH;
  }
});

// node_modules/@stdlib/assert-is-collection/lib/main.js
var require_main34 = __commonJS({
  "node_modules/@stdlib/assert-is-collection/lib/main.js"(exports, module2) {
    "use strict";
    var isInteger = require_lib7();
    var MAX_LENGTH = require_lib67();
    function isCollection(value) {
      return typeof value === "object" && value !== null && typeof value.length === "number" && isInteger(value.length) && value.length >= 0 && value.length <= MAX_LENGTH;
    }
    module2.exports = isCollection;
  }
});

// node_modules/@stdlib/assert-is-collection/lib/index.js
var require_lib68 = __commonJS({
  "node_modules/@stdlib/assert-is-collection/lib/index.js"(exports, module2) {
    "use strict";
    var isCollection = require_main34();
    module2.exports = isCollection;
  }
});

// node_modules/@stdlib/assert-is-nan/lib/primitive.js
var require_primitive6 = __commonJS({
  "node_modules/@stdlib/assert-is-nan/lib/primitive.js"(exports, module2) {
    "use strict";
    var isNumber = require_lib58().isPrimitive;
    var isNan = require_lib();
    function isnan(value) {
      return isNumber(value) && isNan(value);
    }
    module2.exports = isnan;
  }
});

// node_modules/@stdlib/assert-is-nan/lib/object.js
var require_object6 = __commonJS({
  "node_modules/@stdlib/assert-is-nan/lib/object.js"(exports, module2) {
    "use strict";
    var isNumber = require_lib58().isObject;
    var isNan = require_lib();
    function isnan(value) {
      return isNumber(value) && isNan(value.valueOf());
    }
    module2.exports = isnan;
  }
});

// node_modules/@stdlib/assert-is-nan/lib/main.js
var require_main35 = __commonJS({
  "node_modules/@stdlib/assert-is-nan/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive6();
    var isObject = require_object6();
    function isnan(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isnan;
  }
});

// node_modules/@stdlib/assert-is-nan/lib/index.js
var require_lib69 = __commonJS({
  "node_modules/@stdlib/assert-is-nan/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isnan = require_main35();
    var isPrimitive = require_primitive6();
    var isObject = require_object6();
    setReadOnly(isnan, "isPrimitive", isPrimitive);
    setReadOnly(isnan, "isObject", isObject);
    module2.exports = isnan;
  }
});

// node_modules/@stdlib/assert-contains/lib/contains.js
var require_contains = __commonJS({
  "node_modules/@stdlib/assert-contains/lib/contains.js"(exports, module2) {
    "use strict";
    var isCollection = require_lib68();
    var isInteger = require_lib59().isPrimitive;
    var isString = require_lib64().isPrimitive;
    var isnan = require_lib69().isPrimitive;
    function contains(val, searchValue, position) {
      var len;
      var pos;
      var i;
      if (!isCollection(val) && !isString(val)) {
        throw new TypeError("invalid argument. First argument must be array-like. Value: `" + val + "`.");
      }
      if (arguments.length < 2) {
        throw new Error("insufficient input arguments. Must provide a search value.");
      }
      if (arguments.length > 2) {
        if (!isInteger(position)) {
          throw new TypeError("invalid argument. Third argument must be an integer. Value: `" + position + "`.");
        }
        pos = position;
        if (pos < 0) {
          pos = 0;
        }
      } else {
        pos = 0;
      }
      if (isString(val)) {
        if (!isString(searchValue)) {
          throw new TypeError("invalid argument. Second argument must be a string primitive. Value: `" + searchValue + "`.");
        }
        return val.indexOf(searchValue, pos) !== -1;
      }
      len = val.length;
      if (isnan(searchValue)) {
        for (i = pos; i < len; i++) {
          if (isnan(val[i])) {
            return true;
          }
        }
        return false;
      }
      for (i = pos; i < len; i++) {
        if (val[i] === searchValue) {
          return true;
        }
      }
      return false;
    }
    module2.exports = contains;
  }
});

// node_modules/@stdlib/assert-contains/lib/index.js
var require_lib70 = __commonJS({
  "node_modules/@stdlib/assert-contains/lib/index.js"(exports, module2) {
    "use strict";
    var contains = require_contains();
    module2.exports = contains;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/primitive.js
var require_primitive7 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/primitive.js"(exports, module2) {
    "use strict";
    function isBoolean(value) {
      return typeof value === "boolean";
    }
    module2.exports = isBoolean;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/tostring.js
var require_tostring3 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/tostring.js"(exports, module2) {
    "use strict";
    var toString = Boolean.prototype.toString;
    module2.exports = toString;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js
var require_try2serialize2 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/try2serialize.js"(exports, module2) {
    "use strict";
    var toString = require_tostring3();
    function test(value) {
      try {
        toString.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = test;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/object.js
var require_object7 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/object.js"(exports, module2) {
    "use strict";
    var hasToStringTag = require_lib13();
    var nativeClass = require_lib15();
    var test = require_try2serialize2();
    var FLG = hasToStringTag();
    function isBoolean(value) {
      if (typeof value === "object") {
        if (value instanceof Boolean) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object Boolean]";
      }
      return false;
    }
    module2.exports = isBoolean;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/main.js
var require_main36 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive7();
    var isObject = require_object7();
    function isBoolean(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isBoolean;
  }
});

// node_modules/@stdlib/assert-is-boolean/lib/index.js
var require_lib71 = __commonJS({
  "node_modules/@stdlib/assert-is-boolean/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isBoolean = require_main36();
    var isPrimitive = require_primitive7();
    var isObject = require_object7();
    setReadOnly(isBoolean, "isPrimitive", isPrimitive);
    setReadOnly(isBoolean, "isObject", isObject);
    module2.exports = isBoolean;
  }
});

// node_modules/@stdlib/nlp-tokenize/lib/abbreviations.json
var require_abbreviations = __commonJS({
  "node_modules/@stdlib/nlp-tokenize/lib/abbreviations.json"(exports, module2) {
    module2.exports = {
      "i.e.": ["i.e."],
      "I.e.": ["I.e."],
      "I.E.": ["I.E."],
      "e.g.": ["e.g."],
      "E.g.": ["E.g."],
      "E.G.": ["E.G."],
      "et al.": ["et al."],
      "etc.": ["etc."],
      "vs.": ["vs."],
      "A.S.A.P": ["A.S.A.P"],
      "E.T.A.": ["E.T.A."],
      "D.I.Y": ["D.I.Y"],
      "R.S.V.P": ["R.S.V.P"],
      "P.S.": ["P.S."],
      "B.Y.O.B": ["B.Y.O.B"],
      "Ms.": ["Ms."],
      "Mr.": ["Mr."],
      "Dr.": ["Dr."],
      "Prof.": ["Prof."],
      "Mrs.": ["Mrs."],
      "Messrs.": ["Messrs."],
      "Gov.": ["Gov."],
      "Gen.": ["Gen."],
      "Lt.": ["Lt."],
      "Col.": ["Col."],
      "Mt.": ["Mt."],
      "Bros.": ["Bros."],
      "Corp.": ["Corp."],
      "Co.": ["Co."],
      "co.": ["co."],
      "Inc.": ["Inc."],
      "Ltd.": ["Ltd."],
      "Rep.": ["Rep."],
      "Sen.": ["Sen."],
      "Jr.": ["Jr."],
      "Sr.": ["Sr."],
      "Ph.D.": ["Ph.D."],
      "J.D.": ["J.D."],
      "M.D.": ["M.D."],
      "Rev.": ["Rev."],
      "Adm.": ["Adm."],
      "St.": ["St."],
      "a.m.": ["a.m."],
      "p.m.": ["p.m."],
      "b.c.": ["b.c."],
      "B.C.": ["B.C."],
      "a.d.": ["a.d."],
      "A.D.": ["A.D."],
      "b.c.e.": ["b.c.e."],
      "B.C.E.": ["B.C.E."],
      "Jan.": ["Jan."],
      "Feb.": ["Feb."],
      "Mar.": ["Mar."],
      "Apr.": ["Apr."],
      "May.": ["May."],
      "Jun.": ["Jun."],
      "Jul.": ["Jul."],
      "Aug.": ["Aug."],
      "Sep.": ["Sep."],
      "Sept.": ["Sept."],
      "Oct.": ["Oct."],
      "Nov.": ["Nov."],
      "Dec.": ["Dec."],
      "Ala.": ["Ala."],
      "Ariz.": ["Ariz."],
      "Ark.": ["Ark."],
      "Calif.": ["Calif."],
      "Colo.": ["Colo."],
      "Conn.": ["Conn."],
      "Del.": ["Del."],
      "D.C.": ["D.C."],
      "Fla.": ["Fla."],
      "Ga.": ["Ga."],
      "Ill.": ["Ill."],
      "Ind.": ["Ind."],
      "Kans.": ["Kans."],
      "Kan.": ["Kan."],
      "Ky.": ["Ky."],
      "La.": ["La."],
      "Md.": ["Md."],
      "Mass.": ["Mass."],
      "Mich.": ["Mich."],
      "Minn.": ["Minn."],
      "Miss.": ["Miss."],
      "Mo.": ["Mo."],
      "Mont.": ["Mont."],
      "Nebr.": ["Nebr."],
      "Neb.": ["Neb."],
      "Nev.": ["Nev."],
      "N.H.": ["N.H."],
      "N.J.": ["N.J."],
      "N.M.": ["N.M."],
      "N.Y.": ["N.Y."],
      "N.C.": ["N.C."],
      "N.D.": ["N.D."],
      "Okla.": ["Okla."],
      "Ore.": ["Ore."],
      "Pa.": ["Pa."],
      "Tenn.": ["Tenn."],
      "Va.": ["Va."],
      "Wash.": ["Wash."],
      "Wis.": ["Wis."]
    };
  }
});

// node_modules/@stdlib/nlp-tokenize/lib/emojis.json
var require_emojis = __commonJS({
  "node_modules/@stdlib/nlp-tokenize/lib/emojis.json"(exports, module2) {
    module2.exports = {
      "^_^": ["^_^"],
      "=D": ["=D"],
      ";-p": [";-p"],
      ":O": [":O"],
      ":-/": [":-/"],
      xD: ["xD"],
      V_V: ["V_V"],
      ";(": [";("],
      "(:": ["(:"],
      '")': ['")'],
      ":Y": [":Y"],
      ":]": [":]"],
      ":3": [":3"],
      ":(": [":("],
      ":-)": [":-)"],
      "=3": ["=3"],
      ":))": [":))"],
      ":>": [":>"],
      ";p": [";p"],
      ":p": [":p"],
      "=[[": ["=[["],
      xDD: ["xDD"],
      "<333": ["<333"],
      "<33": ["<33"],
      ":P": [":P"],
      "o.O": ["o.O"],
      "<3": ["<3"],
      ";-)": [";-)"],
      ":)": [":)"],
      "-_-": ["-_-"],
      ":')": [":')"],
      o_O: ["o_O"],
      ";)": [";)"],
      "=]": ["=]"],
      "(=": ["(="],
      "-__-": ["-__-"],
      ":/": [":/"],
      ":0": [":0"],
      "(^_^)": ["(^_^)"],
      ";D": [";D"],
      o_o: ["o_o"],
      ":((": [":(("],
      "=)": ["=)"]
    };
  }
});

// node_modules/@stdlib/nlp-tokenize/lib/contractions.json
var require_contractions = __commonJS({
  "node_modules/@stdlib/nlp-tokenize/lib/contractions.json"(exports, module2) {
    module2.exports = {
      "'s": ["'s"],
      "'S": ["'S"],
      "ain't": ["ai", "n't"],
      aint: ["ai", "nt"],
      "Ain't": ["Ai", "n't"],
      "aren't": ["are", "n't"],
      arent: ["are", "nt"],
      "Aren't": ["Are", "n't"],
      "can't": ["ca", "n't"],
      cant: ["ca", "nt"],
      "Can't": ["Ca", "n't"],
      "can't've": ["ca", "n't", "'ve"],
      "'cause": ["'cause'"],
      cannot: ["can", "not"],
      Cannot: ["Can", "not"],
      "could've": ["could", "'ve"],
      couldve: ["could", "ve"],
      "Could've": ["Could", "'ve"],
      "couldn't": ["could", "n't"],
      couldnt: ["could", "nt"],
      "Couldn't": ["Could", "n't"],
      "couldn't've": ["could", "n't", "'ve"],
      couldntve: ["could", "nt", "ve"],
      "Couldn't've": ["Could", "n't", "'ve"],
      "didn't": ["did", "n't"],
      didnt: ["did", "nt"],
      "Didn't": ["Did", "n't"],
      "doesn't": ["does", "n't"],
      doesnt: ["does", "nt"],
      "Doesn't": ["Does", "n't"],
      "don't": ["do", "n't"],
      dont: ["do", "nt"],
      "Don't": ["Do", "n't"],
      "hadn't": ["had", "n't"],
      hadnt: ["had", "nt"],
      "Hadn't": ["Had", "n't"],
      "hadn't've": ["had", "n't", "'ve"],
      "hasn't": ["has", "n't"],
      hasnt: ["has", "nt"],
      "haven't": ["have", "n't"],
      havent: ["have", "nt"],
      "he'd": ["he", "'d"],
      hed: ["he", "d"],
      "he'd've": ["he", "'d", "'ve"],
      hedve: ["he", "d", "ve"],
      "he'll": ["he", "'ll"],
      "he'll've": ["he", "'ll", "'ve"],
      "he's": ["he", "'s"],
      hes: ["he", "s"],
      "how'd": ["how", "'d"],
      howd: ["how", "d"],
      "how'd'y": ["how", "'d", "'y"],
      "how'll": ["how", "'ll"],
      howll: ["how", "ll"],
      "how's": ["how", "'s"],
      hows: ["how", "s"],
      "I'd": ["I", "'d"],
      "I'd've": ["I", "'d", "'ve"],
      "I'll": ["I", "'ll"],
      "i'll": ["i", "'ll"],
      "I'll've": ["I", "'ll", "'ve"],
      "i'll've": ["i", "'ll", "'ve"],
      "I'm": ["I", "'m"],
      "i'm": ["i", "'m"],
      Im: ["I", "m"],
      im: ["i", "m"],
      "I'ma": ["I", "'ma"],
      "i'ma": ["i", "'ma"],
      "I've": ["I", "'ve"],
      "i've": ["i", "'ve"],
      "isn't": ["is", "n't"],
      isnt: ["is", "nt"],
      "Isn't": ["Is", "n't"],
      "It'd": ["It", "'d"],
      "it'd": ["it", "'d"],
      "it'd've": ["it", "'d", "'ve"],
      "it'll've": ["it", "'ll", "'ve"],
      "it'll": ["it", "'ll"],
      itll: ["it", "ll"],
      "it's": ["it", "'s"],
      "let's": ["let", "'s"],
      lets: ["let", "s"],
      "ma'am": ["ma'am"],
      "mayn't": ["may", "n't"],
      "mightn't": ["might", "n't"],
      "mightn't've": ["might", "n't", "'ve"],
      "might've": ["might", "'ve"],
      "mustn't": ["must", "n't"],
      "mustn't've": ["must", "n't", "'ve"],
      "must've": ["must", "'ve"],
      "needn't": ["need", "n't"],
      "needn't've": ["need", "n't", "'ve"],
      "not've": ["not", "'ve"],
      "o'clock": ["o'clock"],
      "oughtn't": ["ought", "n't"],
      "oughtn't've": ["ought", "n't", "'ve"],
      "so've": ["so", "'ve"],
      "so's": ["so", "'s"],
      "shan't": ["sha", "n't"],
      "sha'n't": ["sha'", "n't"],
      "shan't've": ["sha", "n't", "'ve"],
      "she'd": ["she", "'d"],
      "she'd've": ["she", "'d", "'ve"],
      "she'll": ["she", "'ll"],
      "she'll've": ["she", "'ll", "'ve"],
      "she's": ["she", "'s"],
      "should've": ["should", "'ve"],
      "shouldn't": ["should", "n't"],
      "shouldn't've": ["should", "n't", "'ve"],
      "that'd": ["that", "'d"],
      "that'd've": ["that", "'d", "'ve"],
      "that's": ["that", "'s"],
      thats: ["that", "s"],
      "there'd": ["there", "'d"],
      "there'd've": ["there", "'d", "'ve"],
      "there's": ["there", "'s"],
      "they'd": ["they", "'d"],
      "They'd": ["They", "'d"],
      "they'd've": ["they", "'d", "'ve"],
      "They'd've": ["They", "'d", "'ve"],
      "they'll": ["they", "'ll"],
      "They'll": ["They", "'ll"],
      "they'll've": ["they", "'ll", "'ve"],
      "They'll've": ["They", "'ll", "'ve"],
      "they're": ["they", "'re"],
      "They're": ["They", "'re"],
      "they've": ["they", "'ve"],
      "They've": ["They", "'ve"],
      "to've": ["to", "'ve"],
      "wasn't": ["was", "n't"],
      "we'd": ["we", "'d"],
      "We'd": ["We", "'d"],
      "we'd've": ["we", "'d", "'ve"],
      "we'll": ["we", "'ll"],
      "We'll": ["We", "'ll"],
      "we'll've": ["we", "'ll", "'ve"],
      "We'll've": ["We", "'ll", "'ve"],
      "we're": ["we", "'re"],
      "We're": ["We", "'re"],
      "we've": ["we", "'ve"],
      "We've": ["We", "'ve"],
      "weren't": ["were", "n't"],
      "what'll": ["what", "'ll"],
      "what'll've": ["what", "'ll", "'ve"],
      "what're": ["what", "'re"],
      "what's": ["what", "'s"],
      "what've": ["what", "'ve"],
      "when's": ["when", "'s"],
      "when've": ["when", "'ve"],
      "where'd": ["where", "'d"],
      "where's": ["where", "'s"],
      "where've": ["where", "'ve"],
      "who'd": ["who", "'d"],
      "who'll": ["who", "'ll"],
      "who'll've": ["who", "'ll'", "'ve'"],
      "who're": ["who", "'re"],
      "who's": ["who", "'s"],
      "who've": ["who", "'ve"],
      "why've": ["why", "'ve"],
      "why'll": ["why", "'ll"],
      "why're": ["why", "'re"],
      "why's": ["why", "'s"],
      "will've": ["will", "'ve"],
      "won't": ["wo", "n't"],
      wont: ["wo", "nt"],
      "won't've": ["wo", "n't", "'ve"],
      "would've": ["would", "'ve"],
      "wouldn't": ["would", "n't"],
      "wouldn't've": ["would", "n't", "'ve"],
      "y'all": ["y'", "all"],
      "y'all'd": ["y'", "all", "'d"],
      "y'all'd've": ["y'", "all", "'d", "'ve"],
      "y'all're": ["y'", "all", "'re'"],
      "y'all've": ["y'", "all", "ve"],
      "you'd": ["you", "'d"],
      "You'd": ["You", "'d"],
      "you'd've": ["you", "'d", "'ve"],
      "You'd've": ["You", "'d", "'ve"],
      "you'll": ["you", "'ll"],
      "You'll": ["You", "'ll"],
      "you'll've": ["you", "'ll", "'ve"],
      "You'll've": ["You", "'ll", "'ve"],
      "you're": ["you", "'re"],
      "You're": ["You", "'re"],
      "you've": ["you", "'ve"],
      "You've": ["You", "'ve"]
    };
  }
});

// node_modules/@stdlib/nlp-tokenize/lib/tokenize.js
var require_tokenize = __commonJS({
  "node_modules/@stdlib/nlp-tokenize/lib/tokenize.js"(exports, module2) {
    "use strict";
    var isBoolean = require_lib71().isPrimitive;
    var isString = require_lib64().isPrimitive;
    var hasOwnProp = require_lib14();
    var ABBRS = require_abbreviations();
    var EMOJIS = require_emojis();
    var CONTRACT = require_contractions();
    var REGEXP_PREFIXES = /^([,([{*<"“'`‘.])/gi;
    var REGEXP_SUFFIXES = /([,.!?%*>:;"'”`)\]}])$/gi;
    function extend(arr, ext) {
      var i;
      for (i = 0; i < ext.length; i++) {
        arr.push(ext[i]);
      }
      return arr;
    }
    function tokenizeSubstring(substr) {
      var prefixes = [];
      var suffixes = [];
      var match;
      var done;
      var res;
      do {
        if (!EMOJIS[substr] && !ABBRS[substr] && !CONTRACT[substr]) {
          match = substr.split(REGEXP_PREFIXES);
          if (match.length > 1) {
            prefixes.push(match[1]);
            substr = match[2];
          } else {
            match = substr.split(REGEXP_SUFFIXES);
            if (match.length > 1) {
              substr = match[0];
              suffixes.push(match[1]);
            } else {
              done = true;
            }
          }
        } else {
          done = true;
        }
      } while (!done);
      res = prefixes;
      res.push(substr);
      extend(res, suffixes);
      return res;
    }
    function tokenize(str, keepWhitespace) {
      var subtkns;
      var substrs;
      var tokens;
      var substr;
      var cache;
      var i;
      if (!isString(str)) {
        throw new TypeError("invalid argument. First argument must be a string primitive. Value: `" + str + "`.");
      }
      if (arguments.length > 1) {
        if (!isBoolean(keepWhitespace)) {
          throw new TypeError("invalid argument. Second argument must be a boolean primitive. Value: `" + keepWhitespace + "`.");
        }
      }
      if (!str) {
        return [];
      }
      if (keepWhitespace) {
        substrs = str.split(/(\s+)/);
      } else {
        substrs = str.split(/\s+/);
      }
      cache = {};
      tokens = [];
      for (i = 0; i < substrs.length; i++) {
        substr = substrs[i];
        if (hasOwnProp(cache, substr)) {
          extend(tokens, cache[substr]);
        } else {
          subtkns = tokenizeSubstring(substr);
          extend(tokens, subtkns);
          cache[substr] = subtkns;
        }
      }
      return tokens;
    }
    module2.exports = tokenize;
  }
});

// node_modules/@stdlib/nlp-tokenize/lib/index.js
var require_lib72 = __commonJS({
  "node_modules/@stdlib/nlp-tokenize/lib/index.js"(exports, module2) {
    "use strict";
    var tokenize = require_tokenize();
    module2.exports = tokenize;
  }
});

// node_modules/@stdlib/assert-is-int32array/lib/main.js
var require_main37 = __commonJS({
  "node_modules/@stdlib/assert-is-int32array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasInt32Array = typeof Int32Array === "function";
    function isInt32Array(value) {
      return hasInt32Array && value instanceof Int32Array || nativeClass(value) === "[object Int32Array]";
    }
    module2.exports = isInt32Array;
  }
});

// node_modules/@stdlib/assert-is-int32array/lib/index.js
var require_lib73 = __commonJS({
  "node_modules/@stdlib/assert-is-int32array/lib/index.js"(exports, module2) {
    "use strict";
    var isInt32Array = require_main37();
    module2.exports = isInt32Array;
  }
});

// node_modules/@stdlib/constants-int32-max/lib/index.js
var require_lib74 = __commonJS({
  "node_modules/@stdlib/constants-int32-max/lib/index.js"(exports, module2) {
    "use strict";
    var INT32_MAX = 2147483647 | 0;
    module2.exports = INT32_MAX;
  }
});

// node_modules/@stdlib/constants-int32-min/lib/index.js
var require_lib75 = __commonJS({
  "node_modules/@stdlib/constants-int32-min/lib/index.js"(exports, module2) {
    "use strict";
    var INT32_MIN = -2147483648 | 0;
    module2.exports = INT32_MIN;
  }
});

// node_modules/@stdlib/assert-has-int32array-support/lib/int32array.js
var require_int32array = __commonJS({
  "node_modules/@stdlib/assert-has-int32array-support/lib/int32array.js"(exports, module2) {
    "use strict";
    var main = typeof Int32Array === "function" ? Int32Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-int32array-support/lib/main.js
var require_main38 = __commonJS({
  "node_modules/@stdlib/assert-has-int32array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isInt32Array = require_lib73();
    var INT32_MAX = require_lib74();
    var INT32_MIN = require_lib75();
    var GlobalInt32Array = require_int32array();
    function hasInt32ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalInt32Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalInt32Array([1, 3.14, -3.14, INT32_MAX + 1]);
        bool = isInt32Array(arr) && arr[0] === 1 && arr[1] === 3 && arr[2] === -3 && arr[3] === INT32_MIN;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasInt32ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-int32array-support/lib/index.js
var require_lib76 = __commonJS({
  "node_modules/@stdlib/assert-has-int32array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasInt32ArraySupport = require_main38();
    module2.exports = hasInt32ArraySupport;
  }
});

// node_modules/@stdlib/array-int32/lib/int32array.js
var require_int32array2 = __commonJS({
  "node_modules/@stdlib/array-int32/lib/int32array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Int32Array === "function" ? Int32Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-int32/lib/polyfill.js
var require_polyfill7 = __commonJS({
  "node_modules/@stdlib/array-int32/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-int32/lib/index.js
var require_lib77 = __commonJS({
  "node_modules/@stdlib/array-int32/lib/index.js"(exports, module2) {
    "use strict";
    var hasInt32ArraySupport = require_lib76();
    var builtin = require_int32array2();
    var polyfill = require_polyfill7();
    var ctor;
    if (hasInt32ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/nlp-lda/lib/matrix.js
var require_matrix = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/matrix.js"(exports, module2) {
    "use strict";
    var Int32Array2 = require_lib77();
    var Float64Array2 = require_lib22();
    var setReadOnly = require_lib57();
    function matrix() {
      var dtype;
      var ndims;
      var shape;
      var data;
      var len;
      var mat;
      var i;
      if (arguments.length === 1) {
        shape = arguments[0];
      } else if (arguments.length === 2) {
        shape = arguments[0];
        dtype = arguments[1];
      }
      ndims = shape.length;
      len = 1;
      for (i = 0; i < ndims; i++) {
        len *= shape[i];
      }
      if (dtype === "int32") {
        data = new Int32Array2(len);
      } else {
        data = new Float64Array2(len);
      }
      mat = {};
      mat.dtype = dtype;
      mat.shape = shape;
      mat.strides = [shape[1], 1];
      mat.offset = 0;
      mat.ndims = shape.length;
      mat.length = data.length;
      mat.nbytes = data.byteLength;
      mat.data = data;
      setReadOnly(mat, "get", get);
      setReadOnly(mat, "set", set);
      return mat;
      function get(i2, j) {
        var idx = this.offset + i2 * this.strides[0] + j * this.strides[1];
        return this.data[idx];
      }
      function set(i2, j, v) {
        i2 = this.offset + i2 * this.strides[0] + j * this.strides[1];
        if (i2 >= 0) {
          this.data[i2] = v;
        }
        return this;
      }
    }
    module2.exports = matrix;
  }
});

// node_modules/@stdlib/nlp-lda/lib/get_thetas.js
var require_get_thetas = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/get_thetas.js"(exports, module2) {
    "use strict";
    var matrix = require_matrix();
    function getThetas() {
      var Theta;
      var val;
      var d;
      var k;
      Theta = matrix([this.D, this.K]);
      for (d = 0; d < this.D; d++) {
        for (k = 0; k < this.K; k++) {
          val = (this.nd.get(d, k) + this.alpha) / (this.ndSum[d] + this.K * this.alpha);
          Theta.set(d, k, val);
        }
      }
      return Theta;
    }
    module2.exports = getThetas;
  }
});

// node_modules/@stdlib/assert-is-positive-number/lib/primitive.js
var require_primitive8 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-number/lib/primitive.js"(exports, module2) {
    "use strict";
    var isNumber = require_lib58().isPrimitive;
    function isPositiveNumber(value) {
      return isNumber(value) && value > 0;
    }
    module2.exports = isPositiveNumber;
  }
});

// node_modules/@stdlib/assert-is-positive-number/lib/object.js
var require_object8 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-number/lib/object.js"(exports, module2) {
    "use strict";
    var isNumber = require_lib58().isObject;
    function isPositiveNumber(value) {
      return isNumber(value) && value.valueOf() > 0;
    }
    module2.exports = isPositiveNumber;
  }
});

// node_modules/@stdlib/assert-is-positive-number/lib/main.js
var require_main39 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-number/lib/main.js"(exports, module2) {
    "use strict";
    var isPrimitive = require_primitive8();
    var isObject = require_object8();
    function isPositiveNumber(value) {
      return isPrimitive(value) || isObject(value);
    }
    module2.exports = isPositiveNumber;
  }
});

// node_modules/@stdlib/assert-is-positive-number/lib/index.js
var require_lib78 = __commonJS({
  "node_modules/@stdlib/assert-is-positive-number/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var isPositiveNumber = require_main39();
    var isPrimitive = require_primitive8();
    var isObject = require_object8();
    setReadOnly(isPositiveNumber, "isPrimitive", isPrimitive);
    setReadOnly(isPositiveNumber, "isObject", isObject);
    module2.exports = isPositiveNumber;
  }
});

// node_modules/@stdlib/assert-is-object/lib/main.js
var require_main40 = __commonJS({
  "node_modules/@stdlib/assert-is-object/lib/main.js"(exports, module2) {
    "use strict";
    var isArray = require_lib62();
    function isObject(value) {
      return typeof value === "object" && value !== null && !isArray(value);
    }
    module2.exports = isObject;
  }
});

// node_modules/@stdlib/assert-is-object/lib/index.js
var require_lib79 = __commonJS({
  "node_modules/@stdlib/assert-is-object/lib/index.js"(exports, module2) {
    "use strict";
    var isObject = require_main40();
    module2.exports = isObject;
  }
});

// node_modules/@stdlib/utils-type-of/lib/fixtures/re.js
var require_re = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/fixtures/re.js"(exports, module2) {
    "use strict";
    var RE = /./;
    module2.exports = RE;
  }
});

// node_modules/@stdlib/utils-global/lib/codegen.js
var require_codegen = __commonJS({
  "node_modules/@stdlib/utils-global/lib/codegen.js"(exports, module2) {
    "use strict";
    function getGlobal() {
      return new Function("return this;")();
    }
    module2.exports = getGlobal;
  }
});

// node_modules/@stdlib/utils-global/lib/self.js
var require_self = __commonJS({
  "node_modules/@stdlib/utils-global/lib/self.js"(exports, module2) {
    "use strict";
    var obj = typeof self === "object" ? self : null;
    module2.exports = obj;
  }
});

// node_modules/@stdlib/utils-global/lib/window.js
var require_window = __commonJS({
  "node_modules/@stdlib/utils-global/lib/window.js"(exports, module2) {
    "use strict";
    var obj = typeof window === "object" ? window : null;
    module2.exports = obj;
  }
});

// node_modules/@stdlib/utils-global/lib/global.js
var require_global = __commonJS({
  "node_modules/@stdlib/utils-global/lib/global.js"(exports, module2) {
    "use strict";
    var obj = typeof global === "object" ? global : null;
    module2.exports = obj;
  }
});

// node_modules/@stdlib/utils-global/lib/main.js
var require_main41 = __commonJS({
  "node_modules/@stdlib/utils-global/lib/main.js"(exports, module2) {
    "use strict";
    var isBoolean = require_lib71().isPrimitive;
    var getThis = require_codegen();
    var Self = require_self();
    var Win = require_window();
    var Global = require_global();
    function getGlobal(codegen) {
      if (arguments.length) {
        if (!isBoolean(codegen)) {
          throw new TypeError("invalid argument. Must provide a boolean primitive. Value: `" + codegen + "`.");
        }
        if (codegen) {
          return getThis();
        }
      }
      if (Self) {
        return Self;
      }
      if (Win) {
        return Win;
      }
      if (Global) {
        return Global;
      }
      throw new Error("unexpected error. Unable to resolve global object.");
    }
    module2.exports = getGlobal;
  }
});

// node_modules/@stdlib/utils-global/lib/index.js
var require_lib80 = __commonJS({
  "node_modules/@stdlib/utils-global/lib/index.js"(exports, module2) {
    "use strict";
    var getGlobal = require_main41();
    module2.exports = getGlobal;
  }
});

// node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js
var require_nodelist = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/fixtures/nodelist.js"(exports, module2) {
    "use strict";
    var getGlobal = require_lib80();
    var root = getGlobal();
    var nodeList = root.document && root.document.childNodes;
    module2.exports = nodeList;
  }
});

// node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js
var require_typedarray = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/fixtures/typedarray.js"(exports, module2) {
    "use strict";
    var typedarray = Int8Array;
    module2.exports = typedarray;
  }
});

// node_modules/@stdlib/utils-type-of/lib/check.js
var require_check = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/check.js"(exports, module2) {
    "use strict";
    var RE = require_re();
    var nodeList = require_nodelist();
    var typedarray = require_typedarray();
    function check() {
      if (typeof RE === "function" || typeof typedarray === "object" || typeof nodeList === "function") {
        return true;
      }
      return false;
    }
    module2.exports = check;
  }
});

// node_modules/@stdlib/regexp-function-name/lib/main.js
var require_main42 = __commonJS({
  "node_modules/@stdlib/regexp-function-name/lib/main.js"(exports, module2) {
    "use strict";
    function reFunctionName() {
      return /^\s*function\s*([^(]*)/i;
    }
    module2.exports = reFunctionName;
  }
});

// node_modules/@stdlib/regexp-function-name/lib/regexp.js
var require_regexp = __commonJS({
  "node_modules/@stdlib/regexp-function-name/lib/regexp.js"(exports, module2) {
    "use strict";
    var reFunctionName = require_main42();
    var RE_FUNCTION_NAME = reFunctionName();
    module2.exports = RE_FUNCTION_NAME;
  }
});

// node_modules/@stdlib/regexp-function-name/lib/index.js
var require_lib81 = __commonJS({
  "node_modules/@stdlib/regexp-function-name/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var reFunctionName = require_main42();
    var REGEXP = require_regexp();
    setReadOnly(reFunctionName, "REGEXP", REGEXP);
    module2.exports = reFunctionName;
  }
});

// node_modules/@stdlib/assert-is-object-like/lib/main.js
var require_main43 = __commonJS({
  "node_modules/@stdlib/assert-is-object-like/lib/main.js"(exports, module2) {
    "use strict";
    function isObjectLike(value) {
      return value !== null && typeof value === "object";
    }
    module2.exports = isObjectLike;
  }
});

// node_modules/@stdlib/assert-is-object-like/lib/index.js
var require_lib82 = __commonJS({
  "node_modules/@stdlib/assert-is-object-like/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var arrayfun = require_lib63();
    var isObjectLike = require_main43();
    setReadOnly(isObjectLike, "isObjectLikeArray", arrayfun(isObjectLike));
    module2.exports = isObjectLike;
  }
});

// node_modules/@stdlib/assert-is-buffer/lib/main.js
var require_main44 = __commonJS({
  "node_modules/@stdlib/assert-is-buffer/lib/main.js"(exports, module2) {
    "use strict";
    var isObjectLike = require_lib82();
    function isBuffer(value) {
      return isObjectLike(value) && (value._isBuffer || value.constructor && typeof value.constructor.isBuffer === "function" && value.constructor.isBuffer(value));
    }
    module2.exports = isBuffer;
  }
});

// node_modules/@stdlib/assert-is-buffer/lib/index.js
var require_lib83 = __commonJS({
  "node_modules/@stdlib/assert-is-buffer/lib/index.js"(exports, module2) {
    "use strict";
    var isBuffer = require_main44();
    module2.exports = isBuffer;
  }
});

// node_modules/@stdlib/utils-constructor-name/lib/main.js
var require_main45 = __commonJS({
  "node_modules/@stdlib/utils-constructor-name/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var RE = require_lib81().REGEXP;
    var isBuffer = require_lib83();
    function constructorName(v) {
      var match;
      var name;
      var ctor;
      name = nativeClass(v).slice(8, -1);
      if ((name === "Object" || name === "Error") && v.constructor) {
        ctor = v.constructor;
        if (typeof ctor.name === "string") {
          return ctor.name;
        }
        match = RE.exec(ctor.toString());
        if (match) {
          return match[1];
        }
      }
      if (isBuffer(v)) {
        return "Buffer";
      }
      return name;
    }
    module2.exports = constructorName;
  }
});

// node_modules/@stdlib/utils-constructor-name/lib/index.js
var require_lib84 = __commonJS({
  "node_modules/@stdlib/utils-constructor-name/lib/index.js"(exports, module2) {
    "use strict";
    var constructorName = require_main45();
    module2.exports = constructorName;
  }
});

// node_modules/@stdlib/utils-type-of/lib/typeof.js
var require_typeof = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/typeof.js"(exports, module2) {
    "use strict";
    var ctorName = require_lib84();
    function typeOf(v) {
      var type;
      if (v === null) {
        return "null";
      }
      type = typeof v;
      if (type === "object") {
        return ctorName(v).toLowerCase();
      }
      return type;
    }
    module2.exports = typeOf;
  }
});

// node_modules/@stdlib/utils-type-of/lib/polyfill.js
var require_polyfill8 = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/polyfill.js"(exports, module2) {
    "use strict";
    var ctorName = require_lib84();
    function typeOf(v) {
      return ctorName(v).toLowerCase();
    }
    module2.exports = typeOf;
  }
});

// node_modules/@stdlib/utils-type-of/lib/index.js
var require_lib85 = __commonJS({
  "node_modules/@stdlib/utils-type-of/lib/index.js"(exports, module2) {
    "use strict";
    var usePolyfill = require_check();
    var typeOf = require_typeof();
    var polyfill = require_polyfill8();
    var main = usePolyfill() ? polyfill : typeOf;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-is-function/lib/main.js
var require_main46 = __commonJS({
  "node_modules/@stdlib/assert-is-function/lib/main.js"(exports, module2) {
    "use strict";
    var typeOf = require_lib85();
    function isFunction(value) {
      return typeOf(value) === "function";
    }
    module2.exports = isFunction;
  }
});

// node_modules/@stdlib/assert-is-function/lib/index.js
var require_lib86 = __commonJS({
  "node_modules/@stdlib/assert-is-function/lib/index.js"(exports, module2) {
    "use strict";
    var isFunction = require_main46();
    module2.exports = isFunction;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/native.js
var require_native = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/native.js"(exports, module2) {
    "use strict";
    var getProto = Object.getPrototypeOf;
    module2.exports = getProto;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/proto.js
var require_proto = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/proto.js"(exports, module2) {
    "use strict";
    function getProto(obj) {
      return obj.__proto__;
    }
    module2.exports = getProto;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/polyfill.js
var require_polyfill9 = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/polyfill.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var getProto = require_proto();
    function getPrototypeOf(obj) {
      var proto = getProto(obj);
      if (proto || proto === null) {
        return proto;
      }
      if (nativeClass(obj.constructor) === "[object Function]") {
        return obj.constructor.prototype;
      }
      if (obj instanceof Object) {
        return Object.prototype;
      }
      return null;
    }
    module2.exports = getPrototypeOf;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/detect.js
var require_detect = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/detect.js"(exports, module2) {
    "use strict";
    var isFunction = require_lib86();
    var builtin = require_native();
    var polyfill = require_polyfill9();
    var getProto;
    if (isFunction(Object.getPrototypeOf)) {
      getProto = builtin;
    } else {
      getProto = polyfill;
    }
    module2.exports = getProto;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/get_prototype_of.js
var require_get_prototype_of = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/get_prototype_of.js"(exports, module2) {
    "use strict";
    var getProto = require_detect();
    function getPrototypeOf(value) {
      if (value === null || value === void 0) {
        return null;
      }
      value = Object(value);
      return getProto(value);
    }
    module2.exports = getPrototypeOf;
  }
});

// node_modules/@stdlib/utils-get-prototype-of/lib/index.js
var require_lib87 = __commonJS({
  "node_modules/@stdlib/utils-get-prototype-of/lib/index.js"(exports, module2) {
    "use strict";
    var getPrototype = require_get_prototype_of();
    module2.exports = getPrototype;
  }
});

// node_modules/@stdlib/assert-is-plain-object/lib/main.js
var require_main47 = __commonJS({
  "node_modules/@stdlib/assert-is-plain-object/lib/main.js"(exports, module2) {
    "use strict";
    var isObject = require_lib79();
    var isFunction = require_lib86();
    var getPrototypeOf = require_lib87();
    var hasOwnProp = require_lib14();
    var nativeClass = require_lib15();
    var objectPrototype = Object.prototype;
    function ownProps(obj) {
      var key;
      for (key in obj) {
        if (!hasOwnProp(obj, key)) {
          return false;
        }
      }
      return true;
    }
    function isPlainObject(value) {
      var proto;
      if (!isObject(value)) {
        return false;
      }
      proto = getPrototypeOf(value);
      if (!proto) {
        return true;
      }
      return !hasOwnProp(value, "constructor") && hasOwnProp(proto, "constructor") && isFunction(proto.constructor) && nativeClass(proto.constructor) === "[object Function]" && hasOwnProp(proto, "isPrototypeOf") && isFunction(proto.isPrototypeOf) && (proto === objectPrototype || ownProps(value));
    }
    module2.exports = isPlainObject;
  }
});

// node_modules/@stdlib/assert-is-plain-object/lib/index.js
var require_lib88 = __commonJS({
  "node_modules/@stdlib/assert-is-plain-object/lib/index.js"(exports, module2) {
    "use strict";
    var isPlainObject = require_main47();
    module2.exports = isPlainObject;
  }
});

// node_modules/@stdlib/nlp-lda/lib/validate.js
var require_validate = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/validate.js"(exports, module2) {
    "use strict";
    var isPositive = require_lib78().isPrimitive;
    var isObject = require_lib88();
    var hasOwnProp = require_lib14();
    function validate(opts, options) {
      if (!isObject(options)) {
        return new TypeError("invalid argument. Options must be an object. Value: `" + options + "`.");
      }
      if (hasOwnProp(options, "alpha")) {
        opts.alpha = options.alpha;
        if (!isPositive(opts.alpha)) {
          return new TypeError("invalid option. `alpha` option must be a positive number. Option: `" + opts.alpha + "`.");
        }
      }
      if (hasOwnProp(options, "beta")) {
        opts.beta = options.beta;
        if (!isPositive(opts.beta)) {
          return new TypeError("invalid option. `beta` option must be a positive number. Option: `" + opts.beta + "`.");
        }
      }
      return null;
    }
    module2.exports = validate;
  }
});

// node_modules/@stdlib/nlp-lda/lib/get_phis.js
var require_get_phis = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/get_phis.js"(exports, module2) {
    "use strict";
    var matrix = require_matrix();
    function getPhis() {
      var Phi;
      var val;
      var k;
      var w;
      Phi = matrix([this.K, this.W]);
      for (k = 0; k < this.K; k++) {
        for (w = 0; w < this.W; w++) {
          val = (this.nw.get(w, k) + this.beta) / (this.nwSum[k] + this.W * this.beta);
          Phi.set(k, w, val);
        }
      }
      return Phi;
    }
    module2.exports = getPhis;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js
var require_main48 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/main.js"(exports, module2) {
    "use strict";
    var defineProperty = require_lib56();
    function setNonEnumerableReadOnlyAccessor(obj, prop, getter) {
      defineProperty(obj, prop, {
        "configurable": false,
        "enumerable": false,
        "get": getter
      });
    }
    module2.exports = setNonEnumerableReadOnlyAccessor;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/index.js
var require_lib89 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-only-accessor/lib/index.js"(exports, module2) {
    "use strict";
    var setNonEnumerableReadOnlyAccessor = require_main48();
    module2.exports = setNonEnumerableReadOnlyAccessor;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-write-accessor/lib/main.js
var require_main49 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-write-accessor/lib/main.js"(exports, module2) {
    "use strict";
    var defineProperty = require_lib56();
    function setNonEnumerableReadWriteAccessor(obj, prop, getter, setter) {
      defineProperty(obj, prop, {
        "configurable": false,
        "enumerable": false,
        "get": getter,
        "set": setter
      });
    }
    module2.exports = setNonEnumerableReadWriteAccessor;
  }
});

// node_modules/@stdlib/utils-define-nonenumerable-read-write-accessor/lib/index.js
var require_lib90 = __commonJS({
  "node_modules/@stdlib/utils-define-nonenumerable-read-write-accessor/lib/index.js"(exports, module2) {
    "use strict";
    var setNonEnumerableReadWriteAccessor = require_main49();
    module2.exports = setNonEnumerableReadWriteAccessor;
  }
});

// node_modules/@stdlib/assert-has-function-name-support/lib/foo.js
var require_foo = __commonJS({
  "node_modules/@stdlib/assert-has-function-name-support/lib/foo.js"(exports, module2) {
    "use strict";
    function foo() {
    }
    module2.exports = foo;
  }
});

// node_modules/@stdlib/assert-has-function-name-support/lib/main.js
var require_main50 = __commonJS({
  "node_modules/@stdlib/assert-has-function-name-support/lib/main.js"(exports, module2) {
    "use strict";
    var foo = require_foo();
    function hasFunctionNameSupport() {
      return foo.name === "foo";
    }
    module2.exports = hasFunctionNameSupport;
  }
});

// node_modules/@stdlib/assert-has-function-name-support/lib/index.js
var require_lib91 = __commonJS({
  "node_modules/@stdlib/assert-has-function-name-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasFunctionNameSupport = require_main50();
    module2.exports = hasFunctionNameSupport;
  }
});

// node_modules/@stdlib/utils-function-name/lib/function_name.js
var require_function_name = __commonJS({
  "node_modules/@stdlib/utils-function-name/lib/function_name.js"(exports, module2) {
    "use strict";
    var isFunction = require_lib86();
    var hasFunctionNameSupport = require_lib91();
    var RE = require_lib81().REGEXP;
    var isFunctionNameSupported = hasFunctionNameSupport();
    function functionName(fcn) {
      if (isFunction(fcn) === false) {
        throw new TypeError("invalid argument. Must provide a function. Value: `" + fcn + "`.");
      }
      if (isFunctionNameSupported) {
        return fcn.name;
      }
      return RE.exec(fcn.toString())[1];
    }
    module2.exports = functionName;
  }
});

// node_modules/@stdlib/utils-function-name/lib/index.js
var require_lib92 = __commonJS({
  "node_modules/@stdlib/utils-function-name/lib/index.js"(exports, module2) {
    "use strict";
    var functionName = require_function_name();
    module2.exports = functionName;
  }
});

// node_modules/@stdlib/assert-is-int8array/lib/main.js
var require_main51 = __commonJS({
  "node_modules/@stdlib/assert-is-int8array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasInt8Array = typeof Int8Array === "function";
    function isInt8Array(value) {
      return hasInt8Array && value instanceof Int8Array || nativeClass(value) === "[object Int8Array]";
    }
    module2.exports = isInt8Array;
  }
});

// node_modules/@stdlib/assert-is-int8array/lib/index.js
var require_lib93 = __commonJS({
  "node_modules/@stdlib/assert-is-int8array/lib/index.js"(exports, module2) {
    "use strict";
    var isInt8Array = require_main51();
    module2.exports = isInt8Array;
  }
});

// node_modules/@stdlib/constants-int8-max/lib/index.js
var require_lib94 = __commonJS({
  "node_modules/@stdlib/constants-int8-max/lib/index.js"(exports, module2) {
    "use strict";
    var INT8_MAX = 127 | 0;
    module2.exports = INT8_MAX;
  }
});

// node_modules/@stdlib/constants-int8-min/lib/index.js
var require_lib95 = __commonJS({
  "node_modules/@stdlib/constants-int8-min/lib/index.js"(exports, module2) {
    "use strict";
    var INT8_MIN = -128 | 0;
    module2.exports = INT8_MIN;
  }
});

// node_modules/@stdlib/assert-has-int8array-support/lib/int8array.js
var require_int8array = __commonJS({
  "node_modules/@stdlib/assert-has-int8array-support/lib/int8array.js"(exports, module2) {
    "use strict";
    var main = typeof Int8Array === "function" ? Int8Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-int8array-support/lib/main.js
var require_main52 = __commonJS({
  "node_modules/@stdlib/assert-has-int8array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isInt8Array = require_lib93();
    var INT8_MAX = require_lib94();
    var INT8_MIN = require_lib95();
    var GlobalInt8Array = require_int8array();
    function hasInt8ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalInt8Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalInt8Array([1, 3.14, -3.14, INT8_MAX + 1]);
        bool = isInt8Array(arr) && arr[0] === 1 && arr[1] === 3 && arr[2] === -3 && arr[3] === INT8_MIN;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasInt8ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-int8array-support/lib/index.js
var require_lib96 = __commonJS({
  "node_modules/@stdlib/assert-has-int8array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasInt8ArraySupport = require_main52();
    module2.exports = hasInt8ArraySupport;
  }
});

// node_modules/@stdlib/array-int8/lib/int8array.js
var require_int8array2 = __commonJS({
  "node_modules/@stdlib/array-int8/lib/int8array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Int8Array === "function" ? Int8Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-int8/lib/polyfill.js
var require_polyfill10 = __commonJS({
  "node_modules/@stdlib/array-int8/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-int8/lib/index.js
var require_lib97 = __commonJS({
  "node_modules/@stdlib/array-int8/lib/index.js"(exports, module2) {
    "use strict";
    var hasInt8ArraySupport = require_lib96();
    var builtin = require_int8array2();
    var polyfill = require_polyfill10();
    var ctor;
    if (hasInt8ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-uint8clampedarray/lib/main.js
var require_main53 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8clampedarray/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasUint8ClampedArray = typeof Uint8ClampedArray === "function";
    function isUint8ClampedArray(value) {
      return hasUint8ClampedArray && value instanceof Uint8ClampedArray || nativeClass(value) === "[object Uint8ClampedArray]";
    }
    module2.exports = isUint8ClampedArray;
  }
});

// node_modules/@stdlib/assert-is-uint8clampedarray/lib/index.js
var require_lib98 = __commonJS({
  "node_modules/@stdlib/assert-is-uint8clampedarray/lib/index.js"(exports, module2) {
    "use strict";
    var isUint8ClampedArray = require_main53();
    module2.exports = isUint8ClampedArray;
  }
});

// node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/uint8clampedarray.js
var require_uint8clampedarray = __commonJS({
  "node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/uint8clampedarray.js"(exports, module2) {
    "use strict";
    var main = typeof Uint8ClampedArray === "function" ? Uint8ClampedArray : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/main.js
var require_main54 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/main.js"(exports, module2) {
    "use strict";
    var isUint8ClampedArray = require_lib98();
    var GlobalUint8ClampedArray = require_uint8clampedarray();
    function hasUint8ClampedArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalUint8ClampedArray !== "function") {
        return false;
      }
      try {
        arr = new GlobalUint8ClampedArray([-1, 0, 1, 3.14, 4.99, 255, 256]);
        bool = isUint8ClampedArray(arr) && arr[0] === 0 && arr[1] === 0 && arr[2] === 1 && arr[3] === 3 && arr[4] === 5 && arr[5] === 255 && arr[6] === 255;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasUint8ClampedArraySupport;
  }
});

// node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/index.js
var require_lib99 = __commonJS({
  "node_modules/@stdlib/assert-has-uint8clampedarray-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint8ClampedArraySupport = require_main54();
    module2.exports = hasUint8ClampedArraySupport;
  }
});

// node_modules/@stdlib/array-uint8c/lib/uint8clampedarray.js
var require_uint8clampedarray2 = __commonJS({
  "node_modules/@stdlib/array-uint8c/lib/uint8clampedarray.js"(exports, module2) {
    "use strict";
    var ctor = typeof Uint8ClampedArray === "function" ? Uint8ClampedArray : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-uint8c/lib/polyfill.js
var require_polyfill11 = __commonJS({
  "node_modules/@stdlib/array-uint8c/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-uint8c/lib/index.js
var require_lib100 = __commonJS({
  "node_modules/@stdlib/array-uint8c/lib/index.js"(exports, module2) {
    "use strict";
    var hasUint8ClampedArraySupport = require_lib99();
    var builtin = require_uint8clampedarray2();
    var polyfill = require_polyfill11();
    var ctor;
    if (hasUint8ClampedArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-int16array/lib/main.js
var require_main55 = __commonJS({
  "node_modules/@stdlib/assert-is-int16array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasInt16Array = typeof Int16Array === "function";
    function isInt16Array(value) {
      return hasInt16Array && value instanceof Int16Array || nativeClass(value) === "[object Int16Array]";
    }
    module2.exports = isInt16Array;
  }
});

// node_modules/@stdlib/assert-is-int16array/lib/index.js
var require_lib101 = __commonJS({
  "node_modules/@stdlib/assert-is-int16array/lib/index.js"(exports, module2) {
    "use strict";
    var isInt16Array = require_main55();
    module2.exports = isInt16Array;
  }
});

// node_modules/@stdlib/constants-int16-max/lib/index.js
var require_lib102 = __commonJS({
  "node_modules/@stdlib/constants-int16-max/lib/index.js"(exports, module2) {
    "use strict";
    var INT16_MAX = 32767 | 0;
    module2.exports = INT16_MAX;
  }
});

// node_modules/@stdlib/constants-int16-min/lib/index.js
var require_lib103 = __commonJS({
  "node_modules/@stdlib/constants-int16-min/lib/index.js"(exports, module2) {
    "use strict";
    var INT16_MIN = -32768 | 0;
    module2.exports = INT16_MIN;
  }
});

// node_modules/@stdlib/assert-has-int16array-support/lib/int16array.js
var require_int16array = __commonJS({
  "node_modules/@stdlib/assert-has-int16array-support/lib/int16array.js"(exports, module2) {
    "use strict";
    var main = typeof Int16Array === "function" ? Int16Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-int16array-support/lib/main.js
var require_main56 = __commonJS({
  "node_modules/@stdlib/assert-has-int16array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isInt16Array = require_lib101();
    var INT16_MAX = require_lib102();
    var INT16_MIN = require_lib103();
    var GlobalInt16Array = require_int16array();
    function hasInt16ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalInt16Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalInt16Array([1, 3.14, -3.14, INT16_MAX + 1]);
        bool = isInt16Array(arr) && arr[0] === 1 && arr[1] === 3 && arr[2] === -3 && arr[3] === INT16_MIN;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasInt16ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-int16array-support/lib/index.js
var require_lib104 = __commonJS({
  "node_modules/@stdlib/assert-has-int16array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasInt16ArraySupport = require_main56();
    module2.exports = hasInt16ArraySupport;
  }
});

// node_modules/@stdlib/array-int16/lib/int16array.js
var require_int16array2 = __commonJS({
  "node_modules/@stdlib/array-int16/lib/int16array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Int16Array === "function" ? Int16Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-int16/lib/polyfill.js
var require_polyfill12 = __commonJS({
  "node_modules/@stdlib/array-int16/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-int16/lib/index.js
var require_lib105 = __commonJS({
  "node_modules/@stdlib/array-int16/lib/index.js"(exports, module2) {
    "use strict";
    var hasInt16ArraySupport = require_lib104();
    var builtin = require_int16array2();
    var polyfill = require_polyfill12();
    var ctor;
    if (hasInt16ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-float32array/lib/main.js
var require_main57 = __commonJS({
  "node_modules/@stdlib/assert-is-float32array/lib/main.js"(exports, module2) {
    "use strict";
    var nativeClass = require_lib15();
    var hasFloat32Array = typeof Float32Array === "function";
    function isFloat32Array(value) {
      return hasFloat32Array && value instanceof Float32Array || nativeClass(value) === "[object Float32Array]";
    }
    module2.exports = isFloat32Array;
  }
});

// node_modules/@stdlib/assert-is-float32array/lib/index.js
var require_lib106 = __commonJS({
  "node_modules/@stdlib/assert-is-float32array/lib/index.js"(exports, module2) {
    "use strict";
    var isFloat32Array = require_main57();
    module2.exports = isFloat32Array;
  }
});

// node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js
var require_float32array = __commonJS({
  "node_modules/@stdlib/assert-has-float32array-support/lib/float32array.js"(exports, module2) {
    "use strict";
    var main = typeof Float32Array === "function" ? Float32Array : null;
    module2.exports = main;
  }
});

// node_modules/@stdlib/assert-has-float32array-support/lib/main.js
var require_main58 = __commonJS({
  "node_modules/@stdlib/assert-has-float32array-support/lib/main.js"(exports, module2) {
    "use strict";
    var isFloat32Array = require_lib106();
    var PINF = require_lib2();
    var GlobalFloat32Array = require_float32array();
    function hasFloat32ArraySupport() {
      var bool;
      var arr;
      if (typeof GlobalFloat32Array !== "function") {
        return false;
      }
      try {
        arr = new GlobalFloat32Array([1, 3.14, -3.14, 5e40]);
        bool = isFloat32Array(arr) && arr[0] === 1 && arr[1] === 3.140000104904175 && arr[2] === -3.140000104904175 && arr[3] === PINF;
      } catch (err) {
        bool = false;
      }
      return bool;
    }
    module2.exports = hasFloat32ArraySupport;
  }
});

// node_modules/@stdlib/assert-has-float32array-support/lib/index.js
var require_lib107 = __commonJS({
  "node_modules/@stdlib/assert-has-float32array-support/lib/index.js"(exports, module2) {
    "use strict";
    var hasFloat32ArraySupport = require_main58();
    module2.exports = hasFloat32ArraySupport;
  }
});

// node_modules/@stdlib/array-float32/lib/float32array.js
var require_float32array2 = __commonJS({
  "node_modules/@stdlib/array-float32/lib/float32array.js"(exports, module2) {
    "use strict";
    var ctor = typeof Float32Array === "function" ? Float32Array : void 0;
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/array-float32/lib/polyfill.js
var require_polyfill13 = __commonJS({
  "node_modules/@stdlib/array-float32/lib/polyfill.js"(exports, module2) {
    "use strict";
    function polyfill() {
      throw new Error("not implemented");
    }
    module2.exports = polyfill;
  }
});

// node_modules/@stdlib/array-float32/lib/index.js
var require_lib108 = __commonJS({
  "node_modules/@stdlib/array-float32/lib/index.js"(exports, module2) {
    "use strict";
    var hasFloat32ArraySupport = require_lib107();
    var builtin = require_float32array2();
    var polyfill = require_polyfill13();
    var ctor;
    if (hasFloat32ArraySupport()) {
      ctor = builtin;
    } else {
      ctor = polyfill;
    }
    module2.exports = ctor;
  }
});

// node_modules/@stdlib/assert-is-typed-array/lib/ctors.js
var require_ctors2 = __commonJS({
  "node_modules/@stdlib/assert-is-typed-array/lib/ctors.js"(exports, module2) {
    "use strict";
    var Int8Array2 = require_lib97();
    var Uint8Array2 = require_lib26();
    var Uint8ClampedArray2 = require_lib100();
    var Int16Array2 = require_lib105();
    var Uint16Array2 = require_lib30();
    var Int32Array2 = require_lib77();
    var Uint32Array2 = require_lib19();
    var Float32Array2 = require_lib108();
    var Float64Array2 = require_lib22();
    var CTORS = [
      Float64Array2,
      Float32Array2,
      Int32Array2,
      Uint32Array2,
      Int16Array2,
      Uint16Array2,
      Int8Array2,
      Uint8Array2,
      Uint8ClampedArray2
    ];
    module2.exports = CTORS;
  }
});

// node_modules/@stdlib/assert-is-typed-array/lib/names.json
var require_names = __commonJS({
  "node_modules/@stdlib/assert-is-typed-array/lib/names.json"(exports, module2) {
    module2.exports = [
      "Int8Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Int16Array",
      "Uint16Array",
      "Int32Array",
      "Uint32Array",
      "Float32Array",
      "Float64Array"
    ];
  }
});

// node_modules/@stdlib/assert-is-typed-array/lib/main.js
var require_main59 = __commonJS({
  "node_modules/@stdlib/assert-is-typed-array/lib/main.js"(exports, module2) {
    "use strict";
    var ctorName = require_lib84();
    var fcnName = require_lib92();
    var getPrototypeOf = require_lib87();
    var hasFloat64ArraySupport = require_lib21();
    var Float64Array2 = require_lib22();
    var CTORS = require_ctors2();
    var NAMES = require_names();
    var TypedArray = hasFloat64ArraySupport() ? getPrototypeOf(Float64Array2) : Dummy;
    TypedArray = fcnName(TypedArray) === "TypedArray" ? TypedArray : Dummy;
    function Dummy() {
    }
    function isTypedArray(value) {
      var v;
      var i;
      if (typeof value !== "object" || value === null) {
        return false;
      }
      if (value instanceof TypedArray) {
        return true;
      }
      for (i = 0; i < CTORS.length; i++) {
        if (value instanceof CTORS[i]) {
          return true;
        }
      }
      while (value) {
        v = ctorName(value);
        for (i = 0; i < NAMES.length; i++) {
          if (NAMES[i] === v) {
            return true;
          }
        }
        value = getPrototypeOf(value);
      }
      return false;
    }
    module2.exports = isTypedArray;
  }
});

// node_modules/@stdlib/assert-is-typed-array/lib/index.js
var require_lib109 = __commonJS({
  "node_modules/@stdlib/assert-is-typed-array/lib/index.js"(exports, module2) {
    "use strict";
    var isTypedArray = require_main59();
    module2.exports = isTypedArray;
  }
});

// node_modules/@stdlib/assert-instance-of/lib/main.js
var require_main60 = __commonJS({
  "node_modules/@stdlib/assert-instance-of/lib/main.js"(exports, module2) {
    "use strict";
    function instanceOf(value, constructor) {
      if (typeof constructor !== "function") {
        throw new TypeError("invalid argument. `constructor` argument must be callable. Value: `" + constructor + "`.");
      }
      return value instanceof constructor;
    }
    module2.exports = instanceOf;
  }
});

// node_modules/@stdlib/assert-instance-of/lib/index.js
var require_lib110 = __commonJS({
  "node_modules/@stdlib/assert-instance-of/lib/index.js"(exports, module2) {
    "use strict";
    var instanceOf = require_main60();
    module2.exports = instanceOf;
  }
});

// node_modules/@stdlib/array-to-json/lib/ctors.js
var require_ctors3 = __commonJS({
  "node_modules/@stdlib/array-to-json/lib/ctors.js"(exports, module2) {
    "use strict";
    var Int8Array2 = require_lib97();
    var Uint8Array2 = require_lib26();
    var Uint8ClampedArray2 = require_lib100();
    var Int16Array2 = require_lib105();
    var Uint16Array2 = require_lib30();
    var Int32Array2 = require_lib77();
    var Uint32Array2 = require_lib19();
    var Float32Array2 = require_lib108();
    var Float64Array2 = require_lib22();
    var CTORS = [
      [Float64Array2, "Float64Array"],
      [Float32Array2, "Float32Array"],
      [Int32Array2, "Int32Array"],
      [Uint32Array2, "Uint32Array"],
      [Int16Array2, "Int16Array"],
      [Uint16Array2, "Uint16Array"],
      [Int8Array2, "Int8Array"],
      [Uint8Array2, "Uint8Array"],
      [Uint8ClampedArray2, "Uint8ClampedArray"]
    ];
    module2.exports = CTORS;
  }
});

// node_modules/@stdlib/array-to-json/lib/type.js
var require_type = __commonJS({
  "node_modules/@stdlib/array-to-json/lib/type.js"(exports, module2) {
    "use strict";
    var instanceOf = require_lib110();
    var ctorName = require_lib84();
    var getPrototypeOf = require_lib87();
    var CTORS = require_ctors3();
    function typeName(arr) {
      var v;
      var i;
      for (i = 0; i < CTORS.length; i++) {
        if (instanceOf(arr, CTORS[i][0])) {
          return CTORS[i][1];
        }
      }
      while (arr) {
        v = ctorName(arr);
        for (i = 0; i < CTORS.length; i++) {
          if (v === CTORS[i][1]) {
            return CTORS[i][1];
          }
        }
        arr = getPrototypeOf(arr);
      }
    }
    module2.exports = typeName;
  }
});

// node_modules/@stdlib/array-to-json/lib/to_json.js
var require_to_json = __commonJS({
  "node_modules/@stdlib/array-to-json/lib/to_json.js"(exports, module2) {
    "use strict";
    var isTypedArray = require_lib109();
    var typeName = require_type();
    function toJSON(arr) {
      var out;
      var i;
      if (!isTypedArray(arr)) {
        throw new TypeError("invalid argument. Must provide a typed array. Value: `" + arr + "`.");
      }
      out = {};
      out.type = typeName(arr);
      out.data = [];
      for (i = 0; i < arr.length; i++) {
        out.data.push(arr[i]);
      }
      return out;
    }
    module2.exports = toJSON;
  }
});

// node_modules/@stdlib/array-to-json/lib/index.js
var require_lib111 = __commonJS({
  "node_modules/@stdlib/array-to-json/lib/index.js"(exports, module2) {
    "use strict";
    var toJSON = require_to_json();
    module2.exports = toJSON;
  }
});

// node_modules/@stdlib/random-base-randu/lib/defaults.json
var require_defaults = __commonJS({
  "node_modules/@stdlib/random-base-randu/lib/defaults.json"(exports, module2) {
    module2.exports = {
      name: "mt19937",
      copy: true
    };
  }
});

// node_modules/@stdlib/blas-base-gcopy/lib/main.js
var require_main61 = __commonJS({
  "node_modules/@stdlib/blas-base-gcopy/lib/main.js"(exports, module2) {
    "use strict";
    var M = 8;
    function gcopy(N, x, strideX, y, strideY) {
      var ix;
      var iy;
      var m;
      var i;
      if (N <= 0) {
        return y;
      }
      if (strideX === 1 && strideY === 1) {
        m = N % M;
        if (m > 0) {
          for (i = 0; i < m; i++) {
            y[i] = x[i];
          }
        }
        if (N < M) {
          return y;
        }
        for (i = m; i < N; i += M) {
          y[i] = x[i];
          y[i + 1] = x[i + 1];
          y[i + 2] = x[i + 2];
          y[i + 3] = x[i + 3];
          y[i + 4] = x[i + 4];
          y[i + 5] = x[i + 5];
          y[i + 6] = x[i + 6];
          y[i + 7] = x[i + 7];
        }
        return y;
      }
      if (strideX < 0) {
        ix = (1 - N) * strideX;
      } else {
        ix = 0;
      }
      if (strideY < 0) {
        iy = (1 - N) * strideY;
      } else {
        iy = 0;
      }
      for (i = 0; i < N; i++) {
        y[iy] = x[ix];
        ix += strideX;
        iy += strideY;
      }
      return y;
    }
    module2.exports = gcopy;
  }
});

// node_modules/@stdlib/blas-base-gcopy/lib/ndarray.js
var require_ndarray = __commonJS({
  "node_modules/@stdlib/blas-base-gcopy/lib/ndarray.js"(exports, module2) {
    "use strict";
    var M = 8;
    function gcopy(N, x, strideX, offsetX, y, strideY, offsetY) {
      var ix;
      var iy;
      var m;
      var i;
      if (N <= 0) {
        return y;
      }
      ix = offsetX;
      iy = offsetY;
      if (strideX === 1 && strideY === 1) {
        m = N % M;
        if (m > 0) {
          for (i = 0; i < m; i++) {
            y[iy] = x[ix];
            ix += strideX;
            iy += strideY;
          }
        }
        if (N < M) {
          return y;
        }
        for (i = m; i < N; i += M) {
          y[iy] = x[ix];
          y[iy + 1] = x[ix + 1];
          y[iy + 2] = x[ix + 2];
          y[iy + 3] = x[ix + 3];
          y[iy + 4] = x[ix + 4];
          y[iy + 5] = x[ix + 5];
          y[iy + 6] = x[ix + 6];
          y[iy + 7] = x[ix + 7];
          ix += M;
          iy += M;
        }
        return y;
      }
      for (i = 0; i < N; i++) {
        y[iy] = x[ix];
        ix += strideX;
        iy += strideY;
      }
      return y;
    }
    module2.exports = gcopy;
  }
});

// node_modules/@stdlib/blas-base-gcopy/lib/index.js
var require_lib112 = __commonJS({
  "node_modules/@stdlib/blas-base-gcopy/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var gcopy = require_main61();
    var ndarray = require_ndarray();
    setReadOnly(gcopy, "ndarray", ndarray);
    module2.exports = gcopy;
  }
});

// node_modules/@stdlib/random-base-minstd/lib/rand_int32.js
var require_rand_int32 = __commonJS({
  "node_modules/@stdlib/random-base-minstd/lib/rand_int32.js"(exports, module2) {
    "use strict";
    var INT32_MAX = require_lib74();
    var floor = require_lib6();
    var MAX = INT32_MAX - 1;
    function randint32() {
      var v = floor(1 + MAX * Math.random());
      return v | 0;
    }
    module2.exports = randint32;
  }
});

// node_modules/@stdlib/random-base-minstd/lib/factory.js
var require_factory = __commonJS({
  "node_modules/@stdlib/random-base-minstd/lib/factory.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var setReadOnlyAccessor = require_lib89();
    var setReadWriteAccessor = require_lib90();
    var hasOwnProp = require_lib14();
    var isObject = require_lib88();
    var isBoolean = require_lib71().isPrimitive;
    var isCollection = require_lib68();
    var isPositiveInteger = require_lib61().isPrimitive;
    var isInt32Array = require_lib73();
    var INT32_MAX = require_lib74();
    var Int32Array2 = require_lib77();
    var gcopy = require_lib112();
    var typedarray2json = require_lib111();
    var randint32 = require_rand_int32();
    var NORMALIZATION_CONSTANT = INT32_MAX - 1 | 0;
    var MAX_SEED = INT32_MAX - 1 | 0;
    var A = 16807 | 0;
    var STATE_ARRAY_VERSION = 1;
    var NUM_STATE_SECTIONS = 2;
    var STATE_SECTION_OFFSET = 2;
    var SEED_SECTION_OFFSET = 4;
    var STATE_FIXED_LENGTH = 5;
    function verifyState(state, FLG) {
      var s1;
      if (FLG) {
        s1 = "option";
      } else {
        s1 = "argument";
      }
      if (state.length < STATE_FIXED_LENGTH + 1) {
        return new RangeError("invalid " + s1 + ". `state` array has insufficient length.");
      }
      if (state[0] !== STATE_ARRAY_VERSION) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible schema version. Expected: " + STATE_ARRAY_VERSION + ". Actual: " + state[0] + ".");
      }
      if (state[1] !== NUM_STATE_SECTIONS) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible number of sections. Expected: " + NUM_STATE_SECTIONS + ". Actual: " + state[1] + ".");
      }
      if (state[STATE_SECTION_OFFSET] !== 1) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible state length. Expected: " + 1 .toString() + ". Actual: " + state[STATE_SECTION_OFFSET] + ".");
      }
      if (state[SEED_SECTION_OFFSET] !== state.length - STATE_FIXED_LENGTH) {
        return new RangeError("invalid " + s1 + ". `state` array length is incompatible with seed section length. Expected: " + (state.length - STATE_FIXED_LENGTH) + ". Actual: " + state[SEED_SECTION_OFFSET] + ".");
      }
      return null;
    }
    function factory(options) {
      var STATE;
      var state;
      var opts;
      var seed;
      var slen;
      var err;
      opts = {};
      if (arguments.length) {
        if (!isObject(options)) {
          throw new TypeError("invalid argument. Options argument must be an object. Value: `" + options + "`.");
        }
        if (hasOwnProp(options, "copy")) {
          opts.copy = options.copy;
          if (!isBoolean(options.copy)) {
            throw new TypeError("invalid option. `copy` option must be a boolean. Option: `" + options.copy + "`.");
          }
        }
        if (hasOwnProp(options, "state")) {
          state = options.state;
          opts.state = true;
          if (!isInt32Array(state)) {
            throw new TypeError("invalid option. `state` option must be an Int32Array. Option: `" + state + "`.");
          }
          err = verifyState(state, true);
          if (err) {
            throw err;
          }
          if (opts.copy === false) {
            STATE = state;
          } else {
            STATE = new Int32Array2(state.length);
            gcopy(state.length, state, 1, STATE, 1);
          }
          state = new Int32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);
          seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, state[SEED_SECTION_OFFSET]);
        }
        if (seed === void 0) {
          if (hasOwnProp(options, "seed")) {
            seed = options.seed;
            opts.seed = true;
            if (isPositiveInteger(seed)) {
              if (seed > MAX_SEED) {
                throw new RangeError("invalid option. `seed` option must be a positive integer less than the maximum signed 32-bit integer. Option: `" + seed + "`.");
              }
              seed |= 0;
            } else if (isCollection(seed) && seed.length > 0) {
              slen = seed.length;
              STATE = new Int32Array2(STATE_FIXED_LENGTH + slen);
              STATE[0] = STATE_ARRAY_VERSION;
              STATE[1] = NUM_STATE_SECTIONS;
              STATE[STATE_SECTION_OFFSET] = 1;
              STATE[SEED_SECTION_OFFSET] = slen;
              gcopy.ndarray(slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET + 1);
              state = new Int32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);
              seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, slen);
              state[0] = seed[0];
            } else {
              throw new TypeError("invalid option. `seed` option must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integer values less than the maximum signed 32-bit integer. Option: `" + seed + "`.");
            }
          } else {
            seed = randint32() | 0;
          }
        }
      } else {
        seed = randint32() | 0;
      }
      if (state === void 0) {
        STATE = new Int32Array2(STATE_FIXED_LENGTH + 1);
        STATE[0] = STATE_ARRAY_VERSION;
        STATE[1] = NUM_STATE_SECTIONS;
        STATE[STATE_SECTION_OFFSET] = 1;
        STATE[SEED_SECTION_OFFSET] = 1;
        STATE[SEED_SECTION_OFFSET + 1] = seed;
        state = new Int32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);
        seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);
        state[0] = seed[0];
      }
      setReadOnly(minstd, "NAME", "minstd");
      setReadOnlyAccessor(minstd, "seed", getSeed);
      setReadOnlyAccessor(minstd, "seedLength", getSeedLength);
      setReadWriteAccessor(minstd, "state", getState, setState);
      setReadOnlyAccessor(minstd, "stateLength", getStateLength);
      setReadOnlyAccessor(minstd, "byteLength", getStateSize);
      setReadOnly(minstd, "toJSON", toJSON);
      setReadOnly(minstd, "MIN", 1);
      setReadOnly(minstd, "MAX", INT32_MAX - 1);
      setReadOnly(minstd, "normalized", normalized);
      setReadOnly(normalized, "NAME", minstd.NAME);
      setReadOnlyAccessor(normalized, "seed", getSeed);
      setReadOnlyAccessor(normalized, "seedLength", getSeedLength);
      setReadWriteAccessor(normalized, "state", getState, setState);
      setReadOnlyAccessor(normalized, "stateLength", getStateLength);
      setReadOnlyAccessor(normalized, "byteLength", getStateSize);
      setReadOnly(normalized, "toJSON", toJSON);
      setReadOnly(normalized, "MIN", (minstd.MIN - 1) / NORMALIZATION_CONSTANT);
      setReadOnly(normalized, "MAX", (minstd.MAX - 1) / NORMALIZATION_CONSTANT);
      return minstd;
      function getSeed() {
        var len = STATE[SEED_SECTION_OFFSET];
        return gcopy(len, seed, 1, new Int32Array2(len), 1);
      }
      function getSeedLength() {
        return STATE[SEED_SECTION_OFFSET];
      }
      function getStateLength() {
        return STATE.length;
      }
      function getStateSize() {
        return STATE.byteLength;
      }
      function getState() {
        var len = STATE.length;
        return gcopy(len, STATE, 1, new Int32Array2(len), 1);
      }
      function setState(s) {
        var err2;
        if (!isInt32Array(s)) {
          throw new TypeError("invalid argument. Must provide an Int32Array. Value: `" + s + "`.");
        }
        err2 = verifyState(s, false);
        if (err2) {
          throw err2;
        }
        if (opts.copy === false) {
          if (opts.state && s.length === STATE.length) {
            gcopy(s.length, s, 1, STATE, 1);
          } else {
            STATE = s;
            opts.state = true;
          }
        } else {
          if (s.length !== STATE.length) {
            STATE = new Int32Array2(s.length);
          }
          gcopy(s.length, s, 1, STATE, 1);
        }
        state = new Int32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);
        seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, STATE[SEED_SECTION_OFFSET]);
      }
      function toJSON() {
        var out = {};
        out.type = "PRNG";
        out.name = minstd.NAME;
        out.state = typedarray2json(STATE);
        out.params = [];
        return out;
      }
      function minstd() {
        var s = state[0] | 0;
        s = A * s % INT32_MAX | 0;
        state[0] = s;
        return s | 0;
      }
      function normalized() {
        return (minstd() - 1) / NORMALIZATION_CONSTANT;
      }
    }
    module2.exports = factory;
  }
});

// node_modules/@stdlib/random-base-minstd/lib/main.js
var require_main62 = __commonJS({
  "node_modules/@stdlib/random-base-minstd/lib/main.js"(exports, module2) {
    "use strict";
    var factory = require_factory();
    var randint32 = require_rand_int32();
    var minstd = factory({
      "seed": randint32()
    });
    module2.exports = minstd;
  }
});

// node_modules/@stdlib/random-base-minstd/lib/index.js
var require_lib113 = __commonJS({
  "node_modules/@stdlib/random-base-minstd/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var minstd = require_main62();
    var factory = require_factory();
    setReadOnly(minstd, "factory", factory);
    module2.exports = minstd;
  }
});

// node_modules/@stdlib/random-base-minstd-shuffle/lib/create_table.js
var require_create_table = __commonJS({
  "node_modules/@stdlib/random-base-minstd-shuffle/lib/create_table.js"(exports, module2) {
    "use strict";
    var isnan = require_lib();
    var NUM_WARMUPS = 8;
    function createTable(rand, table, N) {
      var v;
      var i;
      for (i = 0; i < NUM_WARMUPS; i++) {
        v = rand();
        if (isnan(v)) {
          throw new Error("unexpected error. PRNG returned `NaN`.");
        }
      }
      for (i = N - 1; i >= 0; i--) {
        table[i] = rand();
      }
      return table;
    }
    module2.exports = createTable;
  }
});

// node_modules/@stdlib/random-base-minstd-shuffle/lib/rand_int32.js
var require_rand_int322 = __commonJS({
  "node_modules/@stdlib/random-base-minstd-shuffle/lib/rand_int32.js"(exports, module2) {
    "use strict";
    var INT32_MAX = require_lib74();
    var floor = require_lib6();
    var MAX = INT32_MAX - 1;
    function randint32() {
      var v = floor(1 + MAX * Math.random());
      return v | 0;
    }
    module2.exports = randint32;
  }
});

// node_modules/@stdlib/random-base-minstd-shuffle/lib/factory.js
var require_factory2 = __commonJS({
  "node_modules/@stdlib/random-base-minstd-shuffle/lib/factory.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var setReadOnlyAccessor = require_lib89();
    var setReadWriteAccessor = require_lib90();
    var hasOwnProp = require_lib14();
    var isObject = require_lib88();
    var isBoolean = require_lib71().isPrimitive;
    var isCollection = require_lib68();
    var isPositiveInteger = require_lib61().isPrimitive;
    var isInt32Array = require_lib73();
    var gcopy = require_lib112();
    var floor = require_lib6();
    var Int32Array2 = require_lib77();
    var INT32_MAX = require_lib74();
    var typedarray2json = require_lib111();
    var createTable = require_create_table();
    var randint32 = require_rand_int322();
    var NORMALIZATION_CONSTANT = INT32_MAX - 1 | 0;
    var MAX_SEED = INT32_MAX - 1 | 0;
    var A = 16807 | 0;
    var TABLE_LENGTH = 32;
    var STATE_ARRAY_VERSION = 1;
    var NUM_STATE_SECTIONS = 3;
    var TABLE_SECTION_OFFSET = 2;
    var STATE_SECTION_OFFSET = TABLE_LENGTH + 3;
    var SEED_SECTION_OFFSET = TABLE_LENGTH + 6;
    var STATE_FIXED_LENGTH = TABLE_LENGTH + 7;
    var SHUFFLE_STATE = STATE_SECTION_OFFSET + 1;
    var PRNG_STATE = STATE_SECTION_OFFSET + 2;
    function verifyState(state, FLG) {
      var s1;
      if (FLG) {
        s1 = "option";
      } else {
        s1 = "argument";
      }
      if (state.length < STATE_FIXED_LENGTH + 1) {
        return new RangeError("invalid " + s1 + ". `state` array has insufficient length.");
      }
      if (state[0] !== STATE_ARRAY_VERSION) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible schema version. Expected: " + STATE_ARRAY_VERSION + ". Actual: " + state[0] + ".");
      }
      if (state[1] !== NUM_STATE_SECTIONS) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible number of sections. Expected: " + NUM_STATE_SECTIONS + ". Actual: " + state[1] + ".");
      }
      if (state[TABLE_SECTION_OFFSET] !== TABLE_LENGTH) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible table length. Expected: " + TABLE_LENGTH + ". Actual: " + state[TABLE_SECTION_OFFSET] + ".");
      }
      if (state[STATE_SECTION_OFFSET] !== 2) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible state length. Expected: " + 2 .toString() + ". Actual: " + state[STATE_SECTION_OFFSET] + ".");
      }
      if (state[SEED_SECTION_OFFSET] !== state.length - STATE_FIXED_LENGTH) {
        return new RangeError("invalid " + s1 + ". `state` array length is incompatible with seed section length. Expected: " + (state.length - STATE_FIXED_LENGTH) + ". Actual: " + state[SEED_SECTION_OFFSET] + ".");
      }
      return null;
    }
    function factory(options) {
      var STATE;
      var state;
      var opts;
      var seed;
      var slen;
      var err;
      opts = {};
      if (arguments.length) {
        if (!isObject(options)) {
          throw new TypeError("invalid argument. Options argument must be an object. Value: `" + options + "`.");
        }
        if (hasOwnProp(options, "copy")) {
          opts.copy = options.copy;
          if (!isBoolean(options.copy)) {
            throw new TypeError("invalid option. `copy` option must be a boolean. Option: `" + options.copy + "`.");
          }
        }
        if (hasOwnProp(options, "state")) {
          state = options.state;
          opts.state = true;
          if (!isInt32Array(state)) {
            throw new TypeError("invalid option. `state` option must be an Int32Array. Option: `" + state + "`.");
          }
          err = verifyState(state, true);
          if (err) {
            throw err;
          }
          if (opts.copy === false) {
            STATE = state;
          } else {
            STATE = new Int32Array2(state.length);
            gcopy(state.length, state, 1, STATE, 1);
          }
          state = new Int32Array2(STATE.buffer, STATE.byteOffset + (TABLE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, TABLE_LENGTH);
          seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, state[SEED_SECTION_OFFSET]);
        }
        if (seed === void 0) {
          if (hasOwnProp(options, "seed")) {
            seed = options.seed;
            opts.seed = true;
            if (isPositiveInteger(seed)) {
              if (seed > MAX_SEED) {
                throw new RangeError("invalid option. `seed` option must be a positive integer less than the maximum signed 32-bit integer. Option: `" + seed + "`.");
              }
              seed |= 0;
            } else if (isCollection(seed) && seed.length > 0) {
              slen = seed.length;
              STATE = new Int32Array2(STATE_FIXED_LENGTH + slen);
              STATE[0] = STATE_ARRAY_VERSION;
              STATE[1] = NUM_STATE_SECTIONS;
              STATE[TABLE_SECTION_OFFSET] = TABLE_LENGTH;
              STATE[STATE_SECTION_OFFSET] = 2;
              STATE[PRNG_STATE] = seed[0];
              STATE[SEED_SECTION_OFFSET] = slen;
              gcopy.ndarray(slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET + 1);
              state = new Int32Array2(STATE.buffer, STATE.byteOffset + (TABLE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, TABLE_LENGTH);
              seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, slen);
              state = createTable(minstd, state, TABLE_LENGTH);
              STATE[SHUFFLE_STATE] = state[0];
            } else {
              throw new TypeError("invalid option. `seed` option must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integer values less than the maximum signed 32-bit integer. Option: `" + seed + "`.");
            }
          } else {
            seed = randint32() | 0;
          }
        }
      } else {
        seed = randint32() | 0;
      }
      if (state === void 0) {
        STATE = new Int32Array2(STATE_FIXED_LENGTH + 1);
        STATE[0] = STATE_ARRAY_VERSION;
        STATE[1] = NUM_STATE_SECTIONS;
        STATE[TABLE_SECTION_OFFSET] = TABLE_LENGTH;
        STATE[STATE_SECTION_OFFSET] = 2;
        STATE[PRNG_STATE] = seed;
        STATE[SEED_SECTION_OFFSET] = 1;
        STATE[SEED_SECTION_OFFSET + 1] = seed;
        state = new Int32Array2(STATE.buffer, STATE.byteOffset + (TABLE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, TABLE_LENGTH);
        seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);
        state = createTable(minstd, state, TABLE_LENGTH);
        STATE[SHUFFLE_STATE] = state[0];
      }
      setReadOnly(minstdShuffle, "NAME", "minstd-shuffle");
      setReadOnlyAccessor(minstdShuffle, "seed", getSeed);
      setReadOnlyAccessor(minstdShuffle, "seedLength", getSeedLength);
      setReadWriteAccessor(minstdShuffle, "state", getState, setState);
      setReadOnlyAccessor(minstdShuffle, "stateLength", getStateLength);
      setReadOnlyAccessor(minstdShuffle, "byteLength", getStateSize);
      setReadOnly(minstdShuffle, "toJSON", toJSON);
      setReadOnly(minstdShuffle, "MIN", 1);
      setReadOnly(minstdShuffle, "MAX", INT32_MAX - 1);
      setReadOnly(minstdShuffle, "normalized", normalized);
      setReadOnly(normalized, "NAME", minstdShuffle.NAME);
      setReadOnlyAccessor(normalized, "seed", getSeed);
      setReadOnlyAccessor(normalized, "seedLength", getSeedLength);
      setReadWriteAccessor(normalized, "state", getState, setState);
      setReadOnlyAccessor(normalized, "stateLength", getStateLength);
      setReadOnlyAccessor(normalized, "byteLength", getStateSize);
      setReadOnly(normalized, "toJSON", toJSON);
      setReadOnly(normalized, "MIN", (minstdShuffle.MIN - 1) / NORMALIZATION_CONSTANT);
      setReadOnly(normalized, "MAX", (minstdShuffle.MAX - 1) / NORMALIZATION_CONSTANT);
      return minstdShuffle;
      function getSeed() {
        var len = STATE[SEED_SECTION_OFFSET];
        return gcopy(len, seed, 1, new Int32Array2(len), 1);
      }
      function getSeedLength() {
        return STATE[SEED_SECTION_OFFSET];
      }
      function getStateLength() {
        return STATE.length;
      }
      function getStateSize() {
        return STATE.byteLength;
      }
      function getState() {
        var len = STATE.length;
        return gcopy(len, STATE, 1, new Int32Array2(len), 1);
      }
      function setState(s) {
        var err2;
        if (!isInt32Array(s)) {
          throw new TypeError("invalid argument. Must provide an Int32Array. Value: `" + s + "`.");
        }
        err2 = verifyState(s, false);
        if (err2) {
          throw err2;
        }
        if (opts.copy === false) {
          if (opts.state && s.length === STATE.length) {
            gcopy(s.length, s, 1, STATE, 1);
          } else {
            STATE = s;
            opts.state = true;
          }
        } else {
          if (s.length !== STATE.length) {
            STATE = new Int32Array2(s.length);
          }
          gcopy(s.length, s, 1, STATE, 1);
        }
        state = new Int32Array2(STATE.buffer, STATE.byteOffset + (TABLE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, TABLE_LENGTH);
        seed = new Int32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, STATE[SEED_SECTION_OFFSET]);
      }
      function toJSON() {
        var out = {};
        out.type = "PRNG";
        out.name = minstdShuffle.NAME;
        out.state = typedarray2json(STATE);
        out.params = [];
        return out;
      }
      function minstd() {
        var s = STATE[PRNG_STATE] | 0;
        s = A * s % INT32_MAX | 0;
        STATE[PRNG_STATE] = s;
        return s | 0;
      }
      function minstdShuffle() {
        var s;
        var i;
        s = STATE[SHUFFLE_STATE];
        i = floor(TABLE_LENGTH * (s / INT32_MAX));
        s = state[i];
        STATE[SHUFFLE_STATE] = s;
        state[i] = minstd();
        return s;
      }
      function normalized() {
        return (minstdShuffle() - 1) / NORMALIZATION_CONSTANT;
      }
    }
    module2.exports = factory;
  }
});

// node_modules/@stdlib/random-base-minstd-shuffle/lib/main.js
var require_main63 = __commonJS({
  "node_modules/@stdlib/random-base-minstd-shuffle/lib/main.js"(exports, module2) {
    "use strict";
    var factory = require_factory2();
    var randint32 = require_rand_int322();
    var minstd = factory({
      "seed": randint32()
    });
    module2.exports = minstd;
  }
});

// node_modules/@stdlib/random-base-minstd-shuffle/lib/index.js
var require_lib114 = __commonJS({
  "node_modules/@stdlib/random-base-minstd-shuffle/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var minstd = require_main63();
    var factory = require_factory2();
    setReadOnly(minstd, "factory", factory);
    module2.exports = minstd;
  }
});

// node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js
var require_main64 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-positive-zero/lib/main.js"(exports, module2) {
    "use strict";
    var PINF = require_lib2();
    function isPositiveZero(x) {
      return x === 0 && 1 / x === PINF;
    }
    module2.exports = isPositiveZero;
  }
});

// node_modules/@stdlib/math-base-assert-is-positive-zero/lib/index.js
var require_lib115 = __commonJS({
  "node_modules/@stdlib/math-base-assert-is-positive-zero/lib/index.js"(exports, module2) {
    "use strict";
    var isPositiveZero = require_main64();
    module2.exports = isPositiveZero;
  }
});

// node_modules/@stdlib/math-base-special-max/lib/max.js
var require_max = __commonJS({
  "node_modules/@stdlib/math-base-special-max/lib/max.js"(exports, module2) {
    "use strict";
    var isPositiveZero = require_lib115();
    var isnan = require_lib();
    var NINF = require_lib4();
    var PINF = require_lib2();
    function max(x, y) {
      var len;
      var m;
      var v;
      var i;
      len = arguments.length;
      if (len === 2) {
        if (isnan(x) || isnan(y)) {
          return NaN;
        }
        if (x === PINF || y === PINF) {
          return PINF;
        }
        if (x === y && x === 0) {
          if (isPositiveZero(x)) {
            return x;
          }
          return y;
        }
        if (x > y) {
          return x;
        }
        return y;
      }
      m = NINF;
      for (i = 0; i < len; i++) {
        v = arguments[i];
        if (isnan(v) || v === PINF) {
          return v;
        }
        if (v > m) {
          m = v;
        } else if (v === m && v === 0 && isPositiveZero(v)) {
          m = v;
        }
      }
      return m;
    }
    module2.exports = max;
  }
});

// node_modules/@stdlib/math-base-special-max/lib/index.js
var require_lib116 = __commonJS({
  "node_modules/@stdlib/math-base-special-max/lib/index.js"(exports, module2) {
    "use strict";
    var max = require_max();
    module2.exports = max;
  }
});

// node_modules/@stdlib/math-base-special-uimul/lib/main.js
var require_main65 = __commonJS({
  "node_modules/@stdlib/math-base-special-uimul/lib/main.js"(exports, module2) {
    "use strict";
    var LOW_WORD_MASK = 65535 >>> 0;
    function uimul(a, b) {
      var lbits;
      var mbits;
      var ha;
      var hb;
      var la;
      var lb;
      a >>>= 0;
      b >>>= 0;
      ha = a >>> 16 >>> 0;
      hb = b >>> 16 >>> 0;
      la = (a & LOW_WORD_MASK) >>> 0;
      lb = (b & LOW_WORD_MASK) >>> 0;
      lbits = la * lb >>> 0;
      mbits = ha * lb + la * hb << 16 >>> 0;
      return lbits + mbits >>> 0;
    }
    module2.exports = uimul;
  }
});

// node_modules/@stdlib/math-base-special-uimul/lib/index.js
var require_lib117 = __commonJS({
  "node_modules/@stdlib/math-base-special-uimul/lib/index.js"(exports, module2) {
    "use strict";
    var uimul = require_main65();
    module2.exports = uimul;
  }
});

// node_modules/@stdlib/random-base-mt19937/lib/rand_uint32.js
var require_rand_uint32 = __commonJS({
  "node_modules/@stdlib/random-base-mt19937/lib/rand_uint32.js"(exports, module2) {
    "use strict";
    var UINT32_MAX = require_lib17();
    var floor = require_lib6();
    var MAX = UINT32_MAX - 1;
    function randuint32() {
      var v = floor(1 + MAX * Math.random());
      return v >>> 0;
    }
    module2.exports = randuint32;
  }
});

// node_modules/@stdlib/random-base-mt19937/lib/factory.js
var require_factory3 = __commonJS({
  "node_modules/@stdlib/random-base-mt19937/lib/factory.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var setReadOnlyAccessor = require_lib89();
    var setReadWriteAccessor = require_lib90();
    var hasOwnProp = require_lib14();
    var isObject = require_lib88();
    var isCollection = require_lib68();
    var isUint32Array = require_lib16();
    var isBoolean = require_lib71().isPrimitive;
    var isPositiveInteger = require_lib61().isPrimitive;
    var FLOAT64_MAX_SAFE_INTEGER = require_lib51();
    var UINT32_MAX = require_lib17();
    var Uint32Array2 = require_lib19();
    var max = require_lib116();
    var uimul = require_lib117();
    var gcopy = require_lib112();
    var typedarray2json = require_lib111();
    var randuint32 = require_rand_uint32();
    var N = 624;
    var M = 397;
    var MAX_SEED = UINT32_MAX >>> 0;
    var SEED_ARRAY_INIT_STATE = 19650218 >>> 0;
    var UPPER_MASK = 2147483648 >>> 0;
    var LOWER_MASK = 2147483647 >>> 0;
    var KNUTH_MULTIPLIER = 1812433253 >>> 0;
    var MAGIC_MULTIPLIER_1 = 1664525 >>> 0;
    var MAGIC_MULTIPLIER_2 = 1566083941 >>> 0;
    var TEMPERING_COEFFICIENT_1 = 2636928640 >>> 0;
    var TEMPERING_COEFFICIENT_2 = 4022730752 >>> 0;
    var MATRIX_A = 2567483615 >>> 0;
    var MAG01 = [0 >>> 0, MATRIX_A >>> 0];
    var FLOAT64_NORMALIZATION_CONSTANT = 1 / (FLOAT64_MAX_SAFE_INTEGER + 1);
    var TWO_26 = 67108864 >>> 0;
    var TWO_32 = 2147483648 >>> 0;
    var ONE = 1 >>> 0;
    var MAX_NORMALIZED = FLOAT64_MAX_SAFE_INTEGER * FLOAT64_NORMALIZATION_CONSTANT;
    var STATE_ARRAY_VERSION = 1;
    var NUM_STATE_SECTIONS = 3;
    var STATE_SECTION_OFFSET = 2;
    var OTHER_SECTION_OFFSET = N + 3;
    var SEED_SECTION_OFFSET = N + 5;
    var STATE_FIXED_LENGTH = N + 6;
    function verifyState(state, FLG) {
      var s1;
      if (FLG) {
        s1 = "option";
      } else {
        s1 = "argument";
      }
      if (state.length < STATE_FIXED_LENGTH + 1) {
        return new RangeError("invalid " + s1 + ". `state` array has insufficient length.");
      }
      if (state[0] !== STATE_ARRAY_VERSION) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible schema version. Expected: " + STATE_ARRAY_VERSION + ". Actual: " + state[0] + ".");
      }
      if (state[1] !== NUM_STATE_SECTIONS) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible number of sections. Expected: " + NUM_STATE_SECTIONS + ". Actual: " + state[1] + ".");
      }
      if (state[STATE_SECTION_OFFSET] !== N) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible state length. Expected: " + N + ". Actual: " + state[STATE_SECTION_OFFSET] + ".");
      }
      if (state[OTHER_SECTION_OFFSET] !== 1) {
        return new RangeError("invalid " + s1 + ". `state` array has an incompatible section length. Expected: " + 1 .toString() + ". Actual: " + state[OTHER_SECTION_OFFSET] + ".");
      }
      if (state[SEED_SECTION_OFFSET] !== state.length - STATE_FIXED_LENGTH) {
        return new RangeError("invalid " + s1 + ". `state` array length is incompatible with seed section length. Expected: " + (state.length - STATE_FIXED_LENGTH) + ". Actual: " + state[SEED_SECTION_OFFSET] + ".");
      }
      return null;
    }
    function createState(state, N2, s) {
      var i;
      state[0] = s >>> 0;
      for (i = 1; i < N2; i++) {
        s = state[i - 1] >>> 0;
        s = (s ^ s >>> 30) >>> 0;
        state[i] = uimul(s, KNUTH_MULTIPLIER) + i >>> 0;
      }
      return state;
    }
    function initState(state, N2, seed, M2) {
      var s;
      var i;
      var j;
      var k;
      i = 1;
      j = 0;
      for (k = max(N2, M2); k > 0; k--) {
        s = state[i - 1] >>> 0;
        s = (s ^ s >>> 30) >>> 0;
        s = uimul(s, MAGIC_MULTIPLIER_1) >>> 0;
        state[i] = (state[i] >>> 0 ^ s) + seed[j] + j >>> 0;
        i += 1;
        j += 1;
        if (i >= N2) {
          state[0] = state[N2 - 1];
          i = 1;
        }
        if (j >= M2) {
          j = 0;
        }
      }
      for (k = N2 - 1; k > 0; k--) {
        s = state[i - 1] >>> 0;
        s = (s ^ s >>> 30) >>> 0;
        s = uimul(s, MAGIC_MULTIPLIER_2) >>> 0;
        state[i] = (state[i] >>> 0 ^ s) - i >>> 0;
        i += 1;
        if (i >= N2) {
          state[0] = state[N2 - 1];
          i = 1;
        }
      }
      state[0] = TWO_32;
      return state;
    }
    function twist(state) {
      var w;
      var i;
      var j;
      var k;
      k = N - M;
      for (i = 0; i < k; i++) {
        w = state[i] & UPPER_MASK | state[i + 1] & LOWER_MASK;
        state[i] = state[i + M] ^ w >>> 1 ^ MAG01[w & ONE];
      }
      j = N - 1;
      for (; i < j; i++) {
        w = state[i] & UPPER_MASK | state[i + 1] & LOWER_MASK;
        state[i] = state[i - k] ^ w >>> 1 ^ MAG01[w & ONE];
      }
      w = state[j] & UPPER_MASK | state[0] & LOWER_MASK;
      state[j] = state[M - 1] ^ w >>> 1 ^ MAG01[w & ONE];
      return state;
    }
    function factory(options) {
      var STATE;
      var state;
      var opts;
      var seed;
      var slen;
      var err;
      opts = {};
      if (arguments.length) {
        if (!isObject(options)) {
          throw new TypeError("invalid argument. Options argument must be an object. Value: `" + options + "`.");
        }
        if (hasOwnProp(options, "copy")) {
          opts.copy = options.copy;
          if (!isBoolean(options.copy)) {
            throw new TypeError("invalid option. `copy` option must be a boolean. Option: `" + options.copy + "`.");
          }
        }
        if (hasOwnProp(options, "state")) {
          state = options.state;
          opts.state = true;
          if (!isUint32Array(state)) {
            throw new TypeError("invalid option. `state` option must be a Uint32Array. Option: `" + state + "`.");
          }
          err = verifyState(state, true);
          if (err) {
            throw err;
          }
          if (opts.copy === false) {
            STATE = state;
          } else {
            STATE = new Uint32Array2(state.length);
            gcopy(state.length, state, 1, STATE, 1);
          }
          state = new Uint32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);
          seed = new Uint32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, state[SEED_SECTION_OFFSET]);
        }
        if (seed === void 0) {
          if (hasOwnProp(options, "seed")) {
            seed = options.seed;
            opts.seed = true;
            if (isPositiveInteger(seed)) {
              if (seed > MAX_SEED) {
                throw new RangeError("invalid option. `seed` option must be a positive integer less than or equal to the maximum unsigned 32-bit integer. Option: `" + seed + "`.");
              }
              seed >>>= 0;
            } else if (isCollection(seed) === false || seed.length < 1) {
              throw new TypeError("invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `" + seed + "`.");
            } else if (seed.length === 1) {
              seed = seed[0];
              if (!isPositiveInteger(seed)) {
                throw new TypeError("invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `" + seed + "`.");
              }
              if (seed > MAX_SEED) {
                throw new RangeError("invalid option. `seed` option must be either a positive integer less than or equal to the maximum unsigned 32-bit integer or an array-like object containing integer values less than or equal to the maximum unsigned 32-bit integer. Option: `" + seed + "`.");
              }
              seed >>>= 0;
            } else {
              slen = seed.length;
              STATE = new Uint32Array2(STATE_FIXED_LENGTH + slen);
              STATE[0] = STATE_ARRAY_VERSION;
              STATE[1] = NUM_STATE_SECTIONS;
              STATE[STATE_SECTION_OFFSET] = N;
              STATE[OTHER_SECTION_OFFSET] = 1;
              STATE[OTHER_SECTION_OFFSET + 1] = N;
              STATE[SEED_SECTION_OFFSET] = slen;
              gcopy.ndarray(slen, seed, 1, 0, STATE, 1, SEED_SECTION_OFFSET + 1);
              state = new Uint32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);
              seed = new Uint32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, slen);
              state = createState(state, N, SEED_ARRAY_INIT_STATE);
              state = initState(state, N, seed, slen);
            }
          } else {
            seed = randuint32() >>> 0;
          }
        }
      } else {
        seed = randuint32() >>> 0;
      }
      if (state === void 0) {
        STATE = new Uint32Array2(STATE_FIXED_LENGTH + 1);
        STATE[0] = STATE_ARRAY_VERSION;
        STATE[1] = NUM_STATE_SECTIONS;
        STATE[STATE_SECTION_OFFSET] = N;
        STATE[OTHER_SECTION_OFFSET] = 1;
        STATE[OTHER_SECTION_OFFSET + 1] = N;
        STATE[SEED_SECTION_OFFSET] = 1;
        STATE[SEED_SECTION_OFFSET + 1] = seed;
        state = new Uint32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);
        seed = new Uint32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, 1);
        state = createState(state, N, seed);
      }
      setReadOnly(mt19937, "NAME", "mt19937");
      setReadOnlyAccessor(mt19937, "seed", getSeed);
      setReadOnlyAccessor(mt19937, "seedLength", getSeedLength);
      setReadWriteAccessor(mt19937, "state", getState, setState);
      setReadOnlyAccessor(mt19937, "stateLength", getStateLength);
      setReadOnlyAccessor(mt19937, "byteLength", getStateSize);
      setReadOnly(mt19937, "toJSON", toJSON);
      setReadOnly(mt19937, "MIN", 1);
      setReadOnly(mt19937, "MAX", UINT32_MAX);
      setReadOnly(mt19937, "normalized", normalized);
      setReadOnly(normalized, "NAME", mt19937.NAME);
      setReadOnlyAccessor(normalized, "seed", getSeed);
      setReadOnlyAccessor(normalized, "seedLength", getSeedLength);
      setReadWriteAccessor(normalized, "state", getState, setState);
      setReadOnlyAccessor(normalized, "stateLength", getStateLength);
      setReadOnlyAccessor(normalized, "byteLength", getStateSize);
      setReadOnly(normalized, "toJSON", toJSON);
      setReadOnly(normalized, "MIN", 0);
      setReadOnly(normalized, "MAX", MAX_NORMALIZED);
      return mt19937;
      function getSeed() {
        var len = STATE[SEED_SECTION_OFFSET];
        return gcopy(len, seed, 1, new Uint32Array2(len), 1);
      }
      function getSeedLength() {
        return STATE[SEED_SECTION_OFFSET];
      }
      function getStateLength() {
        return STATE.length;
      }
      function getStateSize() {
        return STATE.byteLength;
      }
      function getState() {
        var len = STATE.length;
        return gcopy(len, STATE, 1, new Uint32Array2(len), 1);
      }
      function setState(s) {
        var err2;
        if (!isUint32Array(s)) {
          throw new TypeError("invalid argument. Must provide a Uint32Array. Value: `" + s + "`.");
        }
        err2 = verifyState(s, false);
        if (err2) {
          throw err2;
        }
        if (opts.copy === false) {
          if (opts.state && s.length === STATE.length) {
            gcopy(s.length, s, 1, STATE, 1);
          } else {
            STATE = s;
            opts.state = true;
          }
        } else {
          if (s.length !== STATE.length) {
            STATE = new Uint32Array2(s.length);
          }
          gcopy(s.length, s, 1, STATE, 1);
        }
        state = new Uint32Array2(STATE.buffer, STATE.byteOffset + (STATE_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, N);
        seed = new Uint32Array2(STATE.buffer, STATE.byteOffset + (SEED_SECTION_OFFSET + 1) * STATE.BYTES_PER_ELEMENT, STATE[SEED_SECTION_OFFSET]);
      }
      function toJSON() {
        var out = {};
        out.type = "PRNG";
        out.name = mt19937.NAME;
        out.state = typedarray2json(STATE);
        out.params = [];
        return out;
      }
      function mt19937() {
        var r;
        var i;
        i = STATE[OTHER_SECTION_OFFSET + 1];
        if (i >= N) {
          state = twist(state);
          i = 0;
        }
        r = state[i];
        STATE[OTHER_SECTION_OFFSET + 1] = i + 1;
        r ^= r >>> 11;
        r ^= r << 7 & TEMPERING_COEFFICIENT_1;
        r ^= r << 15 & TEMPERING_COEFFICIENT_2;
        r ^= r >>> 18;
        return r >>> 0;
      }
      function normalized() {
        var x = mt19937() >>> 5;
        var y = mt19937() >>> 6;
        return (x * TWO_26 + y) * FLOAT64_NORMALIZATION_CONSTANT;
      }
    }
    module2.exports = factory;
  }
});

// node_modules/@stdlib/random-base-mt19937/lib/main.js
var require_main66 = __commonJS({
  "node_modules/@stdlib/random-base-mt19937/lib/main.js"(exports, module2) {
    "use strict";
    var factory = require_factory3();
    var randuint32 = require_rand_uint32();
    var mt19937 = factory({
      "seed": randuint32()
    });
    module2.exports = mt19937;
  }
});

// node_modules/@stdlib/random-base-mt19937/lib/index.js
var require_lib118 = __commonJS({
  "node_modules/@stdlib/random-base-mt19937/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var mt19937 = require_main66();
    var factory = require_factory3();
    setReadOnly(mt19937, "factory", factory);
    module2.exports = mt19937;
  }
});

// node_modules/@stdlib/random-base-randu/lib/prngs.js
var require_prngs = __commonJS({
  "node_modules/@stdlib/random-base-randu/lib/prngs.js"(exports, module2) {
    "use strict";
    var prngs = {};
    prngs["minstd"] = require_lib113();
    prngs["minstd-shuffle"] = require_lib114();
    prngs["mt19937"] = require_lib118();
    module2.exports = prngs;
  }
});

// node_modules/@stdlib/random-base-randu/lib/factory.js
var require_factory4 = __commonJS({
  "node_modules/@stdlib/random-base-randu/lib/factory.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var setReadOnlyAccessor = require_lib89();
    var setReadWriteAccessor = require_lib90();
    var isObject = require_lib88();
    var isBoolean = require_lib71().isPrimitive;
    var hasOwnProp = require_lib14();
    var typedarray2json = require_lib111();
    var defaults = require_defaults();
    var PRNGS = require_prngs();
    function factory(options) {
      var opts;
      var rand;
      var prng;
      opts = {
        "name": defaults.name,
        "copy": defaults.copy
      };
      if (arguments.length) {
        if (!isObject(options)) {
          throw new TypeError("invalid argument. Must provide an object. Value: `" + options + "`.");
        }
        if (hasOwnProp(options, "name")) {
          opts.name = options.name;
        }
        if (hasOwnProp(options, "state")) {
          opts.state = options.state;
          if (opts.state === void 0) {
            throw new TypeError("invalid option. `state` option cannot be undefined. Option: `" + opts.state + "`.");
          }
        } else if (hasOwnProp(options, "seed")) {
          opts.seed = options.seed;
          if (opts.seed === void 0) {
            throw new TypeError("invalid option. `seed` option cannot be undefined. Option: `" + opts.seed + "`.");
          }
        }
        if (hasOwnProp(options, "copy")) {
          opts.copy = options.copy;
          if (!isBoolean(opts.copy)) {
            throw new TypeError("invalid option. `copy` option must be a boolean. Option: `" + opts.copy + "`.");
          }
        }
      }
      prng = PRNGS[opts.name];
      if (prng === void 0) {
        throw new Error("invalid option. Unrecognized/unsupported PRNG. Option: `" + opts.name + "`.");
      }
      if (opts.state === void 0) {
        if (opts.seed === void 0) {
          rand = prng.factory();
        } else {
          rand = prng.factory({
            "seed": opts.seed
          });
        }
      } else {
        rand = prng.factory({
          "state": opts.state,
          "copy": opts.copy
        });
      }
      setReadOnly(uniform, "NAME", "randu");
      setReadOnlyAccessor(uniform, "seed", getSeed);
      setReadOnlyAccessor(uniform, "seedLength", getSeedLength);
      setReadWriteAccessor(uniform, "state", getState, setState);
      setReadOnlyAccessor(uniform, "stateLength", getStateLength);
      setReadOnlyAccessor(uniform, "byteLength", getStateSize);
      setReadOnly(uniform, "toJSON", toJSON);
      setReadOnly(uniform, "PRNG", rand);
      setReadOnly(uniform, "MIN", rand.normalized.MIN);
      setReadOnly(uniform, "MAX", rand.normalized.MAX);
      return uniform;
      function getSeed() {
        return rand.seed;
      }
      function getSeedLength() {
        return rand.seedLength;
      }
      function getStateLength() {
        return rand.stateLength;
      }
      function getStateSize() {
        return rand.byteLength;
      }
      function getState() {
        return rand.state;
      }
      function setState(s) {
        rand.state = s;
      }
      function toJSON() {
        var out = {};
        out.type = "PRNG";
        out.name = uniform.NAME + "-" + rand.NAME;
        out.state = typedarray2json(rand.state);
        out.params = [];
        return out;
      }
      function uniform() {
        return rand.normalized();
      }
    }
    module2.exports = factory;
  }
});

// node_modules/@stdlib/random-base-randu/lib/main.js
var require_main67 = __commonJS({
  "node_modules/@stdlib/random-base-randu/lib/main.js"(exports, module2) {
    "use strict";
    var factory = require_factory4();
    var randu = factory();
    module2.exports = randu;
  }
});

// node_modules/@stdlib/random-base-randu/lib/index.js
var require_lib119 = __commonJS({
  "node_modules/@stdlib/random-base-randu/lib/index.js"(exports, module2) {
    "use strict";
    var setReadOnly = require_lib57();
    var randu = require_main67();
    var factory = require_factory4();
    setReadOnly(randu, "factory", factory);
    module2.exports = randu;
  }
});

// node_modules/@stdlib/nlp-lda/lib/init.js
var require_init = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/init.js"(exports, module2) {
    "use strict";
    var randu = require_lib119();
    var floor = require_lib6();
    function init() {
      var topic;
      var newz;
      var len;
      var wt;
      var d;
      var i;
      this.z = [];
      for (d = 0; d < this.D; d++) {
        this.z.push([]);
        len = this.w[d].length;
        for (i = 0; i < len; i++) {
          newz = floor(randu() * this.K);
          this.z[d].push(newz);
        }
        this.ndSum[d] = len;
        for (i = 0; i < len; i++) {
          wt = this.w[d][i];
          topic = this.z[d][i];
          this.nw.set(wt, topic, this.nw.get(wt, topic) + 1);
          this.nd.set(d, topic, this.nd.get(d, topic) + 1);
          this.nwSum[topic] = this.nwSum[topic] + 1;
        }
      }
    }
    module2.exports = init;
  }
});

// node_modules/@stdlib/nlp-lda/lib/avg_matrix.js
var require_avg_matrix = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/avg_matrix.js"(exports, module2) {
    "use strict";
    var matrix = require_matrix();
    function avgMatrix(A, B, weight) {
      var propA;
      var propB;
      var nrow;
      var ncol;
      var val;
      var C;
      var i;
      var j;
      nrow = A.shape[0];
      ncol = A.shape[1];
      C = matrix([nrow, ncol]);
      propA = (weight - 1) / weight;
      propB = 1 / weight;
      for (i = 0; i < nrow; i++) {
        for (j = 0; j < ncol; j++) {
          val = propA * A.get(i, j) + propB * B.get(i, j);
          C.set(i, j, val);
        }
      }
      return C;
    }
    module2.exports = avgMatrix;
  }
});

// node_modules/@stdlib/nlp-lda/lib/fit.js
var require_fit = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/fit.js"(exports, module2) {
    "use strict";
    var isPositiveInteger = require_lib61();
    var randu = require_lib119();
    var avgMatrix = require_avg_matrix();
    function fit(iter, burnin, thin) {
      var kalpha;
      var wbeta;
      var topic;
      var theta;
      var prob;
      var word;
      var phi;
      var len;
      var nt;
      var d;
      var i;
      var j;
      var u;
      var w;
      if (!isPositiveInteger(iter)) {
        throw new TypeError("invalid argument. First argument must be a positive integer. Value: `" + iter + "`.");
      }
      if (!isPositiveInteger(burnin)) {
        throw new TypeError("invalid argument. Second argument must be a positive integer. Value: `" + burnin + "`.");
      }
      if (!isPositiveInteger(thin)) {
        throw new TypeError("invalid argument. Third argument must be a positive integer. Value: `" + thin + "`.");
      }
      wbeta = this.W * this.beta;
      kalpha = this.K * this.alpha;
      for (i = 0; i < iter; i++) {
        for (d = 0; d < this.D; d++) {
          for (w = 0; w < this.ndSum[d]; w++) {
            word = this.w[d][w];
            topic = this.z[d][w];
            this.nw.set(word, topic, this.nw.get(word, topic) - 1);
            this.nd.set(d, topic, this.nd.get(d, topic) - 1);
            this.ndSum[d] -= 1;
            this.nwSum[topic] -= 1;
            prob = [];
            for (j = 0; j < this.K; j++) {
              prob.push((this.nw.get(word, j) + this.beta) / (this.nwSum[j] + wbeta) * (this.nd.get(d, j) + this.alpha) / (this.ndSum[d] + kalpha));
            }
            for (j = 1; j < this.K; j++) {
              prob[j] += prob[j - 1];
            }
            u = prob[this.K - 1] * randu();
            topic = 0;
            for (nt = 0; nt < this.K; nt++) {
              if (prob[nt] > u) {
                topic = nt;
                break;
              }
            }
            this.nw.set(word, topic, this.nw.get(word, topic) + 1);
            this.nd.set(d, topic, this.nd.get(d, topic) + 1);
            this.nwSum[topic] += 1;
            this.ndSum[d] += 1;
            this.z[d][w] = topic;
          }
        }
        if (i % thin === 0 && i > burnin) {
          phi = this.getPhis();
          theta = this.getThetas();
          this.phiList.push(phi);
          this.thetaList.push(theta);
          len = this.phiList.length;
          if (len === 1) {
            this.avgPhi = phi;
          } else {
            this.avgPhi = avgMatrix(this.avgPhi, phi, len);
          }
          len = this.thetaList.length;
          if (len === 1) {
            this.avgTheta = theta;
          } else {
            this.avgTheta = avgMatrix(this.avgTheta, theta, len);
          }
        }
      }
    }
    module2.exports = fit;
  }
});

// node_modules/@stdlib/nlp-lda/lib/lda.js
var require_lda = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/lda.js"(exports, module2) {
    "use strict";
    var isNonNegativeInteger = require_lib60();
    var isPositiveInteger = require_lib61();
    var isStringArray = require_lib65();
    var setReadOnly = require_lib66();
    var contains = require_lib70();
    var tokenize = require_lib72();
    var Int32Array2 = require_lib77();
    var matrix = require_matrix();
    var getThetas = require_get_thetas();
    var validate = require_validate();
    var getPhis = require_get_phis();
    var init = require_init();
    var fit = require_fit();
    function findIndex(vocab, searchVal) {
      var i;
      for (i = 0; i < vocab.length; i++) {
        if (vocab[i] === searchVal) {
          return i;
        }
      }
      return -1;
    }
    function lda2(documents, K, options) {
      var target;
      var vocab;
      var model;
      var alpha;
      var beta;
      var opts;
      var err;
      var pos;
      var nd;
      var it;
      var wd;
      var D;
      var d;
      var i;
      var j;
      var W;
      var w;
      if (!isStringArray(documents)) {
        throw new TypeError("invalid argument. First argument must be a string array. Value: `" + documents + "`.");
      }
      if (!isPositiveInteger(K)) {
        throw new TypeError("invalid argument. Number of topics `K` must be a positive integer. Value: `" + K + "`.");
      }
      opts = {};
      if (arguments.length > 2) {
        err = validate(opts, options);
        if (err) {
          throw err;
        }
      }
      D = documents.length;
      alpha = opts.alpha || 50 / K;
      beta = opts.beta || 0.1;
      vocab = [];
      w = [];
      pos = 0;
      for (d = 0; d < D; d++) {
        w.push([]);
        wd = tokenize(documents[d]);
        nd = wd.length;
        for (i = 0; i < nd; i++) {
          target = wd[i];
          it = findIndex(vocab, target);
          if (it === -1) {
            vocab.push(target);
            w[d].push(pos);
            pos += 1;
          } else {
            w[d].push(it);
          }
        }
      }
      W = vocab.length;
      model = {};
      setReadOnly(model, "K", K);
      setReadOnly(model, "D", D);
      setReadOnly(model, "W", W);
      setReadOnly(model, "alpha", alpha);
      setReadOnly(model, "beta", beta);
      setReadOnly(model, "init", init);
      setReadOnly(model, "fit", fit);
      setReadOnly(model, "getPhis", getPhis);
      setReadOnly(model, "getThetas", getThetas);
      setReadOnly(model, "getTerms", getTerms);
      model.nwSum = new Int32Array2(K);
      model.ndSum = new Int32Array2(D);
      model.nw = matrix([W, K], "int32");
      model.nd = matrix([D, K], "int32");
      model.phiList = [];
      model.thetaList = [];
      model.w = w;
      model.init();
      return model;
      function getTerms(k, no) {
        var skip;
        var phi;
        var ret;
        var max;
        var mid;
        var i2;
        if (!isNonNegativeInteger(k) || k >= K) {
          throw new TypeError("invalid argument. First argument must be a nonnegative integer smaller than the total number of topics. Value: `" + k + "`.");
        }
        if (no) {
          if (!isPositiveInteger(no)) {
            throw new TypeError("invalid argument. Second argument must be a positive integer. Value: `" + no + "`.");
          }
        } else {
          no = 10;
        }
        ret = [];
        skip = [];
        for (i2 = 0; i2 < no; i2++) {
          max = 0;
          for (j = 0; j < this.W; j++) {
            phi = this.avgPhi.get(k, j);
            if (phi > max && !contains(skip, j)) {
              max = phi;
              mid = j;
            }
          }
          skip.push(mid);
          ret.push({
            "word": vocab[mid],
            "prob": max
          });
        }
        return ret;
      }
    }
    module2.exports = lda2;
  }
});

// node_modules/@stdlib/nlp-lda/lib/index.js
var require_lib120 = __commonJS({
  "node_modules/@stdlib/nlp-lda/lib/index.js"(exports, module2) {
    "use strict";
    var lda2 = require_lda();
    module2.exports = lda2;
  }
});

// node_modules/@stdlib/string-ends-with/lib/ends_with.js
var require_ends_with = __commonJS({
  "node_modules/@stdlib/string-ends-with/lib/ends_with.js"(exports, module2) {
    "use strict";
    var isInteger = require_lib59().isPrimitive;
    var isString = require_lib64().isPrimitive;
    function endsWith(str, search, len) {
      var idx;
      var i;
      if (!isString(str)) {
        throw new TypeError("invalid argument. First argument must be a string primitive. Value: `" + str + "`.");
      }
      if (!isString(search)) {
        throw new TypeError("invalid argument. Second argument must be a string primitive. Value: `" + search + "`.");
      }
      if (arguments.length > 2) {
        if (!isInteger(len)) {
          throw new TypeError("invalid argument. Third argument must be an integer. Value: `" + len + "`.");
        }
        if (len === 0) {
          return search.length === 0;
        }
        if (len < 0) {
          idx = str.length + len;
        } else {
          idx = len;
        }
      } else {
        idx = str.length;
      }
      if (search.length === 0) {
        return true;
      }
      idx -= search.length;
      if (idx < 0) {
        return false;
      }
      for (i = 0; i < search.length; i++) {
        if (str.charCodeAt(idx + i) !== search.charCodeAt(i)) {
          return false;
        }
      }
      return true;
    }
    module2.exports = endsWith;
  }
});

// node_modules/@stdlib/string-ends-with/lib/index.js
var require_lib121 = __commonJS({
  "node_modules/@stdlib/string-ends-with/lib/index.js"(exports, module2) {
    "use strict";
    var endsWith = require_ends_with();
    module2.exports = endsWith;
  }
});

// node_modules/@stdlib/string-lowercase/lib/lowercase.js
var require_lowercase = __commonJS({
  "node_modules/@stdlib/string-lowercase/lib/lowercase.js"(exports, module2) {
    "use strict";
    var isString = require_lib64().isPrimitive;
    function lowercase(str) {
      if (!isString(str)) {
        throw new TypeError("invalid argument. Must provide a primitive string. Value: `" + str + "`.");
      }
      return str.toLowerCase();
    }
    module2.exports = lowercase;
  }
});

// node_modules/@stdlib/string-lowercase/lib/index.js
var require_lib122 = __commonJS({
  "node_modules/@stdlib/string-lowercase/lib/index.js"(exports, module2) {
    "use strict";
    var lowercase = require_lowercase();
    module2.exports = lowercase;
  }
});

// node_modules/@stdlib/utils-escape-regexp-string/lib/main.js
var require_main68 = __commonJS({
  "node_modules/@stdlib/utils-escape-regexp-string/lib/main.js"(exports, module2) {
    "use strict";
    var isString = require_lib64().isPrimitive;
    var RE_CHARS = /[-\/\\^$*+?.()|[\]{}]/g;
    function rescape(str) {
      var len;
      var s;
      var i;
      if (!isString(str)) {
        throw new TypeError("invalid argument. Must provide a regular expression string. Value: `" + str + "`.");
      }
      if (str[0] === "/") {
        len = str.length;
        for (i = len - 1; i >= 0; i--) {
          if (str[i] === "/") {
            break;
          }
        }
      }
      if (i === void 0 || i <= 0) {
        return str.replace(RE_CHARS, "\\$&");
      }
      s = str.substring(1, i);
      s = s.replace(RE_CHARS, "\\$&");
      str = str[0] + s + str.substring(i);
      return str;
    }
    module2.exports = rescape;
  }
});

// node_modules/@stdlib/utils-escape-regexp-string/lib/index.js
var require_lib123 = __commonJS({
  "node_modules/@stdlib/utils-escape-regexp-string/lib/index.js"(exports, module2) {
    "use strict";
    var rescape = require_main68();
    module2.exports = rescape;
  }
});

// node_modules/@stdlib/assert-is-regexp/lib/exec.js
var require_exec = __commonJS({
  "node_modules/@stdlib/assert-is-regexp/lib/exec.js"(exports, module2) {
    "use strict";
    var exec = RegExp.prototype.exec;
    module2.exports = exec;
  }
});

// node_modules/@stdlib/assert-is-regexp/lib/try2exec.js
var require_try2exec = __commonJS({
  "node_modules/@stdlib/assert-is-regexp/lib/try2exec.js"(exports, module2) {
    "use strict";
    var exec = require_exec();
    function test(value) {
      try {
        exec.call(value);
        return true;
      } catch (err) {
        return false;
      }
    }
    module2.exports = test;
  }
});

// node_modules/@stdlib/assert-is-regexp/lib/main.js
var require_main69 = __commonJS({
  "node_modules/@stdlib/assert-is-regexp/lib/main.js"(exports, module2) {
    "use strict";
    var hasToStringTag = require_lib13();
    var nativeClass = require_lib15();
    var test = require_try2exec();
    var FLG = hasToStringTag();
    function isRegExp(value) {
      if (typeof value === "object") {
        if (value instanceof RegExp) {
          return true;
        }
        if (FLG) {
          return test(value);
        }
        return nativeClass(value) === "[object RegExp]";
      }
      return false;
    }
    module2.exports = isRegExp;
  }
});

// node_modules/@stdlib/assert-is-regexp/lib/index.js
var require_lib124 = __commonJS({
  "node_modules/@stdlib/assert-is-regexp/lib/index.js"(exports, module2) {
    "use strict";
    var isRegExp = require_main69();
    module2.exports = isRegExp;
  }
});

// node_modules/@stdlib/string-replace/lib/replace.js
var require_replace = __commonJS({
  "node_modules/@stdlib/string-replace/lib/replace.js"(exports, module2) {
    "use strict";
    var rescape = require_lib123();
    var isFunction = require_lib86();
    var isString = require_lib64().isPrimitive;
    var isRegExp = require_lib124();
    function replace(str, search, newval) {
      if (!isString(str)) {
        throw new TypeError("invalid argument. First argument must be a string primitive. Value: `" + str + "`.");
      }
      if (isString(search)) {
        search = rescape(search);
        search = new RegExp(search, "g");
      } else if (!isRegExp(search)) {
        throw new TypeError("invalid argument. Second argument must be a string primitive or regular expression. Value: `" + search + "`.");
      }
      if (!isString(newval) && !isFunction(newval)) {
        throw new TypeError("invalid argument. Third argument must be a string primitive or replacement function. Value: `" + newval + "`.");
      }
      return str.replace(search, newval);
    }
    module2.exports = replace;
  }
});

// node_modules/@stdlib/string-replace/lib/index.js
var require_lib125 = __commonJS({
  "node_modules/@stdlib/string-replace/lib/index.js"(exports, module2) {
    "use strict";
    var replace = require_replace();
    module2.exports = replace;
  }
});

// node_modules/@stdlib/nlp-porter-stemmer/lib/main.js
var require_main70 = __commonJS({
  "node_modules/@stdlib/nlp-porter-stemmer/lib/main.js"(exports, module2) {
    "use strict";
    var isString = require_lib64().isPrimitive;
    var endsWith = require_lib121();
    var lowercase = require_lib122();
    var replace = require_lib125();
    var step2list = {
      "ational": "ate",
      "tional": "tion",
      "enci": "ence",
      "anci": "ance",
      "izer": "ize",
      "bli": "ble",
      "alli": "al",
      "entli": "ent",
      "eli": "e",
      "ousli": "ous",
      "ization": "ize",
      "ation": "ate",
      "ator": "ate",
      "alism": "al",
      "iveness": "ive",
      "fulness": "ful",
      "ousness": "ous",
      "aliti": "al",
      "iviti": "ive",
      "biliti": "ble",
      "logi": "log"
    };
    var step3list = {
      "icate": "ic",
      "ative": "",
      "alize": "al",
      "iciti": "ic",
      "ical": "ic",
      "ful": "",
      "ness": ""
    };
    var c = "[^aeiou]";
    var v = "[aeiouy]";
    var C = c + "[^aeiouy]*";
    var V = v + "[aeiou]*";
    var RE_CV = new RegExp("^" + C + v + "[^aeiouwxy]$");
    var mgr0 = "^(" + C + ")?" + V + C;
    var RE_MGR0 = new RegExp(mgr0);
    var meq1 = "^(" + C + ")?" + V + C + "(" + V + ")?$";
    var RE_MEQ1 = new RegExp(meq1);
    var mgr1 = "^(" + C + ")?" + V + C + V + C;
    var RE_MGR1 = new RegExp(mgr1);
    var sV = "^(" + C + ")?" + v;
    var RE_SV = new RegExp(sV);
    var RE_STEP1A = /^(.+?)(ss|i)es$/;
    var RE2_STEP1A = /^(.+?)([^s])s$/;
    var RE_STEP1B = /^(.+?)eed$/;
    var RE2_STEP1B = /^(.+?)(ed|ing)$/;
    var RE_STEP1C = /^(.+?)y$/;
    var RE_STEP2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;
    var RE_STEP3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
    var RE_STEP4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
    var RE2_STEP4 = /^(.+?)(s|t)(ion)$/;
    var RE_STEP5 = /^(.+?)e$/;
    var RE_LAST = /.$/;
    var RE_ATBLIZ = /(at|bl|iz)$/;
    var RE_DOUBLE = new RegExp("([^aeiouylsz])\\1$");
    function porterStemmer2(word) {
      var firstch;
      var suffix;
      var stem;
      var fp;
      if (!isString(word)) {
        throw new TypeError("invalid argument. First argument must be a string primitive. Value: `" + word + "`.");
      }
      if (word.length < 3) {
        return word;
      }
      word = lowercase(word);
      firstch = word[0];
      if (firstch === "y") {
        word = firstch.toUpperCase() + word.substr(1);
      }
      if (RE_STEP1A.test(word)) {
        word = replace(word, RE_STEP1A, "$1$2");
      } else if (RE2_STEP1A.test(word)) {
        word = replace(word, RE2_STEP1A, "$1$2");
      }
      if (RE_STEP1B.test(word)) {
        fp = RE_STEP1B.exec(word);
        if (RE_MGR0.test(fp[1])) {
          word = replace(word, RE_LAST, "");
        }
      } else if (RE2_STEP1B.test(word)) {
        fp = RE2_STEP1B.exec(word);
        stem = fp[1];
        if (RE_SV.test(stem)) {
          word = stem;
          if (RE_ATBLIZ.test(word)) {
            word += "e";
          } else if (RE_DOUBLE.test(word)) {
            word = replace(word, RE_LAST, "");
          } else if (RE_CV.test(word)) {
            word += "e";
          }
        }
      }
      if (RE_STEP1C.test(word)) {
        fp = RE_STEP1C.exec(word);
        stem = fp[1];
        if (RE_SV.test(stem)) {
          word = stem + "i";
        }
      }
      if (RE_STEP2.test(word)) {
        fp = RE_STEP2.exec(word);
        stem = fp[1];
        suffix = fp[2];
        if (RE_MGR0.test(stem)) {
          word = stem + step2list[suffix];
        }
      }
      if (RE_STEP3.test(word)) {
        fp = RE_STEP3.exec(word);
        stem = fp[1];
        suffix = fp[2];
        if (RE_MGR0.test(stem)) {
          word = stem + step3list[suffix];
        }
      }
      if (RE_STEP4.test(word)) {
        fp = RE_STEP4.exec(word);
        stem = fp[1];
        if (RE_MGR1.test(stem)) {
          word = stem;
        }
      } else if (RE2_STEP4.test(word)) {
        fp = RE2_STEP4.exec(word);
        stem = fp[1] + fp[2];
        if (RE_MGR1.test(stem)) {
          word = stem;
        }
      }
      if (RE_STEP5.test(word)) {
        fp = RE_STEP5.exec(word);
        stem = fp[1];
        if (RE_MGR1.test(stem) || RE_MEQ1.test(stem) && !RE_CV.test(stem)) {
          word = stem;
        }
      }
      if (endsWith(word, "ll") && RE_MGR1.test(word)) {
        word = replace(word, RE_LAST, "");
      }
      if (firstch === "y") {
        word = firstch.toLowerCase() + word.substr(1);
      }
      return word;
    }
    module2.exports = porterStemmer2;
  }
});

// node_modules/@stdlib/nlp-porter-stemmer/lib/index.js
var require_lib126 = __commonJS({
  "node_modules/@stdlib/nlp-porter-stemmer/lib/index.js"(exports, module2) {
    "use strict";
    var porterStemmer2 = require_main70();
    module2.exports = porterStemmer2;
  }
});

// node_modules/braces/lib/utils.js
var require_utils = __commonJS({
  "node_modules/braces/lib/utils.js"(exports) {
    "use strict";
    exports.isInteger = (num) => {
      if (typeof num === "number") {
        return Number.isInteger(num);
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isInteger(Number(num));
      }
      return false;
    };
    exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
    exports.exceedsLimit = (min, max, step = 1, limit) => {
      if (limit === false)
        return false;
      if (!exports.isInteger(min) || !exports.isInteger(max))
        return false;
      return (Number(max) - Number(min)) / Number(step) >= limit;
    };
    exports.escapeNode = (block, n = 0, type) => {
      let node = block.nodes[n];
      if (!node)
        return;
      if (type && node.type === type || node.type === "open" || node.type === "close") {
        if (node.escaped !== true) {
          node.value = "\\" + node.value;
          node.escaped = true;
        }
      }
    };
    exports.encloseBrace = (node) => {
      if (node.type !== "brace")
        return false;
      if (node.commas >> 0 + node.ranges >> 0 === 0) {
        node.invalid = true;
        return true;
      }
      return false;
    };
    exports.isInvalidBrace = (block) => {
      if (block.type !== "brace")
        return false;
      if (block.invalid === true || block.dollar)
        return true;
      if (block.commas >> 0 + block.ranges >> 0 === 0) {
        block.invalid = true;
        return true;
      }
      if (block.open !== true || block.close !== true) {
        block.invalid = true;
        return true;
      }
      return false;
    };
    exports.isOpenOrClose = (node) => {
      if (node.type === "open" || node.type === "close") {
        return true;
      }
      return node.open === true || node.close === true;
    };
    exports.reduce = (nodes) => nodes.reduce((acc, node) => {
      if (node.type === "text")
        acc.push(node.value);
      if (node.type === "range")
        node.type = "text";
      return acc;
    }, []);
    exports.flatten = (...args) => {
      const result = [];
      const flat = (arr) => {
        for (let i = 0; i < arr.length; i++) {
          let ele = arr[i];
          Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
        }
        return result;
      };
      flat(args);
      return result;
    };
  }
});

// node_modules/braces/lib/stringify.js
var require_stringify = __commonJS({
  "node_modules/braces/lib/stringify.js"(exports, module2) {
    "use strict";
    var utils = require_utils();
    module2.exports = (ast, options = {}) => {
      let stringify = (node, parent = {}) => {
        let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let output = "";
        if (node.value) {
          if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
            return "\\" + node.value;
          }
          return node.value;
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += stringify(child);
          }
        }
        return output;
      };
      return stringify(ast);
    };
  }
});

// node_modules/is-number/index.js
var require_is_number = __commonJS({
  "node_modules/is-number/index.js"(exports, module2) {
    "use strict";
    module2.exports = function(num) {
      if (typeof num === "number") {
        return num - num === 0;
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
      }
      return false;
    };
  }
});

// node_modules/to-regex-range/index.js
var require_to_regex_range = __commonJS({
  "node_modules/to-regex-range/index.js"(exports, module2) {
    "use strict";
    var isNumber = require_is_number();
    var toRegexRange = (min, max, options) => {
      if (isNumber(min) === false) {
        throw new TypeError("toRegexRange: expected the first argument to be a number");
      }
      if (max === void 0 || min === max) {
        return String(min);
      }
      if (isNumber(max) === false) {
        throw new TypeError("toRegexRange: expected the second argument to be a number.");
      }
      let opts = { relaxZeros: true, ...options };
      if (typeof opts.strictZeros === "boolean") {
        opts.relaxZeros = opts.strictZeros === false;
      }
      let relax = String(opts.relaxZeros);
      let shorthand = String(opts.shorthand);
      let capture = String(opts.capture);
      let wrap = String(opts.wrap);
      let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
      if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
        return toRegexRange.cache[cacheKey].result;
      }
      let a = Math.min(min, max);
      let b = Math.max(min, max);
      if (Math.abs(a - b) === 1) {
        let result = min + "|" + max;
        if (opts.capture) {
          return `(${result})`;
        }
        if (opts.wrap === false) {
          return result;
        }
        return `(?:${result})`;
      }
      let isPadded = hasPadding(min) || hasPadding(max);
      let state = { min, max, a, b };
      let positives = [];
      let negatives = [];
      if (isPadded) {
        state.isPadded = isPadded;
        state.maxLen = String(state.max).length;
      }
      if (a < 0) {
        let newMin = b < 0 ? Math.abs(b) : 1;
        negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
        a = state.a = 0;
      }
      if (b >= 0) {
        positives = splitToPatterns(a, b, state, opts);
      }
      state.negatives = negatives;
      state.positives = positives;
      state.result = collatePatterns(negatives, positives, opts);
      if (opts.capture === true) {
        state.result = `(${state.result})`;
      } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
        state.result = `(?:${state.result})`;
      }
      toRegexRange.cache[cacheKey] = state;
      return state.result;
    };
    function collatePatterns(neg, pos, options) {
      let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
      let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
      let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
      let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
      return subpatterns.join("|");
    }
    function splitToRanges(min, max) {
      let nines = 1;
      let zeros = 1;
      let stop = countNines(min, nines);
      let stops = new Set([max]);
      while (min <= stop && stop <= max) {
        stops.add(stop);
        nines += 1;
        stop = countNines(min, nines);
      }
      stop = countZeros(max + 1, zeros) - 1;
      while (min < stop && stop <= max) {
        stops.add(stop);
        zeros += 1;
        stop = countZeros(max + 1, zeros) - 1;
      }
      stops = [...stops];
      stops.sort(compare);
      return stops;
    }
    function rangeToPattern(start, stop, options) {
      if (start === stop) {
        return { pattern: start, count: [], digits: 0 };
      }
      let zipped = zip(start, stop);
      let digits = zipped.length;
      let pattern = "";
      let count = 0;
      for (let i = 0; i < digits; i++) {
        let [startDigit, stopDigit] = zipped[i];
        if (startDigit === stopDigit) {
          pattern += startDigit;
        } else if (startDigit !== "0" || stopDigit !== "9") {
          pattern += toCharacterClass(startDigit, stopDigit, options);
        } else {
          count++;
        }
      }
      if (count) {
        pattern += options.shorthand === true ? "\\d" : "[0-9]";
      }
      return { pattern, count: [count], digits };
    }
    function splitToPatterns(min, max, tok, options) {
      let ranges = splitToRanges(min, max);
      let tokens = [];
      let start = min;
      let prev;
      for (let i = 0; i < ranges.length; i++) {
        let max2 = ranges[i];
        let obj = rangeToPattern(String(start), String(max2), options);
        let zeros = "";
        if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
          if (prev.count.length > 1) {
            prev.count.pop();
          }
          prev.count.push(obj.count[0]);
          prev.string = prev.pattern + toQuantifier(prev.count);
          start = max2 + 1;
          continue;
        }
        if (tok.isPadded) {
          zeros = padZeros(max2, tok, options);
        }
        obj.string = zeros + obj.pattern + toQuantifier(obj.count);
        tokens.push(obj);
        start = max2 + 1;
        prev = obj;
      }
      return tokens;
    }
    function filterPatterns(arr, comparison, prefix, intersection, options) {
      let result = [];
      for (let ele of arr) {
        let { string } = ele;
        if (!intersection && !contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
        if (intersection && contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
      }
      return result;
    }
    function zip(a, b) {
      let arr = [];
      for (let i = 0; i < a.length; i++)
        arr.push([a[i], b[i]]);
      return arr;
    }
    function compare(a, b) {
      return a > b ? 1 : b > a ? -1 : 0;
    }
    function contains(arr, key, val) {
      return arr.some((ele) => ele[key] === val);
    }
    function countNines(min, len) {
      return Number(String(min).slice(0, -len) + "9".repeat(len));
    }
    function countZeros(integer, zeros) {
      return integer - integer % Math.pow(10, zeros);
    }
    function toQuantifier(digits) {
      let [start = 0, stop = ""] = digits;
      if (stop || start > 1) {
        return `{${start + (stop ? "," + stop : "")}}`;
      }
      return "";
    }
    function toCharacterClass(a, b, options) {
      return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
    }
    function hasPadding(str) {
      return /^-?(0+)\d/.test(str);
    }
    function padZeros(value, tok, options) {
      if (!tok.isPadded) {
        return value;
      }
      let diff = Math.abs(tok.maxLen - String(value).length);
      let relax = options.relaxZeros !== false;
      switch (diff) {
        case 0:
          return "";
        case 1:
          return relax ? "0?" : "0";
        case 2:
          return relax ? "0{0,2}" : "00";
        default: {
          return relax ? `0{0,${diff}}` : `0{${diff}}`;
        }
      }
    }
    toRegexRange.cache = {};
    toRegexRange.clearCache = () => toRegexRange.cache = {};
    module2.exports = toRegexRange;
  }
});

// node_modules/fill-range/index.js
var require_fill_range = __commonJS({
  "node_modules/fill-range/index.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var toRegexRange = require_to_regex_range();
    var isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    var transform = (toNumber) => {
      return (value) => toNumber === true ? Number(value) : String(value);
    };
    var isValidValue = (value) => {
      return typeof value === "number" || typeof value === "string" && value !== "";
    };
    var isNumber = (num) => Number.isInteger(+num);
    var zeros = (input) => {
      let value = `${input}`;
      let index = -1;
      if (value[0] === "-")
        value = value.slice(1);
      if (value === "0")
        return false;
      while (value[++index] === "0")
        ;
      return index > 0;
    };
    var stringify = (start, end, options) => {
      if (typeof start === "string" || typeof end === "string") {
        return true;
      }
      return options.stringify === true;
    };
    var pad = (input, maxLength, toNumber) => {
      if (maxLength > 0) {
        let dash = input[0] === "-" ? "-" : "";
        if (dash)
          input = input.slice(1);
        input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
      }
      if (toNumber === false) {
        return String(input);
      }
      return input;
    };
    var toMaxLen = (input, maxLength) => {
      let negative = input[0] === "-" ? "-" : "";
      if (negative) {
        input = input.slice(1);
        maxLength--;
      }
      while (input.length < maxLength)
        input = "0" + input;
      return negative ? "-" + input : input;
    };
    var toSequence = (parts, options) => {
      parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      let prefix = options.capture ? "" : "?:";
      let positives = "";
      let negatives = "";
      let result;
      if (parts.positives.length) {
        positives = parts.positives.join("|");
      }
      if (parts.negatives.length) {
        negatives = `-(${prefix}${parts.negatives.join("|")})`;
      }
      if (positives && negatives) {
        result = `${positives}|${negatives}`;
      } else {
        result = positives || negatives;
      }
      if (options.wrap) {
        return `(${prefix}${result})`;
      }
      return result;
    };
    var toRange = (a, b, isNumbers, options) => {
      if (isNumbers) {
        return toRegexRange(a, b, { wrap: false, ...options });
      }
      let start = String.fromCharCode(a);
      if (a === b)
        return start;
      let stop = String.fromCharCode(b);
      return `[${start}-${stop}]`;
    };
    var toRegex = (start, end, options) => {
      if (Array.isArray(start)) {
        let wrap = options.wrap === true;
        let prefix = options.capture ? "" : "?:";
        return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
      }
      return toRegexRange(start, end, options);
    };
    var rangeError = (...args) => {
      return new RangeError("Invalid range arguments: " + util.inspect(...args));
    };
    var invalidRange = (start, end, options) => {
      if (options.strictRanges === true)
        throw rangeError([start, end]);
      return [];
    };
    var invalidStep = (step, options) => {
      if (options.strictRanges === true) {
        throw new TypeError(`Expected step "${step}" to be a number`);
      }
      return [];
    };
    var fillNumbers = (start, end, step = 1, options = {}) => {
      let a = Number(start);
      let b = Number(end);
      if (!Number.isInteger(a) || !Number.isInteger(b)) {
        if (options.strictRanges === true)
          throw rangeError([start, end]);
        return [];
      }
      if (a === 0)
        a = 0;
      if (b === 0)
        b = 0;
      let descending = a > b;
      let startString = String(start);
      let endString = String(end);
      let stepString = String(step);
      step = Math.max(Math.abs(step), 1);
      let padded = zeros(startString) || zeros(endString) || zeros(stepString);
      let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
      let toNumber = padded === false && stringify(start, end, options) === false;
      let format = options.transform || transform(toNumber);
      if (options.toRegex && step === 1) {
        return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
      }
      let parts = { negatives: [], positives: [] };
      let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        if (options.toRegex === true && step > 1) {
          push(a);
        } else {
          range.push(pad(format(a, index), maxLen, toNumber));
        }
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return step > 1 ? toSequence(parts, options) : toRegex(range, null, { wrap: false, ...options });
      }
      return range;
    };
    var fillLetters = (start, end, step = 1, options = {}) => {
      if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
        return invalidRange(start, end, options);
      }
      let format = options.transform || ((val) => String.fromCharCode(val));
      let a = `${start}`.charCodeAt(0);
      let b = `${end}`.charCodeAt(0);
      let descending = a > b;
      let min = Math.min(a, b);
      let max = Math.max(a, b);
      if (options.toRegex && step === 1) {
        return toRange(min, max, false, options);
      }
      let range = [];
      let index = 0;
      while (descending ? a >= b : a <= b) {
        range.push(format(a, index));
        a = descending ? a - step : a + step;
        index++;
      }
      if (options.toRegex === true) {
        return toRegex(range, null, { wrap: false, options });
      }
      return range;
    };
    var fill = (start, end, step, options = {}) => {
      if (end == null && isValidValue(start)) {
        return [start];
      }
      if (!isValidValue(start) || !isValidValue(end)) {
        return invalidRange(start, end, options);
      }
      if (typeof step === "function") {
        return fill(start, end, 1, { transform: step });
      }
      if (isObject(step)) {
        return fill(start, end, 0, step);
      }
      let opts = { ...options };
      if (opts.capture === true)
        opts.wrap = true;
      step = step || opts.step || 1;
      if (!isNumber(step)) {
        if (step != null && !isObject(step))
          return invalidStep(step, opts);
        return fill(start, end, 1, step);
      }
      if (isNumber(start) && isNumber(end)) {
        return fillNumbers(start, end, step, opts);
      }
      return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
    };
    module2.exports = fill;
  }
});

// node_modules/braces/lib/compile.js
var require_compile = __commonJS({
  "node_modules/braces/lib/compile.js"(exports, module2) {
    "use strict";
    var fill = require_fill_range();
    var utils = require_utils();
    var compile = (ast, options = {}) => {
      let walk = (node, parent = {}) => {
        let invalidBlock = utils.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let invalid = invalidBlock === true || invalidNode === true;
        let prefix = options.escapeInvalid === true ? "\\" : "";
        let output = "";
        if (node.isOpen === true) {
          return prefix + node.value;
        }
        if (node.isClose === true) {
          return prefix + node.value;
        }
        if (node.type === "open") {
          return invalid ? prefix + node.value : "(";
        }
        if (node.type === "close") {
          return invalid ? prefix + node.value : ")";
        }
        if (node.type === "comma") {
          return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils.reduce(node.nodes);
          let range = fill(...args, { ...options, wrap: false, toRegex: true });
          if (range.length !== 0) {
            return args.length > 1 && range.length > 1 ? `(${range})` : range;
          }
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += walk(child, node);
          }
        }
        return output;
      };
      return walk(ast);
    };
    module2.exports = compile;
  }
});

// node_modules/braces/lib/expand.js
var require_expand = __commonJS({
  "node_modules/braces/lib/expand.js"(exports, module2) {
    "use strict";
    var fill = require_fill_range();
    var stringify = require_stringify();
    var utils = require_utils();
    var append = (queue = "", stash = "", enclose = false) => {
      let result = [];
      queue = [].concat(queue);
      stash = [].concat(stash);
      if (!stash.length)
        return queue;
      if (!queue.length) {
        return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
      }
      for (let item of queue) {
        if (Array.isArray(item)) {
          for (let value of item) {
            result.push(append(value, stash, enclose));
          }
        } else {
          for (let ele of stash) {
            if (enclose === true && typeof ele === "string")
              ele = `{${ele}}`;
            result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
          }
        }
      }
      return utils.flatten(result);
    };
    var expand = (ast, options = {}) => {
      let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
      let walk = (node, parent = {}) => {
        node.queue = [];
        let p = parent;
        let q = parent.queue;
        while (p.type !== "brace" && p.type !== "root" && p.parent) {
          p = p.parent;
          q = p.queue;
        }
        if (node.invalid || node.dollar) {
          q.push(append(q.pop(), stringify(node, options)));
          return;
        }
        if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
          q.push(append(q.pop(), ["{}"]));
          return;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils.reduce(node.nodes);
          if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
            throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
          }
          let range = fill(...args, options);
          if (range.length === 0) {
            range = stringify(node, options);
          }
          q.push(append(q.pop(), range));
          node.nodes = [];
          return;
        }
        let enclose = utils.encloseBrace(node);
        let queue = node.queue;
        let block = node;
        while (block.type !== "brace" && block.type !== "root" && block.parent) {
          block = block.parent;
          queue = block.queue;
        }
        for (let i = 0; i < node.nodes.length; i++) {
          let child = node.nodes[i];
          if (child.type === "comma" && node.type === "brace") {
            if (i === 1)
              queue.push("");
            queue.push("");
            continue;
          }
          if (child.type === "close") {
            q.push(append(q.pop(), queue, enclose));
            continue;
          }
          if (child.value && child.type !== "open") {
            queue.push(append(queue.pop(), child.value));
            continue;
          }
          if (child.nodes) {
            walk(child, node);
          }
        }
        return queue;
      };
      return utils.flatten(walk(ast));
    };
    module2.exports = expand;
  }
});

// node_modules/braces/lib/constants.js
var require_constants = __commonJS({
  "node_modules/braces/lib/constants.js"(exports, module2) {
    "use strict";
    module2.exports = {
      MAX_LENGTH: 1024 * 64,
      CHAR_0: "0",
      CHAR_9: "9",
      CHAR_UPPERCASE_A: "A",
      CHAR_LOWERCASE_A: "a",
      CHAR_UPPERCASE_Z: "Z",
      CHAR_LOWERCASE_Z: "z",
      CHAR_LEFT_PARENTHESES: "(",
      CHAR_RIGHT_PARENTHESES: ")",
      CHAR_ASTERISK: "*",
      CHAR_AMPERSAND: "&",
      CHAR_AT: "@",
      CHAR_BACKSLASH: "\\",
      CHAR_BACKTICK: "`",
      CHAR_CARRIAGE_RETURN: "\r",
      CHAR_CIRCUMFLEX_ACCENT: "^",
      CHAR_COLON: ":",
      CHAR_COMMA: ",",
      CHAR_DOLLAR: "$",
      CHAR_DOT: ".",
      CHAR_DOUBLE_QUOTE: '"',
      CHAR_EQUAL: "=",
      CHAR_EXCLAMATION_MARK: "!",
      CHAR_FORM_FEED: "\f",
      CHAR_FORWARD_SLASH: "/",
      CHAR_HASH: "#",
      CHAR_HYPHEN_MINUS: "-",
      CHAR_LEFT_ANGLE_BRACKET: "<",
      CHAR_LEFT_CURLY_BRACE: "{",
      CHAR_LEFT_SQUARE_BRACKET: "[",
      CHAR_LINE_FEED: "\n",
      CHAR_NO_BREAK_SPACE: "\xA0",
      CHAR_PERCENT: "%",
      CHAR_PLUS: "+",
      CHAR_QUESTION_MARK: "?",
      CHAR_RIGHT_ANGLE_BRACKET: ">",
      CHAR_RIGHT_CURLY_BRACE: "}",
      CHAR_RIGHT_SQUARE_BRACKET: "]",
      CHAR_SEMICOLON: ";",
      CHAR_SINGLE_QUOTE: "'",
      CHAR_SPACE: " ",
      CHAR_TAB: "	",
      CHAR_UNDERSCORE: "_",
      CHAR_VERTICAL_LINE: "|",
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
    };
  }
});

// node_modules/braces/lib/parse.js
var require_parse = __commonJS({
  "node_modules/braces/lib/parse.js"(exports, module2) {
    "use strict";
    var stringify = require_stringify();
    var {
      MAX_LENGTH,
      CHAR_BACKSLASH,
      CHAR_BACKTICK,
      CHAR_COMMA,
      CHAR_DOT,
      CHAR_LEFT_PARENTHESES,
      CHAR_RIGHT_PARENTHESES,
      CHAR_LEFT_CURLY_BRACE,
      CHAR_RIGHT_CURLY_BRACE,
      CHAR_LEFT_SQUARE_BRACKET,
      CHAR_RIGHT_SQUARE_BRACKET,
      CHAR_DOUBLE_QUOTE,
      CHAR_SINGLE_QUOTE,
      CHAR_NO_BREAK_SPACE,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE
    } = require_constants();
    var parse = (input, options = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      let opts = options || {};
      let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      if (input.length > max) {
        throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
      }
      let ast = { type: "root", input, nodes: [] };
      let stack = [ast];
      let block = ast;
      let prev = ast;
      let brackets = 0;
      let length = input.length;
      let index = 0;
      let depth = 0;
      let value;
      let memo = {};
      const advance = () => input[index++];
      const push = (node) => {
        if (node.type === "text" && prev.type === "dot") {
          prev.type = "text";
        }
        if (prev && prev.type === "text" && node.type === "text") {
          prev.value += node.value;
          return;
        }
        block.nodes.push(node);
        node.parent = block;
        node.prev = prev;
        prev = node;
        return node;
      };
      push({ type: "bos" });
      while (index < length) {
        block = stack[stack.length - 1];
        value = advance();
        if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
          continue;
        }
        if (value === CHAR_BACKSLASH) {
          push({ type: "text", value: (options.keepEscaping ? value : "") + advance() });
          continue;
        }
        if (value === CHAR_RIGHT_SQUARE_BRACKET) {
          push({ type: "text", value: "\\" + value });
          continue;
        }
        if (value === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          let closed = true;
          let next;
          while (index < length && (next = advance())) {
            value += next;
            if (next === CHAR_LEFT_SQUARE_BRACKET) {
              brackets++;
              continue;
            }
            if (next === CHAR_BACKSLASH) {
              value += advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              brackets--;
              if (brackets === 0) {
                break;
              }
            }
          }
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_PARENTHESES) {
          block = push({ type: "paren", nodes: [] });
          stack.push(block);
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_RIGHT_PARENTHESES) {
          if (block.type !== "paren") {
            push({ type: "text", value });
            continue;
          }
          block = stack.pop();
          push({ type: "text", value });
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
          let open = value;
          let next;
          if (options.keepQuotes !== true) {
            value = "";
          }
          while (index < length && (next = advance())) {
            if (next === CHAR_BACKSLASH) {
              value += next + advance();
              continue;
            }
            if (next === open) {
              if (options.keepQuotes === true)
                value += next;
              break;
            }
            value += next;
          }
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_CURLY_BRACE) {
          depth++;
          let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
          let brace = {
            type: "brace",
            open: true,
            close: false,
            dollar,
            depth,
            commas: 0,
            ranges: 0,
            nodes: []
          };
          block = push(brace);
          stack.push(block);
          push({ type: "open", value });
          continue;
        }
        if (value === CHAR_RIGHT_CURLY_BRACE) {
          if (block.type !== "brace") {
            push({ type: "text", value });
            continue;
          }
          let type = "close";
          block = stack.pop();
          block.close = true;
          push({ type, value });
          depth--;
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_COMMA && depth > 0) {
          if (block.ranges > 0) {
            block.ranges = 0;
            let open = block.nodes.shift();
            block.nodes = [open, { type: "text", value: stringify(block) }];
          }
          push({ type: "comma", value });
          block.commas++;
          continue;
        }
        if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
          let siblings = block.nodes;
          if (depth === 0 || siblings.length === 0) {
            push({ type: "text", value });
            continue;
          }
          if (prev.type === "dot") {
            block.range = [];
            prev.value += value;
            prev.type = "range";
            if (block.nodes.length !== 3 && block.nodes.length !== 5) {
              block.invalid = true;
              block.ranges = 0;
              prev.type = "text";
              continue;
            }
            block.ranges++;
            block.args = [];
            continue;
          }
          if (prev.type === "range") {
            siblings.pop();
            let before = siblings[siblings.length - 1];
            before.value += prev.value + value;
            prev = before;
            block.ranges--;
            continue;
          }
          push({ type: "dot", value });
          continue;
        }
        push({ type: "text", value });
      }
      do {
        block = stack.pop();
        if (block.type !== "root") {
          block.nodes.forEach((node) => {
            if (!node.nodes) {
              if (node.type === "open")
                node.isOpen = true;
              if (node.type === "close")
                node.isClose = true;
              if (!node.nodes)
                node.type = "text";
              node.invalid = true;
            }
          });
          let parent = stack[stack.length - 1];
          let index2 = parent.nodes.indexOf(block);
          parent.nodes.splice(index2, 1, ...block.nodes);
        }
      } while (stack.length > 0);
      push({ type: "eos" });
      return ast;
    };
    module2.exports = parse;
  }
});

// node_modules/braces/index.js
var require_braces = __commonJS({
  "node_modules/braces/index.js"(exports, module2) {
    "use strict";
    var stringify = require_stringify();
    var compile = require_compile();
    var expand = require_expand();
    var parse = require_parse();
    var braces = (input, options = {}) => {
      let output = [];
      if (Array.isArray(input)) {
        for (let pattern of input) {
          let result = braces.create(pattern, options);
          if (Array.isArray(result)) {
            output.push(...result);
          } else {
            output.push(result);
          }
        }
      } else {
        output = [].concat(braces.create(input, options));
      }
      if (options && options.expand === true && options.nodupes === true) {
        output = [...new Set(output)];
      }
      return output;
    };
    braces.parse = (input, options = {}) => parse(input, options);
    braces.stringify = (input, options = {}) => {
      if (typeof input === "string") {
        return stringify(braces.parse(input, options), options);
      }
      return stringify(input, options);
    };
    braces.compile = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      return compile(input, options);
    };
    braces.expand = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      let result = expand(input, options);
      if (options.noempty === true) {
        result = result.filter(Boolean);
      }
      if (options.nodupes === true) {
        result = [...new Set(result)];
      }
      return result;
    };
    braces.create = (input, options = {}) => {
      if (input === "" || input.length < 3) {
        return [input];
      }
      return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
    };
    module2.exports = braces;
  }
});

// node_modules/picomatch/lib/constants.js
var require_constants2 = __commonJS({
  "node_modules/picomatch/lib/constants.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR = `${QMARK}*?`;
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module2.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      CHAR_0: 48,
      CHAR_9: 57,
      CHAR_UPPERCASE_A: 65,
      CHAR_LOWERCASE_A: 97,
      CHAR_UPPERCASE_Z: 90,
      CHAR_LOWERCASE_Z: 122,
      CHAR_LEFT_PARENTHESES: 40,
      CHAR_RIGHT_PARENTHESES: 41,
      CHAR_ASTERISK: 42,
      CHAR_AMPERSAND: 38,
      CHAR_AT: 64,
      CHAR_BACKWARD_SLASH: 92,
      CHAR_CARRIAGE_RETURN: 13,
      CHAR_CIRCUMFLEX_ACCENT: 94,
      CHAR_COLON: 58,
      CHAR_COMMA: 44,
      CHAR_DOT: 46,
      CHAR_DOUBLE_QUOTE: 34,
      CHAR_EQUAL: 61,
      CHAR_EXCLAMATION_MARK: 33,
      CHAR_FORM_FEED: 12,
      CHAR_FORWARD_SLASH: 47,
      CHAR_GRAVE_ACCENT: 96,
      CHAR_HASH: 35,
      CHAR_HYPHEN_MINUS: 45,
      CHAR_LEFT_ANGLE_BRACKET: 60,
      CHAR_LEFT_CURLY_BRACE: 123,
      CHAR_LEFT_SQUARE_BRACKET: 91,
      CHAR_LINE_FEED: 10,
      CHAR_NO_BREAK_SPACE: 160,
      CHAR_PERCENT: 37,
      CHAR_PLUS: 43,
      CHAR_QUESTION_MARK: 63,
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      CHAR_RIGHT_CURLY_BRACE: 125,
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      CHAR_SEMICOLON: 59,
      CHAR_SINGLE_QUOTE: 39,
      CHAR_SPACE: 32,
      CHAR_TAB: 9,
      CHAR_UNDERSCORE: 95,
      CHAR_VERTICAL_LINE: 124,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      SEP: path.sep,
      extglobChars(chars) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      globChars(win32) {
        return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// node_modules/picomatch/lib/utils.js
var require_utils2 = __commonJS({
  "node_modules/picomatch/lib/utils.js"(exports) {
    "use strict";
    var path = require("path");
    var win32 = process.platform === "win32";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants2();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports.isWindows = (options) => {
      if (options && typeof options.windows === "boolean") {
        return options.windows;
      }
      return win32 === true || path.sep === "\\";
    };
    exports.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1)
        return input;
      if (input[idx - 1] === "\\")
        return exports.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input, state = {}, options = {}) => {
      const prepend = options.contains ? "" : "^";
      const append = options.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  }
});

// node_modules/picomatch/lib/scan.js
var require_scan = __commonJS({
  "node_modules/picomatch/lib/scan.js"(exports, module2) {
    "use strict";
    var utils = require_utils2();
    var {
      CHAR_ASTERISK,
      CHAR_AT,
      CHAR_BACKWARD_SLASH,
      CHAR_COMMA,
      CHAR_DOT,
      CHAR_EXCLAMATION_MARK,
      CHAR_FORWARD_SLASH,
      CHAR_LEFT_CURLY_BRACE,
      CHAR_LEFT_PARENTHESES,
      CHAR_LEFT_SQUARE_BRACKET,
      CHAR_PLUS,
      CHAR_QUESTION_MARK,
      CHAR_RIGHT_CURLY_BRACE,
      CHAR_RIGHT_PARENTHESES,
      CHAR_RIGHT_SQUARE_BRACKET
    } = require_constants2();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options) => {
      const opts = options || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob = false;
      let isExtglob = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index >= length;
      const peek = () => str.charCodeAt(index + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index);
      };
      while (index < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE) {
              braces--;
              if (braces === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH) {
          slashes.push(index);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true)
            continue;
          if (prev === CHAR_DOT && index === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            isExtglob = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  isGlob = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK)
            isGlobstar = token.isGlobstar = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              isBracket = token.isBracket = true;
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
      }
      let base = str;
      let prefix = "";
      let glob = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
      } else if (isGlob === true) {
        base = "";
        glob = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob)
          glob = utils.removeBackslashes(glob);
        if (base && backslashes === true) {
          base = utils.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob,
        isBrace,
        isBracket,
        isGlob,
        isExtglob,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value = input.slice(n, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value !== "") {
            parts.push(value);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value = input.slice(prevIndex + 1);
          parts.push(value);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module2.exports = scan;
  }
});

// node_modules/picomatch/lib/parse.js
var require_parse2 = __commonJS({
  "node_modules/picomatch/lib/parse.js"(exports, module2) {
    "use strict";
    var constants = require_constants2();
    var utils = require_utils2();
    var {
      MAX_LENGTH,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants;
    var expandRange = (args, options) => {
      if (typeof options.expandRange === "function") {
        return options.expandRange(...args, options);
      }
      args.sort();
      const value = `[${args.join("-")}]`;
      try {
        new RegExp(value);
      } catch (ex) {
        return args.map((v) => utils.escapeRegex(v)).join("..");
      }
      return value;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const win32 = utils.isWindows(options);
      const PLATFORM_CHARS = constants.globChars(win32);
      const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces = [];
      const stack = [];
      let prev = bos;
      let value;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n = 1) => input[state.index + n];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value2 = "", num = 0) => {
        state.consumed += value2;
        state.index += num;
      };
      const append = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output)
          append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.value += tok.value;
          prev.output = (prev.output || "") + tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value2) => {
        const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
        push({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            output = token.close = `)${rest})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push({ type: "paren", extglob: true, value, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
          if (first === "\\") {
            backslashes = true;
            return m;
          }
          if (first === "?") {
            if (esc) {
              return esc + first + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars.length);
          }
          if (first === ".") {
            return DOT_LITERAL.repeat(chars.length);
          }
          if (first === "*") {
            if (esc) {
              return esc + first + (rest ? star : "");
            }
            return star;
          }
          return esc ? m : `\\${m}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m) => {
              return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils.wrapOutput(output, state, options);
        return state;
      }
      while (!eos()) {
        value = advance();
        if (value === "\0") {
          continue;
        }
        if (value === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value += "\\";
            push({ type: "text", value });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value += "\\";
            }
          }
          if (opts.unescape === true) {
            value = advance();
          } else {
            value += advance();
          }
          if (state.brackets === 0) {
            push({ type: "text", value });
            continue;
          }
        }
        if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix = POSIX_REGEX_SOURCE[rest2];
                if (posix) {
                  prev.value = pre + posix;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
            value = `\\${value}`;
          }
          if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
            value = `\\${value}`;
          }
          if (opts.posix === true && value === "!" && prev.value === "[") {
            value = "^";
          }
          prev.value += value;
          append({ value });
          continue;
        }
        if (state.quotes === 1 && value !== '"') {
          value = utils.escapeRegex(value);
          prev.value += value;
          append({ value });
          continue;
        }
        if (value === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push({ type: "text", value });
          }
          continue;
        }
        if (value === "(") {
          increment("parens");
          push({ type: "paren", value });
          continue;
        }
        if (value === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value = `\\${value}`;
          } else {
            increment("brackets");
          }
          push({ type: "bracket", value });
          continue;
        }
        if (value === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value = `/${value}`;
          }
          prev.value += value;
          append({ value });
          if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped = utils.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped;
            prev.value = escaped;
            continue;
          }
          prev.value = `(${capture}${escaped}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value === "{" && opts.nobrace !== true) {
          increment("braces");
          const open = {
            type: "brace",
            value,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces.push(open);
          push(open);
          continue;
        }
        if (value === "}") {
          const brace = braces[braces.length - 1];
          if (opts.nobrace === true || !brace) {
            push({ type: "text", value, output: value });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range.unshift(arr[i].value);
              }
            }
            output = expandRange(range, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value = output = "\\}";
            state.output = out;
            for (const t of toks) {
              state.output += t.output || t.value;
            }
          }
          push({ type: "brace", value, output });
          decrement("braces");
          braces.pop();
          continue;
        }
        if (value === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push({ type: "text", value });
          continue;
        }
        if (value === ",") {
          let output = value;
          const brace = braces[braces.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push({ type: "comma", value, output });
          continue;
        }
        if (value === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push({ type: "slash", value, output: SLASH_LITERAL });
          continue;
        }
        if (value === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".")
              prev.output = DOT_LITERAL;
            const brace = braces[braces.length - 1];
            prev.type = "dots";
            prev.output += value;
            prev.value += value;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push({ type: "text", value, output: DOT_LITERAL });
            continue;
          }
          push({ type: "dot", value, output: DOT_LITERAL });
          continue;
        }
        if (value === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value;
            if (next === "<" && !utils.supportsLookbehinds()) {
              throw new Error("Node.js v10 or higher is required for regex lookbehinds");
            }
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value}`;
            }
            push({ type: "text", value, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push({ type: "qmark", value, output: QMARK_NO_DOT });
            continue;
          }
          push({ type: "qmark", value, output: QMARK });
          continue;
        }
        if (value === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push({ type: "plus", value, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push({ type: "plus", value });
            continue;
          }
          push({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push({ type: "at", extglob: true, value, output: "" });
            continue;
          }
          push({ type: "text", value });
          continue;
        }
        if (value !== "*") {
          if (value === "$" || value === "^") {
            value = `\\${value}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value += match[0];
            state.index += match[0].length;
          }
          push({ type: "text", value });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push({ type: "star", value, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
            push({ type: "star", value, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value;
          state.output += prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        const token = { type: "star", value, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value;
          push(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse.fastpaths = (input, options) => {
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const win32 = utils.isWindows(options);
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR,
        START_ANCHOR
      } = constants.globChars(win32);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true)
          return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match)
              return;
            const source2 = create(match[1]);
            if (!source2)
              return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module2.exports = parse;
  }
});

// node_modules/picomatch/lib/picomatch.js
var require_picomatch = __commonJS({
  "node_modules/picomatch/lib/picomatch.js"(exports, module2) {
    "use strict";
    var path = require("path");
    var scan = require_scan();
    var parse = require_parse2();
    var utils = require_utils2();
    var constants = require_constants2();
    var isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch = (glob, options, returnState = false) => {
      if (Array.isArray(glob)) {
        const fns = glob.map((input) => picomatch(input, options, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch of fns) {
            const state2 = isMatch(str);
            if (state2)
              return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject(glob) && glob.tokens && glob.input;
      if (glob === "" || typeof glob !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options || {};
      const posix = utils.isWindows(options);
      const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
        const result = { glob, state, regex, posix, input, output, match, isMatch };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch.test = (input, regex, options, { glob, posix } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options || {};
      const format = opts.format || (posix ? utils.toPosixSlashes : null);
      let match = input === glob;
      let output = match && format ? format(input) : input;
      if (match === false) {
        output = format ? format(input) : input;
        match = output === glob;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch.matchBase(input, regex, options, posix);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
      const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
      return regex.test(path.basename(input));
    };
    picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    picomatch.parse = (pattern, options) => {
      if (Array.isArray(pattern))
        return pattern.map((p) => picomatch.parse(p, options));
      return parse(pattern, { ...options, fastpaths: false });
    };
    picomatch.scan = (input, options) => scan(input, options);
    picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options || {};
      const prepend = opts.contains ? "" : "^";
      const append = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch.toRegex(source, options);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse.fastpaths(input, options);
      }
      if (!parsed.output) {
        parsed = parse(input, options);
      }
      return picomatch.compileRe(parsed, options, returnOutput, returnState);
    };
    picomatch.toRegex = (source, options) => {
      try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err) {
        if (options && options.debug === true)
          throw err;
        return /$^/;
      }
    };
    picomatch.constants = constants;
    module2.exports = picomatch;
  }
});

// node_modules/picomatch/index.js
var require_picomatch2 = __commonJS({
  "node_modules/picomatch/index.js"(exports, module2) {
    "use strict";
    module2.exports = require_picomatch();
  }
});

// node_modules/micromatch/index.js
var require_micromatch = __commonJS({
  "node_modules/micromatch/index.js"(exports, module2) {
    "use strict";
    var util = require("util");
    var braces = require_braces();
    var picomatch = require_picomatch2();
    var utils = require_utils2();
    var isEmptyString = (val) => val === "" || val === "./";
    var micromatch2 = (list, patterns, options) => {
      patterns = [].concat(patterns);
      list = [].concat(list);
      let omit = new Set();
      let keep = new Set();
      let items = new Set();
      let negatives = 0;
      let onResult = (state) => {
        items.add(state.output);
        if (options && options.onResult) {
          options.onResult(state);
        }
      };
      for (let i = 0; i < patterns.length; i++) {
        let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
        let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
        if (negated)
          negatives++;
        for (let item of list) {
          let matched = isMatch(item, true);
          let match = negated ? !matched.isMatch : matched.isMatch;
          if (!match)
            continue;
          if (negated) {
            omit.add(matched.output);
          } else {
            omit.delete(matched.output);
            keep.add(matched.output);
          }
        }
      }
      let result = negatives === patterns.length ? [...items] : [...keep];
      let matches = result.filter((item) => !omit.has(item));
      if (options && matches.length === 0) {
        if (options.failglob === true) {
          throw new Error(`No matches found for "${patterns.join(", ")}"`);
        }
        if (options.nonull === true || options.nullglob === true) {
          return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
        }
      }
      return matches;
    };
    micromatch2.match = micromatch2;
    micromatch2.matcher = (pattern, options) => picomatch(pattern, options);
    micromatch2.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    micromatch2.any = micromatch2.isMatch;
    micromatch2.not = (list, patterns, options = {}) => {
      patterns = [].concat(patterns).map(String);
      let result = new Set();
      let items = [];
      let onResult = (state) => {
        if (options.onResult)
          options.onResult(state);
        items.push(state.output);
      };
      let matches = micromatch2(list, patterns, { ...options, onResult });
      for (let item of items) {
        if (!matches.includes(item)) {
          result.add(item);
        }
      }
      return [...result];
    };
    micromatch2.contains = (str, pattern, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      if (Array.isArray(pattern)) {
        return pattern.some((p) => micromatch2.contains(str, p, options));
      }
      if (typeof pattern === "string") {
        if (isEmptyString(str) || isEmptyString(pattern)) {
          return false;
        }
        if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
          return true;
        }
      }
      return micromatch2.isMatch(str, pattern, { ...options, contains: true });
    };
    micromatch2.matchKeys = (obj, patterns, options) => {
      if (!utils.isObject(obj)) {
        throw new TypeError("Expected the first argument to be an object");
      }
      let keys = micromatch2(Object.keys(obj), patterns, options);
      let res = {};
      for (let key of keys)
        res[key] = obj[key];
      return res;
    };
    micromatch2.some = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (items.some((item) => isMatch(item))) {
          return true;
        }
      }
      return false;
    };
    micromatch2.every = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (!items.every((item) => isMatch(item))) {
          return false;
        }
      }
      return true;
    };
    micromatch2.all = (str, patterns, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      return [].concat(patterns).every((p) => picomatch(p, options)(str));
    };
    micromatch2.capture = (glob, input, options) => {
      let posix = utils.isWindows(options);
      let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
      let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
      if (match) {
        return match.slice(1).map((v) => v === void 0 ? "" : v);
      }
    };
    micromatch2.makeRe = (...args) => picomatch.makeRe(...args);
    micromatch2.scan = (...args) => picomatch.scan(...args);
    micromatch2.parse = (patterns, options) => {
      let res = [];
      for (let pattern of [].concat(patterns || [])) {
        for (let str of braces(String(pattern), options)) {
          res.push(picomatch.parse(str, options));
        }
      }
      return res;
    };
    micromatch2.braces = (pattern, options) => {
      if (typeof pattern !== "string")
        throw new TypeError("Expected a string");
      if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
        return [pattern];
      }
      return braces(pattern, options);
    };
    micromatch2.braceExpand = (pattern, options) => {
      if (typeof pattern !== "string")
        throw new TypeError("Expected a string");
      return micromatch2.braces(pattern, { ...options, expand: true });
    };
    module2.exports = micromatch2;
  }
});

// src/main.ts
__export(exports, {
  default: () => TopicLinkingPlugin
});
var import_obsidian5 = __toModule(require("obsidian"));

// src/settings.ts
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  generatedPath: "Generated/",
  pdfPath: "PDFs/",
  pdfOverwrite: false,
  pdfExtractFileNumberLimit: 0,
  pdfExtractFileSizeLimit: 5e3,
  pdfExtractChunkIfFileExceedsLimit: true,
  bookmarkPath: "Bookmarks/",
  bookmarkOverwrite: false,
  topicPathPattern: "Generated/",
  topicSearchPattern: "",
  topicTagPattern: "",
  numTopics: 5,
  numWords: 5,
  stemming: false,
  topicThreshold: 0.5,
  fixedWordLength: 1e3,
  percentageTextToScan: 5,
  wordSelectionRandom: true,
  topicIncludePattern: false,
  topicIncludeTimestamp: false,
  ldaIterations: 1e3,
  ldaBurnIn: 100,
  ldaThin: 10
};
var TopicLinkingSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Topic Link Plugin" });
    containerEl.createEl("h3", { text: "General" });
    new import_obsidian.Setting(containerEl).setName("Generated files").setDesc("Where to output generated files").addText((text) => {
      text.setPlaceholder("Generated/").setValue(this.plugin.settings.generatedPath.toString()).onChange(async (value) => {
        this.plugin.settings.generatedPath = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "PDF Extraction Settings" });
    new import_obsidian.Setting(containerEl).setName("PDF files").setDesc("Where to find PDF files").addText((text) => {
      text.setPlaceholder("PDFs/").setValue(this.plugin.settings.pdfPath.toString()).onChange(async (value) => {
        this.plugin.settings.pdfPath = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Overwrite").setDesc("Overwrite Markdown file if it already exists").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.pdfOverwrite).onChange(async (value) => {
        this.plugin.settings.pdfOverwrite = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Limit file number").setDesc("Enter the number of files to limit PDF extraction (use when 'PDF Overwrite' is false). '0' means no limit.").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("0-100").setValue(this.plugin.settings.pdfExtractFileNumberLimit.toString()).onChange(async (value) => {
        this.plugin.settings.pdfExtractFileNumberLimit = Math.min(Math.max(parseInt(value), 0), 1e3);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Limit file size").setDesc("Enter the maximum file size (in KB) to process (0 means any size).").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("0-100000").setValue(this.plugin.settings.pdfExtractFileSizeLimit.toString()).onChange(async (value) => {
        this.plugin.settings.pdfExtractFileSizeLimit = Math.min(Math.max(parseInt(value), 0), 1e5);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Chunk file if size exceeds limit").setDesc("Chunks, or breaks down the resulting file if it exceeds *Limit file size*.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.pdfExtractChunkIfFileExceedsLimit).onChange(async (value) => {
        this.plugin.settings.pdfExtractChunkIfFileExceedsLimit = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "Bookmark Extraction Settings" });
    new import_obsidian.Setting(containerEl).setName("Bookmark files").setDesc("Where to find Bookmark files").addText((text) => {
      text.setPlaceholder("Bookmarks/").setValue(this.plugin.settings.bookmarkPath.toString()).onChange(async (value) => {
        this.plugin.settings.bookmarkPath = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Overwrite").setDesc("Overwrite Markdown file if it already exists").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.bookmarkOverwrite).onChange(async (value) => {
        this.plugin.settings.bookmarkOverwrite = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h3", { text: "Topic Linking Settings" });
    containerEl.createEl("h4", { text: "General Parameters" });
    new import_obsidian.Setting(containerEl).setName("Number of topics").setDesc("Enter the number of topics to generate.").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("1-10").setValue(this.plugin.settings.numTopics.toString()).onChange(async (value) => {
        this.plugin.settings.numTopics = Math.min(Math.max(parseInt(value), 1), 10);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Number of words").setDesc("Enter the number of words per topic to capture.").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("1-20").setValue(this.plugin.settings.numWords.toString()).onChange(async (value) => {
        this.plugin.settings.numWords = Math.min(Math.max(parseInt(value), 1), 20);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Stemming").setDesc("Select whether tokens should be stemmed before analysis.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.stemming).onChange(async (value) => {
        this.plugin.settings.stemming = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Topic threshold").setDesc("Enter the threshold (between 0 and 1) for a document to be relevant to a topic").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("0.0-1.0").setValue(this.plugin.settings.topicThreshold.toString()).onChange(async (value) => {
        this.plugin.settings.topicThreshold = Math.min(Math.max(parseFloat(value), 0), 1);
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h4", { text: "Conditions" });
    new import_obsidian.Setting(containerEl).setName("Topc extraction file match").setDesc("Enter a pattern to match Markdown files for topic extraction.").addText((text) => {
      text.setPlaceholder("Generated/").setValue(this.plugin.settings.topicPathPattern.toString()).onChange(async (value) => {
        this.plugin.settings.topicPathPattern = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Topc extraction search match").setDesc("Enter a search expression that files must contain to be included in topic extraction.").addText((text) => {
      text.setPlaceholder("").setValue(this.plugin.settings.topicSearchPattern.toString()).onChange(async (value) => {
        this.plugin.settings.topicSearchPattern = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Topc extraction tag match").setDesc('Enter a series of tags (in the format "#fashion #photography") which must be included at least once in matching files.').addText((text) => {
      text.setPlaceholder("").setValue(this.plugin.settings.topicTagPattern.toString()).onChange(async (value) => {
        this.plugin.settings.topicTagPattern = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h4", { text: "Source Text Filtering" });
    new import_obsidian.Setting(containerEl).setName("Fixed number of words").setDesc("Enter the number of words to extract from the text. Overrides 'Percentage of Total Text' below.").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("0-5000").setValue(this.plugin.settings.fixedWordLength.toString()).onChange(async (value) => {
        this.plugin.settings.fixedWordLength = Math.min(Math.max(parseInt(value), 0), 5e3);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Percentage of total text").setDesc("Enter the percentage of the total text to scan. ").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("1-100").setValue(this.plugin.settings.percentageTextToScan.toString()).onChange(async (value) => {
        this.plugin.settings.percentageTextToScan = Math.min(Math.max(parseInt(value), 1), 100);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Randomise text").setDesc('Select whether the text selection should be randomised ("false" means the text is scanned from the beginning).').addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.wordSelectionRandom).onChange(async (value) => {
        this.plugin.settings.wordSelectionRandom = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h4", { text: "Topic Folder Naming" });
    new import_obsidian.Setting(containerEl).setName("Topic folder pattern").setDesc("Select whether the topic folder should include the Markdown search pattern.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.topicIncludePattern).onChange(async (value) => {
        this.plugin.settings.topicIncludePattern = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Topic folder timestamp").setDesc('Select whether the topic folder should have a timestamp included (note this can lead to a large number of "Topic-YYYYMMSShhmmss" folders).').addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.topicIncludeTimestamp).onChange(async (value) => {
        this.plugin.settings.topicIncludeTimestamp = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("h4", { text: "LDA (Latent Dirichet Allocation) Parameters" });
    new import_obsidian.Setting(containerEl).setName("LDA iterations").setDesc("Enter the number of iterations to fit the LDA model").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("100-5000").setValue(this.plugin.settings.ldaIterations.toString()).onChange(async (value) => {
        this.plugin.settings.ldaIterations = Math.min(Math.max(parseInt(value), 100), 5e3);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("LDA burn in").setDesc("Enter the number of estimates to discard at the first iteration").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("10-500").setValue(this.plugin.settings.ldaBurnIn.toString()).onChange(async (value) => {
        this.plugin.settings.ldaBurnIn = Math.min(Math.max(parseInt(value), 10), 500);
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("LDA thin").setDesc("Enter the number of estimates to discard at every other iteration").addText((text) => {
      text.inputEl.setAttribute("type", "number");
      text.setPlaceholder("1-100").setValue(this.plugin.settings.ldaThin.toString()).onChange(async (value) => {
        this.plugin.settings.ldaThin = Math.min(Math.max(parseInt(value), 1), 100);
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/pdf.ts
var import_obsidian2 = __toModule(require("obsidian"));
var PDFContentExtractor = class {
  constructor() {
    this.getContent = async (vault, file, counter) => {
      const pages = [];
      try {
        const buffer = await vault.readBinary(file);
        const pdf = await this.pdfjs.getDocument(buffer).promise;
        console.log(`Loading file num ${counter} at ${file.basename}, with: ${pdf.numPages} pages and size: ${file.stat.size / 1e3}KB.`);
        for (let i = 0; i < pdf.numPages; i++) {
          const page = await pdf.getPage(i + 1);
          const textContent = await page.getTextContent();
          const operators = await page.getOperatorList();
          const objs = page.commonObjs._objs;
          pages.push({ textContent, commonObjs: objs });
        }
      } catch (err) {
        console.log(`Error ${err} loading ${file.path}.`);
      }
      return pages;
    };
    this.subPathFactory = (file, offset) => {
      if (file.path.length > offset && file.path.lastIndexOf("/") > -1)
        return file.path.substring(0, file.path.lastIndexOf("/") + 1).substring(offset);
      else
        return "";
    };
    this.makeSubFolders = (vault, files) => {
      files.map(async (file) => {
        const subPath = this.subPathFactory(file, this.pdfPath.length);
        if (subPath.length > 0) {
          try {
            const folderLoc = (0, import_obsidian2.normalizePath)(`${this.generatedPath}${subPath}`);
            await vault.createFolder(folderLoc);
          } catch (err) {
          }
        }
      });
    };
    this.chunkSubstring = (str, num) => {
      const sizeChunks = Math.ceil(str.length / num);
      const chunks = new Array(num);
      for (let i = 0, o = 0; i < num; ++i, o += sizeChunks) {
        chunks[i] = str.substring(o, o + sizeChunks);
      }
      return chunks;
    };
    this.processPDF = async (vault, settings, file, fileCounter) => {
      const pages = await this.getContent(vault, file, fileCounter);
      const subPath = this.subPathFactory(file, this.pdfPath.length);
      let minH = -1, maxH = -1, totalH = 0, counterH = 0, meanH = 0;
      pages.forEach((page) => {
        const textContent = page.textContent;
        const commonObja = page.commonObjs;
        textContent.items.forEach((item) => {
          const { str, height } = item;
          if (str.trim().length > 0) {
            if (height > maxH)
              maxH = height;
            if (height < minH || minH == -1)
              minH = height;
            totalH += height;
            counterH++;
          }
        });
      });
      meanH = totalH / counterH;
      const markdownStrings = [];
      let counter = 0;
      let strL = "", widthL = 0, heightL = 0, transformL = [], fontNameL = "", hasEOLL = false;
      let leftMarginL = 0;
      let yCoordL = 0, yCoordLL = 0;
      let strLL = "", widthLL = 0, heightLL = 0, transformLL = [], fontNameLL = "", hasEOLLL = false;
      let pageCounter = 0;
      for (let j = 0; j < pages.length; j++) {
        const page = pages[j];
        const textContent = page.textContent;
        const commonObjs = page.commonObjs;
        let inCode = false;
        let newLine = true;
        let blockquote = false;
        const treatEOLasNewLine = false;
        for (let i = 0; i < textContent.items.length; i++) {
          const item = textContent.items[i];
          let markdownText = "";
          let { str } = item;
          const { dir, width, height, transform, fontName, hasEOL } = item;
          let leftMargin = parseFloat(transform[4]);
          let yCoord = parseFloat(transform[5]);
          let italicised = false, bolded = false;
          const font = commonObjs[fontName];
          if (font) {
            const fontDataName = font.data.name;
            italicised = fontDataName.indexOf("Italic") > -1;
            bolded = fontDataName.indexOf("Bold") > -1;
          }
          const leadingSpace = str.startsWith(" ") ? " " : "";
          const trailingSpace = str.endsWith(" ") ? " " : "";
          if (italicised && str.trim().length > 0)
            str = `*${str.trim()}*${trailingSpace}`;
          else if (bolded && str.trim().length > 0)
            str = `**${str.trim()}**${trailingSpace}`;
          let yDiff = 0;
          let yDiff2 = 0;
          if (transformL.length > 0)
            yDiff = yCoordL - yCoord;
          if (transformLL.length > 0)
            yDiff2 = yCoordLL - yCoord;
          if (height > 0 && height < meanH && i > 0 && leftMargin > leftMarginL) {
            const diffH = height / meanH - 1;
            if (hasEOLL) {
              if (diffH < -0.2 && !blockquote) {
                blockquote = true;
                markdownText += `

> `;
              }
            } else if (!blockquote) {
              str = `${leadingSpace}[${str.trim()}]${trailingSpace}`;
            }
          } else if (blockquote && str.trim().length > 0 && strL.trim().length === 0) {
            blockquote = false;
            markdownText += `

`;
          }
          if ((str.indexOf("//=>") == 0 || str.indexOf("=>") == 0 || str.indexOf(">>") == 0) && !inCode && newLine) {
            markdownText += "`" + str;
            inCode = true;
            newLine = false;
          } else if (strL.trim() != "" && hasEOLL && heightL == height) {
            if (strL.endsWith("-")) {
              newLine = false;
            } else if (!blockquote && Math.floor(widthL) != Math.floor(width) && (treatEOLasNewLine && hasEOL || strL.substring(strL.length - 1).match(/[\u{2019}?.:-]/u) != null)) {
              if (blockquote) {
                markdownStrings[counter - 1] = markdownStrings[counter - 1] + "\n";
              } else if (i > 0) {
                const lines = Math.floor(yDiff / height);
                let linePadding = "\n".repeat(lines);
                if (lines > 0 && leftMargin > leftMarginL)
                  linePadding += "\n";
                markdownStrings[counter - 1] = markdownStrings[counter - 1] + linePadding;
                newLine = true;
              }
              inCode = false;
            } else {
              markdownStrings[counter - 1] = strL + (strL.endsWith(" ") ? "" : " ");
              newLine = false;
            }
            markdownText += str;
          } else {
            if (hasEOLL && strL.trim() === "" && yDiff2 > height * 2) {
              const lines = Math.floor(yDiff2 / height);
              const linePadding = "\n".repeat(lines);
              markdownStrings[counter - 2] = markdownStrings[counter - 2] + (inCode ? "`" : "") + linePadding;
            } else if (hasEOLL && strL.trim() === "" && yDiff > height) {
              const lines = Math.floor(yDiff / height);
              const linePadding = "\n" + "\n".repeat(lines);
              markdownStrings[counter - 1] = markdownStrings[counter - 1] + (inCode ? "`" : "") + linePadding;
            } else if (i === 0) {
              markdownStrings[counter - 1] = strL + (strL.endsWith(" ") ? "" : " ");
            }
            inCode = false;
            newLine = true;
            let heading = "";
            let headingPadding = "";
            if (height > meanH) {
              const diffH = height / meanH - 1;
              const headingSize = Math.ceil(0.5 / diffH);
              if (headingSize <= 6) {
                heading = "#".repeat(headingSize) + " ";
                headingPadding = "\n".repeat(7 - headingSize);
              }
            }
            markdownText += headingPadding;
            markdownText += heading;
            markdownText += str;
          }
          markdownText = markdownText.replaceAll("[[", `\\[\\[`).replaceAll("  ", " ");
          counter++;
          markdownStrings.push(markdownText);
          strLL = strL;
          widthLL = widthL;
          heightLL = heightL;
          transformLL = transformL;
          fontNameLL = fontNameL;
          hasEOLLL = hasEOLL;
          yCoordLL = yCoordL;
          if (transform[5] !== transformL[5] && str !== "")
            leftMarginL = leftMargin;
          strL = markdownText;
          widthL = width;
          heightL = height;
          transformL = transform;
          fontNameL = fontName;
          hasEOLL = hasEOL;
          yCoordL = yCoord;
        }
        pageCounter++;
      }
      let markdownContents = markdownStrings.join("");
      markdownContents = `Source file: [[${file.path}]]

${markdownContents}`;
      const fileName = (0, import_obsidian2.normalizePath)(`${this.generatedPath}${subPath}${file.basename}.md`);
      const byteLength = Buffer.byteLength(markdownContents, "utf-8");
      const kb = Math.ceil(byteLength / 1024);
      if (kb > settings.pdfExtractFileSizeLimit && settings.pdfExtractFileSizeLimit > 0 && settings.pdfExtractChunkIfFileExceedsLimit === true) {
        const chunkNum = Math.ceil(byteLength / (settings.pdfExtractFileSizeLimit * 1024 * 0.5));
        const segments = this.chunkSubstring(markdownContents, chunkNum);
        for (let i = 0; i < segments.length; i++) {
          const segmentPath = (0, import_obsidian2.normalizePath)(`${this.generatedPath}${subPath}${file.basename}_${i + 1}.md`);
          const newSegmentFile = vault.getAbstractFileByPath(segmentPath);
          if (newSegmentFile !== null)
            await vault.modify(newSegmentFile, segments[i]);
          else
            await vault.create(segmentPath, segments[i]);
        }
      } else {
        const newFile = vault.getAbstractFileByPath(fileName);
        if (newFile !== null)
          await vault.modify(newFile, markdownContents);
        else
          await vault.create(fileName, markdownContents);
      }
    };
  }
  async extract(vault, settings, statusBarItemEl) {
    this.pdfjs = await (0, import_obsidian2.loadPdfJs)();
    statusBarItemEl.setText(`Extracting Markdown text from PDF files...`);
    this.generatedPath = settings.generatedPath;
    this.pdfPath = settings.pdfPath;
    const fileNumberLimit = settings.pdfExtractFileNumberLimit;
    const fileSizeLimit = settings.pdfExtractFileSizeLimit;
    const chunkIfFileExceedsLimit = settings.pdfExtractChunkIfFileExceedsLimit;
    const pdfOverwrite = settings.pdfOverwrite === true;
    console.log(`File number limit: ${fileNumberLimit}`);
    console.log(`File size limit: ${fileSizeLimit}`);
    console.log(`Chunk if file exceeds limit: ${chunkIfFileExceedsLimit}`);
    console.log(`Overwrite exising files: ${pdfOverwrite}`);
    let files = vault.getFiles().filter((file) => {
      let matches = false;
      if (file.extension === "pdf" && file.path.indexOf(this.pdfPath) > -1) {
        if (chunkIfFileExceedsLimit === false && fileSizeLimit > 0 && file.stat.size * 1024 > fileSizeLimit)
          matches = false;
        else if (!pdfOverwrite) {
          const subPath = this.subPathFactory(file, this.pdfPath.length);
          let mdFile = (0, import_obsidian2.normalizePath)(`${this.generatedPath}${subPath}${file.basename}.md`);
          let mdVersion = vault.getAbstractFileByPath(mdFile);
          if (mdVersion === null) {
            if (chunkIfFileExceedsLimit === true) {
              mdFile = (0, import_obsidian2.normalizePath)(`${this.generatedPath}${subPath}${file.basename}_1.md`);
              mdVersion = vault.getAbstractFileByPath(mdFile);
              if (mdVersion === null)
                matches = true;
            } else
              matches = true;
          }
        } else
          matches = true;
      }
      return matches;
    });
    if (fileNumberLimit > 0)
      files = files.slice(0, fileNumberLimit);
    this.makeSubFolders(vault, files);
    let index = 0;
    for (let file of files) {
      await this.processPDF(vault, settings, file, index++);
    }
    statusBarItemEl.setText("All done!");
  }
};

// src/bookmark.ts
var import_obsidian3 = __toModule(require("obsidian"));
var BookmarkContentExtractor = class {
  async deleteBookmarks(vault) {
    const filesToDelete = vault.getFiles().filter((file) => file.path.indexOf((0, import_obsidian3.normalizePath)(`${this.generatedPath}${this.bookmarkPath}`)) > -1 && file.extension === "md");
    for (let i = 0; i < filesToDelete.length; i++)
      await vault.delete(filesToDelete[i]);
  }
  async extract(vault, settings, statusBarItemEl) {
    this.generatedPath = settings.generatedPath;
    this.bookmarkPath = settings.bookmarkPath;
    statusBarItemEl.setText("Retrieving web content as markdown...");
    if (settings.bookmarkOverwrite)
      this.deleteBookmarks(vault);
    const files = vault.getMarkdownFiles().filter((file) => file.path.indexOf(this.bookmarkPath) === 0);
    const fileContents = [];
    for (let file of files) {
      fileContents.push(await vault.cachedRead(file));
    }
    for (let contents of fileContents) {
      let links = contents.match(/https*:\/\/[^ )]*/g);
      if (links != null) {
        links = links.filter((link) => !link.endsWith(".pdf") && !link.endsWith(".jpg"));
        for (let i = 0; i < links.length; i++) {
          const link = links[i];
          try {
            const htmlContents = await (0, import_obsidian3.request)({ url: link });
            let title = link;
            if (htmlContents != null) {
              const titleMatch = htmlContents.match(/<title>([^<]*)<\/title>/i);
              if (titleMatch !== null && titleMatch.length > 1 && titleMatch[1] !== "")
                title = titleMatch[1];
            }
            if (title.indexOf("40") === 0 || title.indexOf("50") === 0)
              return;
            title = title.trim().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,./:;<=>?@[\]^`{|}~·]/g, "-");
            if (title.indexOf("-") === 0)
              title = title.substring(1);
            title = title.substring(0, 50);
            let md = (0, import_obsidian3.htmlToMarkdown)(htmlContents);
            md = `${link}

${md}`;
            const fileName = (0, import_obsidian3.normalizePath)(`${this.generatedPath}${this.bookmarkPath}${title}.md`);
            const file = vault.getAbstractFileByPath(fileName);
            if (file !== null) {
              if (settings.bookmarkOverwrite)
                vault.modify(file, md);
            } else
              vault.create(fileName, md);
          } catch (err) {
            console.log(err);
          }
        }
      }
    }
    statusBarItemEl.setText("All done!");
  }
};

// src/topic.ts
var import_obsidian4 = __toModule(require("obsidian"));
var import_math_base_special_roundn = __toModule(require_lib55());
var import_datasets_stopwords_en = __toModule(require_browser());
var import_nlp_lda = __toModule(require_lib120());
var import_nlp_porter_stemmer = __toModule(require_lib126());
var import_micromatch = __toModule(require_micromatch());
var TopicLinker = class {
  async link(app, settings, statusBarItemEl) {
    const { vault } = app;
    const topicPathPattern = settings.topicPathPattern;
    const topicSearchPattern = settings.topicSearchPattern;
    const topicTagPattern = settings.topicTagPattern;
    console.log(`Number of topics: ${settings.numTopics}`);
    console.log(`Number of words: ${settings.numWords}`);
    console.log(`Topic threshold: ${settings.topicThreshold}`);
    console.log(`Percentage of text: ${settings.percentageTextToScan}`);
    console.log(`Topic file pattern: ${topicPathPattern}`);
    console.log(`Topic search pattern: ${topicSearchPattern}`);
    console.log(`Topic tag pattern: ${topicTagPattern}`);
    console.log(`Fixed word length: ${settings.fixedWordLength}`);
    console.log(`Text percentage: ${settings.percentageTextToScan}`);
    console.log(`Word selection: ${settings.wordSelectionRandom}`);
    statusBarItemEl.setText(`Extracting Markdown file contents at ${settings.percentageTextToScan}%...`);
    let files = vault.getMarkdownFiles().filter((file) => (0, import_micromatch.default)([file.path], ["*" + topicPathPattern + "*"]).length > 0);
    if (topicSearchPattern && topicSearchPattern.length > 0) {
      const topicSearchFunc = (0, import_obsidian4.prepareSimpleSearch)(topicSearchPattern);
      const resultingFiles = [];
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const fileContents2 = await vault.cachedRead(file);
        const result = topicSearchFunc(fileContents2);
        if (result) {
          resultingFiles.push(file);
        }
      }
      files = resultingFiles;
    }
    if (topicTagPattern && topicTagPattern.length > 0) {
      const topicTags = topicTagPattern.split(" ");
      const resultingFiles = [];
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const cm = app.metadataCache.getFileCache(file);
        const tags = (0, import_obsidian4.getAllTags)(cm);
        if (tags && tags.length > 0) {
          tags.forEach((tag) => {
            if (topicTags.indexOf(tag) >= 0)
              resultingFiles.push(file);
          });
        }
      }
      files = resultingFiles;
    }
    if (files.length === 0) {
      statusBarItemEl.setText("No Markdown files found!");
      return;
    }
    const pdfNames = vault.getFiles().filter((file) => {
      return file.extension === "pdf";
    }).map((file) => file.basename);
    const words = (0, import_datasets_stopwords_en.default)();
    const wordRegexes = words.map((word) => {
      return new RegExp("\\b" + word + "\\b", "gi");
    });
    const extendedStops = ["\xA9", "null", "obj", "pg", "de", "et", "la", "le", "el", "que", "dont", "flotr2", "mpg", "ibid", "pdses", "\xE0", "en", "les", "des", "qui", "du"];
    extendedStops.forEach((word) => {
      wordRegexes.push(new RegExp("\\b" + word + "\\b", "gi"));
    });
    const fileContents = [];
    for (let file of files) {
      fileContents.push(await vault.cachedRead(file));
    }
    const documents = fileContents.map((document) => {
      if (settings.fixedWordLength > 0) {
        const totalWords = document.split(" ");
        const wordLength = totalWords.length;
        const scanEnd = wordLength > settings.fixedWordLength ? settings.fixedWordLength : wordLength;
        let scanStart = 0;
        if (settings.wordSelectionRandom)
          scanStart = Math.floor(Math.random() * (wordLength - scanEnd));
        document = totalWords.slice(scanStart, scanStart + scanEnd).join(" ");
      } else if (settings.percentageTextToScan > 0 && settings.percentageTextToScan < 100) {
        const scanEnd = document.length * (settings.percentageTextToScan / 100);
        let scanStart = 0;
        if (settings.wordSelectionRandom)
          scanStart = Math.floor(Math.random() * (100 - scanEnd));
        document = document.substring(scanStart, scanEnd);
      }
      document = document.toLowerCase().replace(/[\u2000-\u206F\u2E00-\u2E7F\\'!"#$%&()*+,\-./:;<=>?@[\]^_`{|}~]/g, "").replace(/\b\d{1,}\b/g, "");
      wordRegexes.forEach((word) => {
        document = document.replace(word, "");
      });
      document = document.replace(/\s{2,}/g, " ");
      if (settings.stemming)
        document = document.split(" ").map((word) => (0, import_nlp_porter_stemmer.default)(word)).join(" ");
      return document.trim();
    });
    const numTopics = settings.numTopics;
    const numWords = settings.numWords;
    const threshold = settings.topicThreshold;
    const iterations = settings.ldaIterations;
    const burnin = settings.ldaBurnIn;
    const thin = settings.ldaThin;
    statusBarItemEl.setText("Finding " + numTopics + " topics to meet " + threshold + "...");
    const ldaModel = (0, import_nlp_lda.default)(documents, numTopics);
    ldaModel.fit(iterations, burnin, thin);
    const topicDocs = new Array(numTopics);
    for (let j = 0; j < numTopics; j++) {
      for (let i = 0; i < documents.length; i++) {
        const score = (0, import_math_base_special_roundn.default)(ldaModel.avgTheta.get(i, j), -3);
        if (score > threshold) {
          if (topicDocs[j] === void 0)
            topicDocs[j] = [];
          topicDocs[j].push({ doc: files[i].basename, score });
        }
      }
    }
    const topicStrings = [];
    for (let j = 0; j < numTopics; j++) {
      const terms = ldaModel.getTerms(j, numWords);
      const topicString = `Topic ${j + 1} - ${terms.map((t) => t.word).join("-")}`;
      topicStrings.push(topicString);
    }
    statusBarItemEl.setText(`Creating topic files with ${numWords} per topic...`);
    let topicDir = `Topics`;
    if (settings.topicIncludePattern)
      topicDir += `-${topicPathPattern.replace(/[*/. ]/g, "-")}-${topicSearchPattern.replace(/[*/. ]/g, "-")}`;
    if (settings.topicIncludeTimestamp)
      topicDir += `-${(0, import_obsidian4.moment)().format("YYYYMMDDhhmmss")}`;
    topicDir = topicDir.replace(/--/, "-");
    try {
      await vault.createFolder((0, import_obsidian4.normalizePath)(topicDir));
    } catch (err) {
    }
    for (let j = 0; j < numTopics; j++) {
      const terms = ldaModel.getTerms(j, numWords);
      if (terms[0].word === void 0)
        continue;
      const fileName = (0, import_obsidian4.normalizePath)(`${topicDir}/${topicStrings[j]}.md`);
      let fileText = `# Topic ${j + 1}

`;
      fileText += `Return to [[Topic Index]]

`;
      fileText += "## Keywords \n\n";
      fileText += "#### Tags \n\n";
      for (let k = 0; k < terms.length; k++) {
        const { word } = terms[k];
        fileText += `#${word} `;
      }
      fileText += "\n\n#### Topic-Word Relevance \n\n";
      fileText += `| ${"Word".padEnd(20)} | Probability  |
`;
      fileText += `| :${"-".repeat(19)} | ${"-".repeat(11)}: |
`;
      for (let k = 0; k < terms.length; k++) {
        const { word, prob } = terms[k];
        fileText += `| ${("**" + word + "**").padEnd(20)} | ${prob.toPrecision(2).padEnd(11)} |
`;
      }
      fileText += `

`;
      fileText += `## Links 

`;
      const thisTopicDocs = topicDocs[j];
      if (thisTopicDocs !== void 0) {
        thisTopicDocs.sort((td1, td2) => {
          return td1.score > td2.score ? -1 : td1.score < td2.score ? 1 : 0;
        });
        for (let k = 0; k < thisTopicDocs.length; k++) {
          const { doc, score } = thisTopicDocs[k];
          fileText += ` - [[${doc}]] [relevance: ${score.toPrecision(2)}]`;
          if (pdfNames.indexOf(doc) > -1)
            fileText += ` ([[${doc}.pdf|PDF]])`;
          fileText += `
`;
        }
      }
      try {
        const file = vault.getAbstractFileByPath(fileName);
        if (file !== void 0 && file !== null)
          vault.modify(file, fileText);
        else
          vault.create(fileName, fileText);
      } catch (err) {
        console.log(err);
      }
    }
    const topicFileName = (0, import_obsidian4.normalizePath)(`${topicDir}/Topic Index.md`);
    let topicFileText = `# Topic Index

`;
    topicFileText += `Results based on scanning files that match file path '*${topicPathPattern}*', search pattern '*${topicSearchPattern}* and tags '*${topicTagPattern}*'.

`;
    topicFileText += `## Topics 

`;
    for (let j = 0; j < numTopics; j++) {
      topicFileText += ` - [[${topicStrings[j]}]]
`;
    }
    topicFileText += `
## Reading List

`;
    topicFileText += `**Note:** to retain this list, copy to another location or check the 'Topic Folder Timestamp' option under 'Settings'.

`;
    const fileNames = files.map((file) => file.basename).sort();
    for (let j = 0; j < fileNames.length; j++) {
      topicFileText += `- [ ] [[${fileNames[j]}]]
`;
    }
    const topicFile = vault.getAbstractFileByPath(topicFileName);
    if (topicFile !== void 0 && topicFile !== null)
      vault.modify(topicFile, topicFileText);
    else
      vault.create(topicFileName, topicFileText);
    statusBarItemEl.setText(`All done!`);
  }
};

// src/main.ts
var TopicLinkingPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    const statusBarItemEl = this.addStatusBarItem();
    this.addCommand({
      id: "extract-md-from-pdfs-command",
      name: "Extract Markdown from PDFs",
      hotkeys: [{ modifiers: ["Mod", "Shift"], key: "a" }],
      callback: async () => {
        const { vault } = this.app;
        new PDFContentExtractor().extract(vault, this.settings, statusBarItemEl);
      }
    });
    this.addCommand({
      id: "extract-md-from-bookmarks-command",
      name: "Extract Markdown from Bookmarks",
      callback: async () => {
        const { vault } = this.app;
        new BookmarkContentExtractor().extract(vault, this.settings, statusBarItemEl);
      }
    });
    this.addCommand({
      id: "link-topics-command",
      name: "Link Topics",
      callback: async () => {
        new TopicLinker().link(this.app, this.settings, statusBarItemEl);
      }
    });
    this.addSettingTab(new TopicLinkingSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_pow.c}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright (C) 2004 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code and copyright notice are from the [source implementation]{@link http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/CODES/mt19937ar.c}. The implementation has been modified for JavaScript.
*
* ```text
* Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions
* are met:
*
*   1. Redistributions of source code must retain the above copyright
*      notice, this list of conditions and the following disclaimer.
*
*   2. Redistributions in binary form must reproduce the above copyright
*      notice, this list of conditions and the following disclaimer in the
*      documentation and/or other materials provided with the distribution.
*
*   3. The names of its contributors may not be used to endorse or promote
*      products derived from this software without specific prior written
*      permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
* "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
* A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
* CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
* EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
* PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
* PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
* NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* ```
*/
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* This code is a modification of an existing JavaScript implementation of ther [Porter stemming algorithm]{@link https://tartarus.org/martin/PorterStemmer/}.
*
* ```text
* Release 1 be 'andargor', Jul 2004
* Release 2 (substantially revised) by Christopher McKenzie, Aug 2009
* ```
*/
/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=data:application/json;base64,
