/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[Object.keys(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x2) => x2.done ? resolve(x2.value) : Promise.resolve(x2.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/flexsearch/dist/flexsearch.bundle.js
var require_flexsearch_bundle = __commonJS({
  "node_modules/flexsearch/dist/flexsearch.bundle.js"(exports, module) {
    (function _f(self) {
      "use strict";
      try {
        if (module)
          self = module;
      } catch (e) {
      }
      self._factory = _f;
      var t;
      function u(a2) {
        return typeof a2 !== "undefined" ? a2 : true;
      }
      function aa(a2) {
        const b2 = Array(a2);
        for (let c2 = 0; c2 < a2; c2++)
          b2[c2] = v();
        return b2;
      }
      function v() {
        return Object.create(null);
      }
      function ba(a2, b2) {
        return b2.length - a2.length;
      }
      function x(a2) {
        return typeof a2 === "string";
      }
      function C(a2) {
        return typeof a2 === "object";
      }
      function D(a2) {
        return typeof a2 === "function";
      }
      ;
      function ca(a2, b2) {
        var c2 = da;
        if (a2 && (b2 && (a2 = E(a2, b2)), this.H && (a2 = E(a2, this.H)), this.J && 1 < a2.length && (a2 = E(a2, this.J)), c2 || c2 === "")) {
          a2 = a2.split(c2);
          if (this.filter) {
            b2 = this.filter;
            c2 = a2.length;
            const d2 = [];
            for (let e = 0, f = 0; e < c2; e++) {
              const g = a2[e];
              g && !b2[g] && (d2[f++] = g);
            }
            a2 = d2;
          }
          return a2;
        }
        return a2;
      }
      const da = /[\p{Z}\p{S}\p{P}\p{C}]+/u, ea = /[\u0300-\u036f]/g;
      function fa(a2, b2) {
        const c2 = Object.keys(a2), d2 = c2.length, e = [];
        let f = "", g = 0;
        for (let h = 0, k, m; h < d2; h++)
          k = c2[h], (m = a2[k]) ? (e[g++] = F(b2 ? "(?!\\b)" + k + "(\\b|_)" : k), e[g++] = m) : f += (f ? "|" : "") + k;
        f && (e[g++] = F(b2 ? "(?!\\b)(" + f + ")(\\b|_)" : "(" + f + ")"), e[g] = "");
        return e;
      }
      function E(a2, b2) {
        for (let c2 = 0, d2 = b2.length; c2 < d2 && (a2 = a2.replace(b2[c2], b2[c2 + 1]), a2); c2 += 2)
          ;
        return a2;
      }
      function F(a2) {
        return new RegExp(a2, "g");
      }
      function ha(a2) {
        let b2 = "", c2 = "";
        for (let d2 = 0, e = a2.length, f; d2 < e; d2++)
          (f = a2[d2]) !== c2 && (b2 += c2 = f);
        return b2;
      }
      ;
      var ja = { encode: ia, F: false, G: "" };
      function ia(a2) {
        return ca.call(this, ("" + a2).toLowerCase(), false);
      }
      ;
      const ka = {}, G = {};
      function la(a2) {
        I(a2, "add");
        I(a2, "append");
        I(a2, "search");
        I(a2, "update");
        I(a2, "remove");
      }
      function I(a2, b2) {
        a2[b2 + "Async"] = function() {
          const c2 = this, d2 = arguments;
          var e = d2[d2.length - 1];
          let f;
          D(e) && (f = e, delete d2[d2.length - 1]);
          e = new Promise(function(g) {
            setTimeout(function() {
              c2.async = true;
              const h = c2[b2].apply(c2, d2);
              c2.async = false;
              g(h);
            });
          });
          return f ? (e.then(f), this) : e;
        };
      }
      ;
      function ma(a2, b2, c2, d2) {
        const e = a2.length;
        let f = [], g, h, k = 0;
        d2 && (d2 = []);
        for (let m = e - 1; 0 <= m; m--) {
          const n = a2[m], w = n.length, q = v();
          let r = !g;
          for (let l = 0; l < w; l++) {
            const p = n[l], z = p.length;
            if (z)
              for (let B = 0, A, y; B < z; B++)
                if (y = p[B], g) {
                  if (g[y]) {
                    if (!m) {
                      if (c2)
                        c2--;
                      else if (f[k++] = y, k === b2)
                        return f;
                    }
                    if (m || d2)
                      q[y] = 1;
                    r = true;
                  }
                  if (d2 && (h[y] = (A = h[y]) ? ++A : A = 1, A < e)) {
                    const H = d2[A - 2] || (d2[A - 2] = []);
                    H[H.length] = y;
                  }
                } else
                  q[y] = 1;
          }
          if (d2)
            g || (h = q);
          else if (!r)
            return [];
          g = q;
        }
        if (d2)
          for (let m = d2.length - 1, n, w; 0 <= m; m--) {
            n = d2[m];
            w = n.length;
            for (let q = 0, r; q < w; q++)
              if (r = n[q], !g[r]) {
                if (c2)
                  c2--;
                else if (f[k++] = r, k === b2)
                  return f;
                g[r] = 1;
              }
          }
        return f;
      }
      function na(a2, b2) {
        const c2 = v(), d2 = v(), e = [];
        for (let f = 0; f < a2.length; f++)
          c2[a2[f]] = 1;
        for (let f = 0, g; f < b2.length; f++) {
          g = b2[f];
          for (let h = 0, k; h < g.length; h++)
            k = g[h], c2[k] && !d2[k] && (d2[k] = 1, e[e.length] = k);
        }
        return e;
      }
      ;
      function J(a2) {
        this.l = a2 !== true && a2;
        this.cache = v();
        this.h = [];
      }
      function oa(a2, b2, c2) {
        C(a2) && (a2 = a2.query);
        let d2 = this.cache.get(a2);
        d2 || (d2 = this.search(a2, b2, c2), this.cache.set(a2, d2));
        return d2;
      }
      J.prototype.set = function(a2, b2) {
        if (!this.cache[a2]) {
          var c2 = this.h.length;
          c2 === this.l ? delete this.cache[this.h[c2 - 1]] : c2++;
          for (--c2; 0 < c2; c2--)
            this.h[c2] = this.h[c2 - 1];
          this.h[0] = a2;
        }
        this.cache[a2] = b2;
      };
      J.prototype.get = function(a2) {
        const b2 = this.cache[a2];
        if (this.l && b2 && (a2 = this.h.indexOf(a2))) {
          const c2 = this.h[a2 - 1];
          this.h[a2 - 1] = this.h[a2];
          this.h[a2] = c2;
        }
        return b2;
      };
      const qa = { memory: { charset: "latin:extra", D: 3, B: 4, m: false }, performance: { D: 3, B: 3, s: false, context: { depth: 2, D: 1 } }, match: { charset: "latin:extra", G: "reverse" }, score: { charset: "latin:advanced", D: 20, B: 3, context: { depth: 3, D: 9 } }, "default": {} };
      function ra(a2, b2, c2, d2, e, f) {
        setTimeout(function() {
          const g = a2(c2, JSON.stringify(f));
          g && g.then ? g.then(function() {
            b2.export(a2, b2, c2, d2, e + 1);
          }) : b2.export(a2, b2, c2, d2, e + 1);
        });
      }
      ;
      function K(a2, b2) {
        if (!(this instanceof K))
          return new K(a2);
        var c2;
        if (a2) {
          x(a2) ? a2 = qa[a2] : (c2 = a2.preset) && (a2 = Object.assign({}, c2[c2], a2));
          c2 = a2.charset;
          var d2 = a2.lang;
          x(c2) && (c2.indexOf(":") === -1 && (c2 += ":default"), c2 = G[c2]);
          x(d2) && (d2 = ka[d2]);
        } else
          a2 = {};
        let e, f, g = a2.context || {};
        this.encode = a2.encode || c2 && c2.encode || ia;
        this.register = b2 || v();
        this.D = e = a2.resolution || 9;
        this.G = b2 = c2 && c2.G || a2.tokenize || "strict";
        this.depth = b2 === "strict" && g.depth;
        this.l = u(g.bidirectional);
        this.s = f = u(a2.optimize);
        this.m = u(a2.fastupdate);
        this.B = a2.minlength || 1;
        this.C = a2.boost;
        this.map = f ? aa(e) : v();
        this.A = e = g.resolution || 1;
        this.h = f ? aa(e) : v();
        this.F = c2 && c2.F || a2.rtl;
        this.H = (b2 = a2.matcher || d2 && d2.H) && fa(b2, false);
        this.J = (b2 = a2.stemmer || d2 && d2.J) && fa(b2, true);
        if (c2 = b2 = a2.filter || d2 && d2.filter) {
          c2 = b2;
          d2 = v();
          for (let h = 0, k = c2.length; h < k; h++)
            d2[c2[h]] = 1;
          c2 = d2;
        }
        this.filter = c2;
        this.cache = (b2 = a2.cache) && new J(b2);
      }
      t = K.prototype;
      t.append = function(a2, b2) {
        return this.add(a2, b2, true);
      };
      t.add = function(a2, b2, c2, d2) {
        if (b2 && (a2 || a2 === 0)) {
          if (!d2 && !c2 && this.register[a2])
            return this.update(a2, b2);
          b2 = this.encode(b2);
          if (d2 = b2.length) {
            const m = v(), n = v(), w = this.depth, q = this.D;
            for (let r = 0; r < d2; r++) {
              let l = b2[this.F ? d2 - 1 - r : r];
              var e = l.length;
              if (l && e >= this.B && (w || !n[l])) {
                var f = L(q, d2, r), g = "";
                switch (this.G) {
                  case "full":
                    if (3 < e) {
                      for (f = 0; f < e; f++)
                        for (var h = e; h > f; h--)
                          if (h - f >= this.B) {
                            var k = L(q, d2, r, e, f);
                            g = l.substring(f, h);
                            M(this, n, g, k, a2, c2);
                          }
                      break;
                    }
                  case "reverse":
                    if (2 < e) {
                      for (h = e - 1; 0 < h; h--)
                        g = l[h] + g, g.length >= this.B && M(this, n, g, L(q, d2, r, e, h), a2, c2);
                      g = "";
                    }
                  case "forward":
                    if (1 < e) {
                      for (h = 0; h < e; h++)
                        g += l[h], g.length >= this.B && M(this, n, g, f, a2, c2);
                      break;
                    }
                  default:
                    if (this.C && (f = Math.min(f / this.C(b2, l, r) | 0, q - 1)), M(this, n, l, f, a2, c2), w && 1 < d2 && r < d2 - 1) {
                      for (e = v(), g = this.A, f = l, h = Math.min(w + 1, d2 - r), e[f] = 1, k = 1; k < h; k++)
                        if ((l = b2[this.F ? d2 - 1 - r - k : r + k]) && l.length >= this.B && !e[l]) {
                          e[l] = 1;
                          const p = this.l && l > f;
                          M(this, m, p ? f : l, L(g + (d2 / 2 > g ? 0 : 1), d2, r, h - 1, k - 1), a2, c2, p ? l : f);
                        }
                    }
                }
              }
            }
            this.m || (this.register[a2] = 1);
          }
        }
        return this;
      };
      function L(a2, b2, c2, d2, e) {
        return c2 && 1 < a2 ? b2 + (d2 || 0) <= a2 ? c2 + (e || 0) : (a2 - 1) / (b2 + (d2 || 0)) * (c2 + (e || 0)) + 1 | 0 : 0;
      }
      function M(a2, b2, c2, d2, e, f, g) {
        let h = g ? a2.h : a2.map;
        if (!b2[c2] || g && !b2[c2][g])
          a2.s && (h = h[d2]), g ? (b2 = b2[c2] || (b2[c2] = v()), b2[g] = 1, h = h[g] || (h[g] = v())) : b2[c2] = 1, h = h[c2] || (h[c2] = []), a2.s || (h = h[d2] || (h[d2] = [])), f && h.indexOf(e) !== -1 || (h[h.length] = e, a2.m && (a2 = a2.register[e] || (a2.register[e] = []), a2[a2.length] = h));
      }
      t.search = function(a2, b2, c2) {
        c2 || (!b2 && C(a2) ? (c2 = a2, a2 = c2.query) : C(b2) && (c2 = b2));
        let d2 = [], e;
        let f, g = 0;
        if (c2) {
          b2 = c2.limit;
          g = c2.offset || 0;
          var h = c2.context;
          f = c2.suggest;
        }
        if (a2 && (a2 = this.encode(a2), e = a2.length, 1 < e)) {
          c2 = v();
          var k = [];
          for (let n = 0, w = 0, q; n < e; n++)
            if ((q = a2[n]) && q.length >= this.B && !c2[q])
              if (this.s || f || this.map[q])
                k[w++] = q, c2[q] = 1;
              else
                return d2;
          a2 = k;
          e = a2.length;
        }
        if (!e)
          return d2;
        b2 || (b2 = 100);
        h = this.depth && 1 < e && h !== false;
        c2 = 0;
        let m;
        h ? (m = a2[0], c2 = 1) : 1 < e && a2.sort(ba);
        for (let n, w; c2 < e; c2++) {
          w = a2[c2];
          h ? (n = sa(this, d2, f, b2, g, e === 2, w, m), f && n === false && d2.length || (m = w)) : n = sa(this, d2, f, b2, g, e === 1, w);
          if (n)
            return n;
          if (f && c2 === e - 1) {
            k = d2.length;
            if (!k) {
              if (h) {
                h = 0;
                c2 = -1;
                continue;
              }
              return d2;
            }
            if (k === 1)
              return ta(d2[0], b2, g);
          }
        }
        return ma(d2, b2, g, f);
      };
      function sa(a2, b2, c2, d2, e, f, g, h) {
        let k = [], m = h ? a2.h : a2.map;
        a2.s || (m = ua(m, g, h, a2.l));
        if (m) {
          let n = 0;
          const w = Math.min(m.length, h ? a2.A : a2.D);
          for (let q = 0, r = 0, l, p; q < w; q++)
            if (l = m[q]) {
              if (a2.s && (l = ua(l, g, h, a2.l)), e && l && f && (p = l.length, p <= e ? (e -= p, l = null) : (l = l.slice(e), e = 0)), l && (k[n++] = l, f && (r += l.length, r >= d2)))
                break;
            }
          if (n) {
            if (f)
              return ta(k, d2, 0);
            b2[b2.length] = k;
            return;
          }
        }
        return !c2 && k;
      }
      function ta(a2, b2, c2) {
        a2 = a2.length === 1 ? a2[0] : [].concat.apply([], a2);
        return c2 || a2.length > b2 ? a2.slice(c2, c2 + b2) : a2;
      }
      function ua(a2, b2, c2, d2) {
        c2 ? (d2 = d2 && b2 > c2, a2 = (a2 = a2[d2 ? b2 : c2]) && a2[d2 ? c2 : b2]) : a2 = a2[b2];
        return a2;
      }
      t.contain = function(a2) {
        return !!this.register[a2];
      };
      t.update = function(a2, b2) {
        return this.remove(a2).add(a2, b2);
      };
      t.remove = function(a2, b2) {
        const c2 = this.register[a2];
        if (c2) {
          if (this.m)
            for (let d2 = 0, e; d2 < c2.length; d2++)
              e = c2[d2], e.splice(e.indexOf(a2), 1);
          else
            N(this.map, a2, this.D, this.s), this.depth && N(this.h, a2, this.A, this.s);
          b2 || delete this.register[a2];
          if (this.cache) {
            b2 = this.cache;
            for (let d2 = 0, e, f; d2 < b2.h.length; d2++)
              f = b2.h[d2], e = b2.cache[f], e.indexOf(a2) !== -1 && (b2.h.splice(d2--, 1), delete b2.cache[f]);
          }
        }
        return this;
      };
      function N(a2, b2, c2, d2, e) {
        let f = 0;
        if (a2.constructor === Array)
          if (e)
            b2 = a2.indexOf(b2), b2 !== -1 ? 1 < a2.length && (a2.splice(b2, 1), f++) : f++;
          else {
            e = Math.min(a2.length, c2);
            for (let g = 0, h; g < e; g++)
              if (h = a2[g])
                f = N(h, b2, c2, d2, e), d2 || f || delete a2[g];
          }
        else
          for (let g in a2)
            (f = N(a2[g], b2, c2, d2, e)) || delete a2[g];
        return f;
      }
      t.searchCache = oa;
      t.export = function(a2, b2, c2, d2, e) {
        let f, g;
        switch (e || (e = 0)) {
          case 0:
            f = "reg";
            if (this.m) {
              g = v();
              for (let h in this.register)
                g[h] = 1;
            } else
              g = this.register;
            break;
          case 1:
            f = "cfg";
            g = { doc: 0, opt: this.s ? 1 : 0 };
            break;
          case 2:
            f = "map";
            g = this.map;
            break;
          case 3:
            f = "ctx";
            g = this.h;
            break;
          default:
            return;
        }
        ra(a2, b2 || this, c2 ? c2 + "." + f : f, d2, e, g);
        return true;
      };
      t.import = function(a2, b2) {
        if (b2)
          switch (x(b2) && (b2 = JSON.parse(b2)), a2) {
            case "cfg":
              this.s = !!b2.opt;
              break;
            case "reg":
              this.m = false;
              this.register = b2;
              break;
            case "map":
              this.map = b2;
              break;
            case "ctx":
              this.h = b2;
          }
      };
      la(K.prototype);
      function va(a2) {
        a2 = a2.data;
        var b2 = self._index;
        const c2 = a2.args;
        var d2 = a2.task;
        switch (d2) {
          case "init":
            d2 = a2.options || {};
            a2 = a2.factory;
            b2 = d2.encode;
            d2.cache = false;
            b2 && b2.indexOf("function") === 0 && (d2.encode = Function("return " + b2)());
            a2 ? (Function("return " + a2)()(self), self._index = new self.FlexSearch.Index(d2), delete self.FlexSearch) : self._index = new K(d2);
            break;
          default:
            a2 = a2.id, b2 = b2[d2].apply(b2, c2), postMessage(d2 === "search" ? { id: a2, msg: b2 } : { id: a2 });
        }
      }
      ;
      let wa = 0;
      function O(a2) {
        if (!(this instanceof O))
          return new O(a2);
        var b2;
        a2 ? D(b2 = a2.encode) && (a2.encode = b2.toString()) : a2 = {};
        (b2 = (self || window)._factory) && (b2 = b2.toString());
        const c2 = self.exports, d2 = this;
        this.o = xa(b2, c2, a2.worker);
        this.h = v();
        if (this.o) {
          if (c2)
            this.o.on("message", function(e) {
              d2.h[e.id](e.msg);
              delete d2.h[e.id];
            });
          else
            this.o.onmessage = function(e) {
              e = e.data;
              d2.h[e.id](e.msg);
              delete d2.h[e.id];
            };
          this.o.postMessage({ task: "init", factory: b2, options: a2 });
        }
      }
      P("add");
      P("append");
      P("search");
      P("update");
      P("remove");
      function P(a2) {
        O.prototype[a2] = O.prototype[a2 + "Async"] = function() {
          const b2 = this, c2 = [].slice.call(arguments);
          var d2 = c2[c2.length - 1];
          let e;
          D(d2) && (e = d2, c2.splice(c2.length - 1, 1));
          d2 = new Promise(function(f) {
            setTimeout(function() {
              b2.h[++wa] = f;
              b2.o.postMessage({ task: a2, id: wa, args: c2 });
            });
          });
          return e ? (d2.then(e), this) : d2;
        };
      }
      function xa(a, b, c) {
        let d;
        try {
          d = b ? eval('new (require("worker_threads")["Worker"])("../dist/node/node.js")') : a ? new Worker(URL.createObjectURL(new Blob(["onmessage=" + va.toString()], { type: "text/javascript" }))) : new Worker(x(c) ? c : "worker/worker.js", { type: "module" });
        } catch (e) {
        }
        return d;
      }
      ;
      function Q(a2) {
        if (!(this instanceof Q))
          return new Q(a2);
        var b2 = a2.document || a2.doc || a2, c2;
        this.K = [];
        this.h = [];
        this.A = [];
        this.register = v();
        this.key = (c2 = b2.key || b2.id) && S(c2, this.A) || "id";
        this.m = u(a2.fastupdate);
        this.C = (c2 = b2.store) && c2 !== true && [];
        this.store = c2 && v();
        this.I = (c2 = b2.tag) && S(c2, this.A);
        this.l = c2 && v();
        this.cache = (c2 = a2.cache) && new J(c2);
        a2.cache = false;
        this.o = a2.worker;
        this.async = false;
        c2 = v();
        let d2 = b2.index || b2.field || b2;
        x(d2) && (d2 = [d2]);
        for (let e = 0, f, g; e < d2.length; e++)
          f = d2[e], x(f) || (g = f, f = f.field), g = C(g) ? Object.assign({}, a2, g) : a2, this.o && (c2[f] = new O(g), c2[f].o || (this.o = false)), this.o || (c2[f] = new K(g, this.register)), this.K[e] = S(f, this.A), this.h[e] = f;
        if (this.C)
          for (a2 = b2.store, x(a2) && (a2 = [a2]), b2 = 0; b2 < a2.length; b2++)
            this.C[b2] = S(a2[b2], this.A);
        this.index = c2;
      }
      function S(a2, b2) {
        const c2 = a2.split(":");
        let d2 = 0;
        for (let e = 0; e < c2.length; e++)
          a2 = c2[e], 0 <= a2.indexOf("[]") && (a2 = a2.substring(0, a2.length - 2)) && (b2[d2] = true), a2 && (c2[d2++] = a2);
        d2 < c2.length && (c2.length = d2);
        return 1 < d2 ? c2 : c2[0];
      }
      function T(a2, b2) {
        if (x(b2))
          a2 = a2[b2];
        else
          for (let c2 = 0; a2 && c2 < b2.length; c2++)
            a2 = a2[b2[c2]];
        return a2;
      }
      function U(a2, b2, c2, d2, e) {
        a2 = a2[e];
        if (d2 === c2.length - 1)
          b2[e] = a2;
        else if (a2)
          if (a2.constructor === Array)
            for (b2 = b2[e] = Array(a2.length), e = 0; e < a2.length; e++)
              U(a2, b2, c2, d2, e);
          else
            b2 = b2[e] || (b2[e] = v()), e = c2[++d2], U(a2, b2, c2, d2, e);
      }
      function V(a2, b2, c2, d2, e, f, g, h) {
        if (a2 = a2[g])
          if (d2 === b2.length - 1) {
            if (a2.constructor === Array) {
              if (c2[d2]) {
                for (b2 = 0; b2 < a2.length; b2++)
                  e.add(f, a2[b2], true, true);
                return;
              }
              a2 = a2.join(" ");
            }
            e.add(f, a2, h, true);
          } else if (a2.constructor === Array)
            for (g = 0; g < a2.length; g++)
              V(a2, b2, c2, d2, e, f, g, h);
          else
            g = b2[++d2], V(a2, b2, c2, d2, e, f, g, h);
      }
      t = Q.prototype;
      t.add = function(a2, b2, c2) {
        C(a2) && (b2 = a2, a2 = T(b2, this.key));
        if (b2 && (a2 || a2 === 0)) {
          if (!c2 && this.register[a2])
            return this.update(a2, b2);
          for (let d2 = 0, e, f; d2 < this.h.length; d2++)
            f = this.h[d2], e = this.K[d2], x(e) && (e = [e]), V(b2, e, this.A, 0, this.index[f], a2, e[0], c2);
          if (this.I) {
            let d2 = T(b2, this.I), e = v();
            x(d2) && (d2 = [d2]);
            for (let f = 0, g, h; f < d2.length; f++)
              if (g = d2[f], !e[g] && (e[g] = 1, h = this.l[g] || (this.l[g] = []), !c2 || h.indexOf(a2) === -1)) {
                if (h[h.length] = a2, this.m) {
                  const k = this.register[a2] || (this.register[a2] = []);
                  k[k.length] = h;
                }
              }
          }
          if (this.store && (!c2 || !this.store[a2])) {
            let d2;
            if (this.C) {
              d2 = v();
              for (let e = 0, f; e < this.C.length; e++)
                f = this.C[e], x(f) ? d2[f] = b2[f] : U(b2, d2, f, 0, f[0]);
            }
            this.store[a2] = d2 || b2;
          }
        }
        return this;
      };
      t.append = function(a2, b2) {
        return this.add(a2, b2, true);
      };
      t.update = function(a2, b2) {
        return this.remove(a2).add(a2, b2);
      };
      t.remove = function(a2) {
        C(a2) && (a2 = T(a2, this.key));
        if (this.register[a2]) {
          for (var b2 = 0; b2 < this.h.length && (this.index[this.h[b2]].remove(a2, !this.o), !this.m); b2++)
            ;
          if (this.I && !this.m)
            for (let c2 in this.l) {
              b2 = this.l[c2];
              const d2 = b2.indexOf(a2);
              d2 !== -1 && (1 < b2.length ? b2.splice(d2, 1) : delete this.l[c2]);
            }
          this.store && delete this.store[a2];
          delete this.register[a2];
        }
        return this;
      };
      t.search = function(a2, b2, c2, d2) {
        c2 || (!b2 && C(a2) ? (c2 = a2, a2 = c2.query) : C(b2) && (c2 = b2, b2 = 0));
        let e = [], f = [], g, h, k, m, n, w, q = 0;
        if (c2)
          if (c2.constructor === Array)
            k = c2, c2 = null;
          else {
            k = (g = c2.pluck) || c2.index || c2.field;
            m = c2.tag;
            h = this.store && c2.enrich;
            n = c2.bool === "and";
            b2 = c2.limit || 100;
            w = c2.offset || 0;
            if (m && (x(m) && (m = [m]), !a2)) {
              for (let l = 0, p; l < m.length; l++)
                if (p = ya.call(this, m[l], b2, w, h))
                  e[e.length] = p, q++;
              return q ? e : [];
            }
            x(k) && (k = [k]);
          }
        k || (k = this.h);
        n = n && (1 < k.length || m && 1 < m.length);
        const r = !d2 && (this.o || this.async) && [];
        for (let l = 0, p, z, B; l < k.length; l++) {
          let A;
          z = k[l];
          x(z) || (A = z, z = z.field);
          if (r)
            r[l] = this.index[z].searchAsync(a2, b2, A || c2);
          else {
            d2 ? p = d2[l] : p = this.index[z].search(a2, b2, A || c2);
            B = p && p.length;
            if (m && B) {
              const y = [];
              let H = 0;
              n && (y[0] = [p]);
              for (let X = 0, pa, R; X < m.length; X++)
                if (pa = m[X], B = (R = this.l[pa]) && R.length)
                  H++, y[y.length] = n ? [R] : R;
              H && (p = n ? ma(y, b2 || 100, w || 0) : na(p, y), B = p.length);
            }
            if (B)
              f[q] = z, e[q++] = p;
            else if (n)
              return [];
          }
        }
        if (r) {
          const l = this;
          return new Promise(function(p) {
            Promise.all(r).then(function(z) {
              p(l.search(a2, b2, c2, z));
            });
          });
        }
        if (!q)
          return [];
        if (g && (!h || !this.store))
          return e[0];
        for (let l = 0, p; l < f.length; l++) {
          p = e[l];
          p.length && h && (p = za.call(this, p));
          if (g)
            return p;
          e[l] = { field: f[l], result: p };
        }
        return e;
      };
      function ya(a2, b2, c2, d2) {
        let e = this.l[a2], f = e && e.length - c2;
        if (f && 0 < f) {
          if (f > b2 || c2)
            e = e.slice(c2, c2 + b2);
          d2 && (e = za.call(this, e));
          return { tag: a2, result: e };
        }
      }
      function za(a2) {
        const b2 = Array(a2.length);
        for (let c2 = 0, d2; c2 < a2.length; c2++)
          d2 = a2[c2], b2[c2] = { id: d2, doc: this.store[d2] };
        return b2;
      }
      t.contain = function(a2) {
        return !!this.register[a2];
      };
      t.get = function(a2) {
        return this.store[a2];
      };
      t.set = function(a2, b2) {
        this.store[a2] = b2;
        return this;
      };
      t.searchCache = oa;
      t.export = function(a2, b2, c2, d2, e) {
        e || (e = 0);
        d2 || (d2 = 0);
        if (d2 < this.h.length) {
          const f = this.h[d2], g = this.index[f];
          b2 = this;
          setTimeout(function() {
            g.export(a2, b2, e ? f.replace(":", "-") : "", d2, e++) || (d2++, e = 1, b2.export(a2, b2, f, d2, e));
          });
        } else {
          let f;
          switch (e) {
            case 1:
              c2 = "tag";
              f = this.l;
              break;
            case 2:
              c2 = "store";
              f = this.store;
              break;
            default:
              return;
          }
          ra(a2, this, c2, d2, e, f);
        }
      };
      t.import = function(a2, b2) {
        if (b2)
          switch (x(b2) && (b2 = JSON.parse(b2)), a2) {
            case "tag":
              this.l = b2;
              break;
            case "reg":
              this.m = false;
              this.register = b2;
              for (let d2 = 0, e; d2 < this.h.length; d2++)
                e = this.index[this.h[d2]], e.register = b2, e.m = false;
              break;
            case "store":
              this.store = b2;
              break;
            default:
              a2 = a2.split(".");
              const c2 = a2[0];
              a2 = a2[1];
              c2 && a2 && this.index[c2].import(a2, b2);
          }
      };
      la(Q.prototype);
      var Ba = { encode: Aa, F: false, G: "" };
      const Ca = [F("[\xE0\xE1\xE2\xE3\xE4\xE5]"), "a", F("[\xE8\xE9\xEA\xEB]"), "e", F("[\xEC\xED\xEE\xEF]"), "i", F("[\xF2\xF3\xF4\xF5\xF6\u0151]"), "o", F("[\xF9\xFA\xFB\xFC\u0171]"), "u", F("[\xFD\u0177\xFF]"), "y", F("\xF1"), "n", F("[\xE7c]"), "k", F("\xDF"), "s", F(" & "), " and "];
      function Aa(a2) {
        var b2 = a2;
        b2.normalize && (b2 = b2.normalize("NFD").replace(ea, ""));
        return ca.call(this, b2.toLowerCase(), !a2.normalize && Ca);
      }
      ;
      var Ea = { encode: Da, F: false, G: "strict" };
      const Fa = /[^a-z0-9]+/, Ga = { b: "p", v: "f", w: "f", z: "s", x: "s", "\xDF": "s", d: "t", n: "m", c: "k", g: "k", j: "k", q: "k", i: "e", y: "e", u: "o" };
      function Da(a2) {
        a2 = Aa.call(this, a2).join(" ");
        const b2 = [];
        if (a2) {
          const c2 = a2.split(Fa), d2 = c2.length;
          for (let e = 0, f, g = 0; e < d2; e++)
            if ((a2 = c2[e]) && (!this.filter || !this.filter[a2])) {
              f = a2[0];
              let h = Ga[f] || f, k = h;
              for (let m = 1; m < a2.length; m++) {
                f = a2[m];
                const n = Ga[f] || f;
                n && n !== k && (h += n, k = n);
              }
              b2[g++] = h;
            }
        }
        return b2;
      }
      ;
      var Ia = { encode: Ha, F: false, G: "" };
      const Ja = [F("ae"), "a", F("oe"), "o", F("sh"), "s", F("th"), "t", F("ph"), "f", F("pf"), "f", F("(?![aeo])h(?![aeo])"), "", F("(?!^[aeo])h(?!^[aeo])"), ""];
      function Ha(a2, b2) {
        a2 && (a2 = Da.call(this, a2).join(" "), 2 < a2.length && (a2 = E(a2, Ja)), b2 || (1 < a2.length && (a2 = ha(a2)), a2 && (a2 = a2.split(" "))));
        return a2;
      }
      ;
      var La = { encode: Ka, F: false, G: "" };
      const Ma = F("(?!\\b)[aeo]");
      function Ka(a2) {
        a2 && (a2 = Ha.call(this, a2, true), 1 < a2.length && (a2 = a2.replace(Ma, "")), 1 < a2.length && (a2 = ha(a2)), a2 && (a2 = a2.split(" ")));
        return a2;
      }
      ;
      G["latin:default"] = ja;
      G["latin:simple"] = Ba;
      G["latin:balance"] = Ea;
      G["latin:advanced"] = Ia;
      G["latin:extra"] = La;
      const W = self;
      let Y;
      const Z = { Index: K, Document: Q, Worker: O, registerCharset: function(a2, b2) {
        G[a2] = b2;
      }, registerLanguage: function(a2, b2) {
        ka[a2] = b2;
      } };
      (Y = W.define) && Y.amd ? Y([], function() {
        return Z;
      }) : W.exports ? W.exports = Z : W.FlexSearch = Z;
    })(exports);
  }
});

// src/main.ts
__export(exports, {
  default: () => PowerSearch
});
var import_obsidian7 = __toModule(require("obsidian"));

// src/constants.ts
var SEARCH_RESULT_VIEW_TYPE = "search-result-view";

// src/core/anki.ts
var import_obsidian2 = __toModule(require("obsidian"));

// src/index.ts
var import_obsidian = __toModule(require("obsidian"));
var SearchIndex = class {
  constructor(searcher, type) {
    this.searcher = searcher;
    this.plugin = this.searcher.plugin;
    this.type = type;
    this.notes = [];
    this.errorShown = 0;
    this.plugin.indexes.push(this);
    this.setupIndex();
  }
  setupIndex() {
    return __async(this, null, function* () {
      if (this.plugin.settings.indexes[this.type]) {
        this.searcher.addIndexIfNotAlreadyAdded(this);
      } else
        yield this.searcher.removeIndex(this);
    });
  }
  loadNotes() {
    return __async(this, null, function* () {
      try {
        let origNotes = yield this.getOriginalNotes();
        this.beforeProduction(origNotes);
        this.notes = [];
        for (let o of origNotes) {
          this.notes.push({
            id: this.getIdFromOriginal(o),
            link: this.getLinkFromOriginal(o),
            name: this.getNameFromOriginal(o),
            type: this.type,
            search: yield this.getRawSearchDataFromOriginal(o),
            original: o
          });
        }
        return true;
      } catch (error) {
        if (!this.notes)
          this.notes = [];
        console.log(error);
        if (this.errorShown <= 2) {
          new import_obsidian.Notice(`Failed to load notes for the index of type: ${this.type}, see debugging log`);
          this.errorShown += 1;
        }
        return false;
      }
    });
  }
};

// src/utils.ts
function stripHTML(html) {
  let doc = new DOMParser().parseFromString(html, "text/html");
  return doc.body.textContent || "";
}

// src/core/anki.ts
var AnkiIndex = class extends SearchIndex {
  constructor(searcher) {
    super(searcher, "Anki Note");
    this.plugin.registerObsidianProtocolHandler("anki", (params) => invoke("guiBrowse", { query: `nid:${params.id}` }));
  }
  getOriginalNotes() {
    return __async(this, null, function* () {
      let ids = yield invoke("findNotes", { query: "deck:*" });
      let notes = yield invoke("notesInfo", { notes: ids });
      return notes;
    });
  }
  getIdFromOriginal(original) {
    return original.noteId;
  }
  getNameFromOriginal(original) {
    return original.noteId.toString();
  }
  getLinkFromOriginal(original) {
    return "obsidian://anki?" + String.raw`&id=` + encodeURIComponent(original.noteId);
  }
  getRawSearchDataFromOriginal(original) {
    return __async(this, null, function* () {
      return stripHTML(this.getFieldsText(original));
    });
  }
  getDisplayFromOriginal(original) {
    return __async(this, null, function* () {
      let htmlEl = createDiv({ cls: "power-search-results-card" });
      htmlEl.innerHTML = this.getFieldsText(original);
      this.renderMathForNote(htmlEl);
      yield this.fixImagesForNote(htmlEl);
      return htmlEl;
    });
  }
  beforeProduction(origNotes) {
    return __async(this, null, function* () {
    });
  }
  getFieldsText(original) {
    let fieldsText = "";
    for (let field in original.fields) {
      fieldsText += `${original.fields[field].value} |`;
    }
    return fieldsText;
  }
  renderMathForNote(el) {
    let str = el.innerHTML;
    let startDelimIndex = str.indexOf("\\(");
    let endDelimIndex = str.indexOf("\\)");
    let startIndex = 0;
    let strList = [];
    while (startDelimIndex != -1 && endDelimIndex != -1) {
      strList.push(str.substring(startIndex, startDelimIndex));
      let substring = str.substring(startDelimIndex + 2, endDelimIndex);
      strList.push((0, import_obsidian2.renderMath)(substring, true).innerHTML);
      startIndex = endDelimIndex + 2;
      startDelimIndex = str.indexOf("\\(", startIndex);
      endDelimIndex = str.indexOf("\\)", startIndex);
    }
    strList.push(str.substring(startIndex));
    el.innerHTML = strList.join("");
  }
  fixImagesForNote(el) {
    return __async(this, null, function* () {
      let imgs = Array.from(el.getElementsByTagName("img"));
      for (let img of imgs) {
        let imgBase64 = yield invoke("retrieveMediaFile", { filename: img.alt });
        img.src = `data:image/png;base64, ${imgBase64}`;
      }
      ;
    });
  }
};
var ANKI_PORT = 8765;
function invoke(action, params = {}) {
  return new Promise((resolve, reject) => {
    const xhr = new XMLHttpRequest();
    xhr.addEventListener("error", () => reject("failed to issue request"));
    xhr.addEventListener("load", () => {
      try {
        const response = JSON.parse(xhr.responseText);
        if (Object.getOwnPropertyNames(response).length != 2) {
          throw "response has an unexpected number of fields";
        }
        if (!response.hasOwnProperty("error")) {
          throw "response is missing required error field";
        }
        if (!response.hasOwnProperty("result")) {
          throw "response is missing required result field";
        }
        if (response.error) {
          throw response.error;
        }
        resolve(response.result);
      } catch (e) {
        reject(e);
      }
    });
    xhr.open("POST", "http://127.0.0.1:" + ANKI_PORT.toString());
    xhr.send(JSON.stringify({ action, version: 6, params }));
  });
}

// src/core/obs.ts
var import_obsidian3 = __toModule(require("obsidian"));
var ObsidianIndex = class extends SearchIndex {
  constructor(searcher) {
    super(searcher, "Obsidian File");
    this.fileTexts = {};
    this.modifiedFiles = [];
    this.firstLoad = true;
    this.plugin.app.vault.on("modify", (f) => this.onModify(f));
    this.plugin.app.vault.on("delete", (f) => this.onDelete(f));
    this.plugin.app.vault.on("create", (f) => this.onCreate(f));
  }
  onModify(f) {
    if (f instanceof import_obsidian3.TFile && this.modifiedFiles.indexOf(f) == -1)
      this.modifiedFiles.push(f);
  }
  onDelete(f) {
    if (f instanceof import_obsidian3.TFile && f.path in this.fileTexts)
      delete this.fileTexts[f.path];
  }
  onCreate(f) {
    return __async(this, null, function* () {
      if (f instanceof import_obsidian3.TFile)
        this.fileTexts[f.path] = yield this.plugin.app.vault.cachedRead(f);
    });
  }
  getOriginalNotes() {
    return __async(this, null, function* () {
      return this.plugin.app.vault.getMarkdownFiles();
    });
  }
  getNameFromOriginal(original) {
    return original.name;
  }
  getIdFromOriginal(original) {
    return original.path;
  }
  getRawSearchDataFromOriginal(original) {
    return __async(this, null, function* () {
      return this.fileTexts[original.path];
    });
  }
  getDisplayFromOriginal(original) {
    return __async(this, null, function* () {
      let el = createDiv({ cls: "power-search-results-card" });
      import_obsidian3.MarkdownRenderer.renderMarkdown(this.fileTexts[original.path], el, original.path, this.searcher.plugin.getView());
      return el;
    });
  }
  beforeProduction(origNotes) {
    return __async(this, null, function* () {
      if (this.firstLoad)
        for (let n of origNotes) {
          this.fileTexts[n.path] = yield this.plugin.app.vault.read(n);
        }
      else {
        for (let f of this.modifiedFiles)
          this.fileTexts[f.path] = yield this.plugin.app.vault.cachedRead(f);
      }
      this.firstLoad = false;
      this.modifiedFiles = [];
    });
  }
  getLinkFromOriginal(original) {
    let vaultName = this.plugin.app.vault.getName();
    return "obsidian://open?vault=" + encodeURIComponent(vaultName) + String.raw`&file=` + encodeURIComponent(original.path);
  }
};

// src/search.ts
var import_flexsearch = __toModule(require_flexsearch_bundle());
var import_obsidian4 = __toModule(require("obsidian"));

// node_modules/stemmer/index.js
var step2list = {
  ational: "ate",
  tional: "tion",
  enci: "ence",
  anci: "ance",
  izer: "ize",
  bli: "ble",
  alli: "al",
  entli: "ent",
  eli: "e",
  ousli: "ous",
  ization: "ize",
  ation: "ate",
  ator: "ate",
  alism: "al",
  iveness: "ive",
  fulness: "ful",
  ousness: "ous",
  aliti: "al",
  iviti: "ive",
  biliti: "ble",
  logi: "log"
};
var step3list = {
  icate: "ic",
  ative: "",
  alize: "al",
  iciti: "ic",
  ical: "ic",
  ful: "",
  ness: ""
};
var consonant = "[^aeiou]";
var vowel = "[aeiouy]";
var consonants = "(" + consonant + "[^aeiouy]*)";
var vowels = "(" + vowel + "[aeiou]*)";
var gt0 = new RegExp("^" + consonants + "?" + vowels + consonants);
var eq1 = new RegExp("^" + consonants + "?" + vowels + consonants + vowels + "?$");
var gt1 = new RegExp("^" + consonants + "?(" + vowels + consonants + "){2,}");
var vowelInStem = new RegExp("^" + consonants + "?" + vowel);
var consonantLike = new RegExp("^" + consonants + vowel + "[^aeiouwxy]$");
var sfxLl = /ll$/;
var sfxE = /^(.+?)e$/;
var sfxY = /^(.+?)y$/;
var sfxIon = /^(.+?(s|t))(ion)$/;
var sfxEdOrIng = /^(.+?)(ed|ing)$/;
var sfxAtOrBlOrIz = /(at|bl|iz)$/;
var sfxEED = /^(.+?)eed$/;
var sfxS = /^.+?[^s]s$/;
var sfxSsesOrIes = /^.+?(ss|i)es$/;
var sfxMultiConsonantLike = /([^aeiouylsz])\1$/;
var step2 = /^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/;
var step3 = /^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/;
var step4 = /^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/;
function stemmer(value) {
  var firstCharacterWasLowerCaseY;
  var match;
  value = String(value).toLowerCase();
  if (value.length < 3) {
    return value;
  }
  if (value.charCodeAt(0) === 121) {
    firstCharacterWasLowerCaseY = true;
    value = "Y" + value.slice(1);
  }
  if (sfxSsesOrIes.test(value)) {
    value = value.slice(0, -2);
  } else if (sfxS.test(value)) {
    value = value.slice(0, -1);
  }
  if (match = sfxEED.exec(value)) {
    if (gt0.test(match[1])) {
      value = value.slice(0, -1);
    }
  } else if ((match = sfxEdOrIng.exec(value)) && vowelInStem.test(match[1])) {
    value = match[1];
    if (sfxAtOrBlOrIz.test(value)) {
      value += "e";
    } else if (sfxMultiConsonantLike.test(value)) {
      value = value.slice(0, -1);
    } else if (consonantLike.test(value)) {
      value += "e";
    }
  }
  if ((match = sfxY.exec(value)) && vowelInStem.test(match[1])) {
    value = match[1] + "i";
  }
  if ((match = step2.exec(value)) && gt0.test(match[1])) {
    value = match[1] + step2list[match[2]];
  }
  if ((match = step3.exec(value)) && gt0.test(match[1])) {
    value = match[1] + step3list[match[2]];
  }
  if (match = step4.exec(value)) {
    if (gt1.test(match[1])) {
      value = match[1];
    }
  } else if ((match = sfxIon.exec(value)) && gt1.test(match[1])) {
    value = match[1];
  }
  if ((match = sfxE.exec(value)) && (gt1.test(match[1]) || eq1.test(match[1]) && !consonantLike.test(match[1]))) {
    value = match[1];
  }
  if (sfxLl.test(value) && gt1.test(value)) {
    value = value.slice(0, -1);
  }
  if (firstCharacterWasLowerCaseY) {
    value = "y" + value.slice(1);
  }
  return value;
}

// src/search.ts
var Searcher = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.refreshDebounces();
    this.index = new import_flexsearch.Index({
      stemmer
    });
    this.results = { query: "", res: [] };
    this.indexes = {};
    this.notes = [];
  }
  search(query) {
    return __async(this, null, function* () {
      if (!this._index_updating)
        this.debouncedRefreshIndex();
      yield this._search(query);
    });
  }
  _search(query, offset = 0, paginate = false) {
    return __async(this, null, function* () {
      this.results = { query, res: [] };
      if (!query)
        return;
      let rs = this.index.search(query, {
        limit: this.plugin.settings.pageSize,
        offset,
        suggest: true
      });
      if (!(rs || rs.length)) {
      } else {
        for (let r of rs) {
          let n = this.notes.filter((n2) => n2.id == r)[0];
          this.results.res.push({
            id: n.id,
            name: n.name,
            link: n.link,
            type: n.type,
            highlightedSearch: this.highlightSearch(n.search, query),
            display: yield n.index.getDisplayFromOriginal(n.original)
          });
        }
      }
      let view = this.plugin.getView();
      if (!paginate)
        yield view.redraw();
      else if (rs.length > 0)
        yield view._redraw();
    });
  }
  removeIndex(idx) {
    return __async(this, null, function* () {
      yield idx.loadNotes();
      idx.notes.forEach((n) => this.index.remove(n.id));
      delete this.indexes[idx.type];
    });
  }
  addIndexIfNotAlreadyAdded(index) {
    if (!(index.type in this.indexes)) {
      this.indexes[index.type] = index;
      this.updateIndex(false, index);
    }
  }
  highlightSearch(searchText, query) {
    return searchText;
  }
  updateIndex(update = true, idx = "all") {
    return __async(this, null, function* () {
      this._index_updating = true;
      if (!(idx == "all"))
        yield this._doUpdateIndex(update, idx);
      else {
        for (let i in this.indexes) {
          yield this._doUpdateIndex(update, this.indexes[i]);
        }
      }
      this._refreshNotesList();
      this._index_updating = false;
    });
  }
  _doUpdateIndex(update, idx) {
    return __async(this, null, function* () {
      yield idx.loadNotes();
      if (update)
        idx.notes.forEach((n) => this.index.add(n.id, n.search));
      else {
        idx.notes.forEach((n) => {
          this.index.update(n.id, n.search);
        });
      }
    });
  }
  _refreshNotesList() {
    this.notes = [];
    for (let i in this.indexes) {
      this.indexes[i].notes.forEach((n) => {
        let searchNote = Object.assign({ index: this.indexes[i] }, n);
        this.notes.push(searchNote);
      });
    }
  }
  _searchCurrent(block) {
    let mv = this.plugin.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (mv) {
      let editor = mv.editor;
      if (block) {
        let query = "";
        let origLineNo = editor.getCursor().line;
        let lineCount = editor.lineCount();
        let lineNo = origLineNo;
        let line = editor.getLine(lineNo);
        while (line.length != 0) {
          line = editor.getLine(lineNo);
          if (line)
            query = line + ` ${query}`;
          if (lineNo == 0)
            break;
          lineNo -= 1;
        }
        lineNo = origLineNo + 1;
        line = editor.getLine(lineNo);
        while (line) {
          line = editor.getLine(lineNo);
          if (line)
            query += ` ${line}`;
          if (lineNo == lineCount - 1)
            break;
          lineNo += 1;
        }
        this.search(query);
      } else
        this.search(editor.getLine(editor.getCursor().line));
    }
  }
  _debRefreshIndexThenCall(func) {
    function new_function(args) {
      if (!this._index_updating)
        this.debouncedRefreshIndex();
      func(args);
    }
    return new_function;
  }
  refreshDebounces() {
    this.debouncedRefreshIndex = (0, import_obsidian4.debounce)(this.updateIndex, this.plugin.settings.refreshDebounce, true);
    this._debouncedSearch = (0, import_obsidian4.debounce)((query) => this.search(query), this.plugin.settings.searchDebounce, true);
    this._debouncedSearchCurrent = (0, import_obsidian4.debounce)((block) => this._searchCurrent(block), this.plugin.settings.searchDebounce, true);
    this.debouncedSearch = this._debRefreshIndexThenCall(this._debouncedSearch);
    this.debouncedSearchCurrent = this._debRefreshIndexThenCall(this._debouncedSearchCurrent);
  }
};

// src/settings.ts
var import_obsidian5 = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  searchDebounce: 1e3,
  refreshDebounce: 2e3,
  searchBlock: true,
  pageSize: 10,
  indexes: {}
};
var PowerSearchSettingsTab = class extends import_obsidian5.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Power Search Settings" });
    new import_obsidian5.Setting(containerEl).setName("Search after time").setDesc("This is the time, in milliseconds, after you stop typing/stop selecting things that the search occurs (debounce timeout)").addSlider((slider) => slider.setLimits(500, 5e3, 100).setValue(this.plugin.settings.searchDebounce).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
      this.plugin.settings.searchDebounce = value;
      yield this.plugin.saveSettings();
      this.plugin.search.refreshDebounces();
    })));
    new import_obsidian5.Setting(containerEl).setName("Refresh after time").setDesc("This is the time, in milliseconds, after you stop searching that the index refreshes i.e. changes to the searchable content are loaded into the search index (debounce timeout)").addSlider((slider) => slider.setLimits(3e3, 3e4, 500).setValue(this.plugin.settings.refreshDebounce).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
      this.plugin.settings.refreshDebounce = value;
      yield this.plugin.saveSettings();
      this.plugin.search.refreshDebounces();
    })));
    new import_obsidian5.Setting(containerEl).setName("Search text blocks").setDesc(`For search on type, queries are built from blocks of text surrounded by whitespace if true and individual lines if false (RESTART REQUIRED TO ENACT CHANGES)`).addToggle((toggle) => toggle.setValue(this.plugin.settings.searchBlock).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.searchBlock = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian5.Setting(containerEl).setName("Page Size").setDesc(`Number of results shown per search result page`).addSlider((slider) => slider.setLimits(1, 100, 1).setValue(this.plugin.settings.pageSize).setDynamicTooltip().onChange((value) => __async(this, null, function* () {
      this.plugin.settings.pageSize = value;
      yield this.plugin.saveSettings();
    })));
    containerEl.createEl("h3", { text: "Search Indexes" });
    this.plugin.indexes.forEach((i) => {
      new import_obsidian5.Setting(containerEl).setName(i.type).setDesc(`Add notes of type ${i.type} to the content to be searched`).addToggle((toggle) => toggle.setValue(this.plugin.settings.indexes[i.type]).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.indexes[i.type] = value;
        yield this.plugin.saveSettings();
        yield i.setupIndex();
        this.plugin.getView().debouncedRedraw();
      })));
    });
  }
};

// src/view.ts
var import_obsidian6 = __toModule(require("obsidian"));
var SearchResultView = class extends import_obsidian6.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.debouncedRedraw = (0, import_obsidian6.debounce)(() => this.redraw(), 1e3);
  }
  redraw() {
    return __async(this, null, function* () {
      this.page = 1;
      yield this._redraw();
    });
  }
  _redraw() {
    return __async(this, null, function* () {
      let arrowEl = createDiv({ cls: "power-search-arrow-bar" });
      let leftArrow = arrowEl.createEl("a");
      leftArrow.innerHTML = "&laquo; ";
      leftArrow.classList.add("power-search-arrow-bar-item");
      leftArrow.addEventListener("click", () => this.prevPage());
      let pageNo = arrowEl.createSpan();
      pageNo.innerHTML = this.page.toString();
      pageNo.classList.add("power-search-arrow-bar-item");
      let rightArrow = arrowEl.createEl("a");
      rightArrow.classList.add("power-search-arrow-bar-item");
      rightArrow.innerHTML = " &raquo;";
      rightArrow.addEventListener("click", () => this.nextPage());
      let res = createDiv({ cls: "power-search-results-children" });
      let idxs = this.plugin.search.indexes;
      if (!Object.keys(idxs).length)
        res.createDiv({ cls: "power-search-results-type", text: "No indexes activated! They can be activated in the Power Search settings tab." });
      else if (this.plugin.search.results.res.length == 0)
        res.createDiv({ cls: "power-search-results-type", text: "No results found! Check for any errors in loading indexes (in a notice that popped up a few times or the console)" });
      for (let e of this.plugin.search.results.res) {
        let ch = res.createDiv({ cls: "power-search-results-child" });
        let headEl = ch.createDiv({ cls: "power-search-results-type" });
        headEl.innerHTML = `<a href="${e.link}">${e.name}</a> Type: ${e.type}`;
        ch.append(e.display);
      }
      this.containerEl.children[1].empty();
      this.containerEl.children[1].append(arrowEl);
      this.containerEl.children[1].append(res);
    });
  }
  nextPage() {
    if (this.plugin.search.results.res.length) {
      this.page += 1;
      let off = (this.page - 1) * this.plugin.settings.pageSize;
      this.plugin.search._search(this.plugin.search.results.query, off, true);
    }
  }
  prevPage() {
    if (this.page != 1) {
      this.page -= 1;
      let off = (this.page - 1) * this.plugin.settings.pageSize;
      this.plugin.search._search(this.plugin.search.results.query, off, true);
    }
  }
  getViewType() {
    return SEARCH_RESULT_VIEW_TYPE;
  }
  getDisplayText() {
    return "Power Search";
  }
  getIcon() {
    return "search";
  }
};

// src/main.ts
var PowerSearch = class extends import_obsidian7.Plugin {
  onload() {
    return __async(this, null, function* () {
      console.log("Power Search plugin loading");
      yield this.loadSettings();
      this.indexes = [];
      this.registerView(SEARCH_RESULT_VIEW_TYPE, (leaf) => new SearchResultView(leaf, this));
      this.addCommands();
      this.search = new Searcher(this);
      this.app.workspace.onLayoutReady(() => this.initPlugin());
    });
  }
  initPlugin() {
    new AnkiIndex(this.search);
    new ObsidianIndex(this.search);
    this.addSettingTab(new PowerSearchSettingsTab(this.app, this));
    this.initLeaf();
    this.registerEvents();
  }
  addCommands() {
    this.addCommand({
      id: "open-power-search-results-view",
      name: "Open View",
      callback: () => this.initLeaf()
    });
  }
  registerEvents() {
    this.registerDomEvent(document, "selectionchange", () => {
      this.search.debouncedSearch(document.getSelection().toString());
    });
    this.registerDomEvent(document, "keydown", () => this.search.debouncedSearchCurrent(this.settings.searchBlock));
  }
  onunload() {
    console.log("Power Search plugin unloading");
    this.app.workspace.detachLeavesOfType(SEARCH_RESULT_VIEW_TYPE);
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  getView() {
    for (let leaf of this.app.workspace.getLeavesOfType(SEARCH_RESULT_VIEW_TYPE)) {
      let view = leaf.view;
      if (view instanceof SearchResultView) {
        return view;
      }
    }
    return null;
  }
  initLeaf() {
    let leaves = this.app.workspace.getLeavesOfType(SEARCH_RESULT_VIEW_TYPE);
    if (leaves.length) {
    } else {
      this.app.workspace.getRightLeaf(false).setViewState({
        type: SEARCH_RESULT_VIEW_TYPE,
        active: true
      });
    }
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibm9kZV9tb2R1bGVzL2ZsZXhzZWFyY2gvZGlzdC9mbGV4c2VhcmNoLmJ1bmRsZS5qcyIsICJzcmMvbWFpbi50cyIsICJzcmMvY29uc3RhbnRzLnRzIiwgInNyYy9jb3JlL2Fua2kudHMiLCAic3JjL2luZGV4LnRzIiwgInNyYy91dGlscy50cyIsICJzcmMvY29yZS9vYnMudHMiLCAic3JjL3NlYXJjaC50cyIsICJub2RlX21vZHVsZXMvc3RlbW1lci9pbmRleC5qcyIsICJzcmMvc2V0dGluZ3MudHMiLCAic3JjL3ZpZXcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8qKiFcclxuICogRmxleFNlYXJjaC5qcyB2MC43LjIxIChCdW5kbGUpXHJcbiAqIENvcHlyaWdodCAyMDE4LTIwMjEgTmV4dGFwcHMgR21iSFxyXG4gKiBBdXRob3I6IFRob21hcyBXaWxrZXJsaW5nXHJcbiAqIExpY2VuY2U6IEFwYWNoZS0yLjBcclxuICogaHR0cHM6Ly9naXRodWIuY29tL25leHRhcHBzLWRlL2ZsZXhzZWFyY2hcclxuICovXG4oZnVuY3Rpb24gX2Yoc2VsZil7J3VzZSBzdHJpY3QnO3RyeXtpZihtb2R1bGUpc2VsZj1tb2R1bGV9Y2F0Y2goZSl7fXNlbGYuX2ZhY3Rvcnk9X2Y7dmFyIHQ7ZnVuY3Rpb24gdShhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIGE/YTohMH1mdW5jdGlvbiBhYShhKXtjb25zdCBiPUFycmF5KGEpO2ZvcihsZXQgYz0wO2M8YTtjKyspYltjXT12KCk7cmV0dXJuIGJ9ZnVuY3Rpb24gdigpe3JldHVybiBPYmplY3QuY3JlYXRlKG51bGwpfWZ1bmN0aW9uIGJhKGEsYil7cmV0dXJuIGIubGVuZ3RoLWEubGVuZ3RofWZ1bmN0aW9uIHgoYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfWZ1bmN0aW9uIEMoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhfWZ1bmN0aW9uIEQoYSl7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGF9O2Z1bmN0aW9uIGNhKGEsYil7dmFyIGM9ZGE7aWYoYSYmKGImJihhPUUoYSxiKSksdGhpcy5IJiYoYT1FKGEsdGhpcy5IKSksdGhpcy5KJiYxPGEubGVuZ3RoJiYoYT1FKGEsdGhpcy5KKSksY3x8XCJcIj09PWMpKXthPWEuc3BsaXQoYyk7aWYodGhpcy5maWx0ZXIpe2I9dGhpcy5maWx0ZXI7Yz1hLmxlbmd0aDtjb25zdCBkPVtdO2ZvcihsZXQgZT0wLGY9MDtlPGM7ZSsrKXtjb25zdCBnPWFbZV07ZyYmIWJbZ10mJihkW2YrK109Zyl9YT1kfXJldHVybiBhfXJldHVybiBhfWNvbnN0IGRhPS9bXFxwe1p9XFxwe1N9XFxwe1B9XFxwe0N9XSsvdSxlYT0vW1xcdTAzMDAtXFx1MDM2Zl0vZztcbmZ1bmN0aW9uIGZhKGEsYil7Y29uc3QgYz1PYmplY3Qua2V5cyhhKSxkPWMubGVuZ3RoLGU9W107bGV0IGY9XCJcIixnPTA7Zm9yKGxldCBoPTAsayxtO2g8ZDtoKyspaz1jW2hdLChtPWFba10pPyhlW2crK109RihiP1wiKD8hXFxcXGIpXCIraytcIihcXFxcYnxfKVwiOmspLGVbZysrXT1tKTpmKz0oZj9cInxcIjpcIlwiKStrO2YmJihlW2crK109RihiP1wiKD8hXFxcXGIpKFwiK2YrXCIpKFxcXFxifF8pXCI6XCIoXCIrZitcIilcIiksZVtnXT1cIlwiKTtyZXR1cm4gZX1mdW5jdGlvbiBFKGEsYil7Zm9yKGxldCBjPTAsZD1iLmxlbmd0aDtjPGQmJihhPWEucmVwbGFjZShiW2NdLGJbYysxXSksYSk7Yys9Mik7cmV0dXJuIGF9ZnVuY3Rpb24gRihhKXtyZXR1cm4gbmV3IFJlZ0V4cChhLFwiZ1wiKX1mdW5jdGlvbiBoYShhKXtsZXQgYj1cIlwiLGM9XCJcIjtmb3IobGV0IGQ9MCxlPWEubGVuZ3RoLGY7ZDxlO2QrKykoZj1hW2RdKSE9PWMmJihiKz1jPWYpO3JldHVybiBifTt2YXIgamE9e2VuY29kZTppYSxGOiExLEc6XCJcIn07ZnVuY3Rpb24gaWEoYSl7cmV0dXJuIGNhLmNhbGwodGhpcywoXCJcIithKS50b0xvd2VyQ2FzZSgpLCExKX07Y29uc3Qga2E9e30sRz17fTtmdW5jdGlvbiBsYShhKXtJKGEsXCJhZGRcIik7SShhLFwiYXBwZW5kXCIpO0koYSxcInNlYXJjaFwiKTtJKGEsXCJ1cGRhdGVcIik7SShhLFwicmVtb3ZlXCIpfWZ1bmN0aW9uIEkoYSxiKXthW2IrXCJBc3luY1wiXT1mdW5jdGlvbigpe2NvbnN0IGM9dGhpcyxkPWFyZ3VtZW50czt2YXIgZT1kW2QubGVuZ3RoLTFdO2xldCBmO0QoZSkmJihmPWUsZGVsZXRlIGRbZC5sZW5ndGgtMV0pO2U9bmV3IFByb21pc2UoZnVuY3Rpb24oZyl7c2V0VGltZW91dChmdW5jdGlvbigpe2MuYXN5bmM9ITA7Y29uc3QgaD1jW2JdLmFwcGx5KGMsZCk7Yy5hc3luYz0hMTtnKGgpfSl9KTtyZXR1cm4gZj8oZS50aGVuKGYpLHRoaXMpOmV9fTtmdW5jdGlvbiBtYShhLGIsYyxkKXtjb25zdCBlPWEubGVuZ3RoO2xldCBmPVtdLGcsaCxrPTA7ZCYmKGQ9W10pO2ZvcihsZXQgbT1lLTE7MDw9bTttLS0pe2NvbnN0IG49YVttXSx3PW4ubGVuZ3RoLHE9digpO2xldCByPSFnO2ZvcihsZXQgbD0wO2w8dztsKyspe2NvbnN0IHA9bltsXSx6PXAubGVuZ3RoO2lmKHopZm9yKGxldCBCPTAsQSx5O0I8ejtCKyspaWYoeT1wW0JdLGcpe2lmKGdbeV0pe2lmKCFtKWlmKGMpYy0tO2Vsc2UgaWYoZltrKytdPXksaz09PWIpcmV0dXJuIGY7aWYobXx8ZClxW3ldPTE7cj0hMH1pZihkJiYoaFt5XT0oQT1oW3ldKT8rK0E6QT0xLEE8ZSkpe2NvbnN0IEg9ZFtBLTJdfHwoZFtBLTJdPVtdKTtIW0gubGVuZ3RoXT15fX1lbHNlIHFbeV09MX1pZihkKWd8fChoPXEpO2Vsc2UgaWYoIXIpcmV0dXJuW107Zz1xfWlmKGQpZm9yKGxldCBtPWQubGVuZ3RoLTEsbix3OzA8PW07bS0tKXtuPWRbbV07dz1uLmxlbmd0aDtmb3IobGV0IHE9MCxyO3E8dztxKyspaWYocj1cbm5bcV0sIWdbcl0pe2lmKGMpYy0tO2Vsc2UgaWYoZltrKytdPXIsaz09PWIpcmV0dXJuIGY7Z1tyXT0xfX1yZXR1cm4gZn1mdW5jdGlvbiBuYShhLGIpe2NvbnN0IGM9digpLGQ9digpLGU9W107Zm9yKGxldCBmPTA7ZjxhLmxlbmd0aDtmKyspY1thW2ZdXT0xO2ZvcihsZXQgZj0wLGc7ZjxiLmxlbmd0aDtmKyspe2c9YltmXTtmb3IobGV0IGg9MCxrO2g8Zy5sZW5ndGg7aCsrKWs9Z1toXSxjW2tdJiYhZFtrXSYmKGRba109MSxlW2UubGVuZ3RoXT1rKX1yZXR1cm4gZX07ZnVuY3Rpb24gSihhKXt0aGlzLmw9ITAhPT1hJiZhO3RoaXMuY2FjaGU9digpO3RoaXMuaD1bXX1mdW5jdGlvbiBvYShhLGIsYyl7QyhhKSYmKGE9YS5xdWVyeSk7bGV0IGQ9dGhpcy5jYWNoZS5nZXQoYSk7ZHx8KGQ9dGhpcy5zZWFyY2goYSxiLGMpLHRoaXMuY2FjaGUuc2V0KGEsZCkpO3JldHVybiBkfUoucHJvdG90eXBlLnNldD1mdW5jdGlvbihhLGIpe2lmKCF0aGlzLmNhY2hlW2FdKXt2YXIgYz10aGlzLmgubGVuZ3RoO2M9PT10aGlzLmw/ZGVsZXRlIHRoaXMuY2FjaGVbdGhpcy5oW2MtMV1dOmMrKztmb3IoLS1jOzA8YztjLS0pdGhpcy5oW2NdPXRoaXMuaFtjLTFdO3RoaXMuaFswXT1hfXRoaXMuY2FjaGVbYV09Yn07Si5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGEpe2NvbnN0IGI9dGhpcy5jYWNoZVthXTtpZih0aGlzLmwmJmImJihhPXRoaXMuaC5pbmRleE9mKGEpKSl7Y29uc3QgYz10aGlzLmhbYS0xXTt0aGlzLmhbYS0xXT10aGlzLmhbYV07dGhpcy5oW2FdPWN9cmV0dXJuIGJ9O2NvbnN0IHFhPXttZW1vcnk6e2NoYXJzZXQ6XCJsYXRpbjpleHRyYVwiLEQ6MyxCOjQsbTohMX0scGVyZm9ybWFuY2U6e0Q6MyxCOjMsczohMSxjb250ZXh0OntkZXB0aDoyLEQ6MX19LG1hdGNoOntjaGFyc2V0OlwibGF0aW46ZXh0cmFcIixHOlwicmV2ZXJzZVwifSxzY29yZTp7Y2hhcnNldDpcImxhdGluOmFkdmFuY2VkXCIsRDoyMCxCOjMsY29udGV4dDp7ZGVwdGg6MyxEOjl9fSxcImRlZmF1bHRcIjp7fX07ZnVuY3Rpb24gcmEoYSxiLGMsZCxlLGYpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjb25zdCBnPWEoYyxKU09OLnN0cmluZ2lmeShmKSk7ZyYmZy50aGVuP2cudGhlbihmdW5jdGlvbigpe2IuZXhwb3J0KGEsYixjLGQsZSsxKX0pOmIuZXhwb3J0KGEsYixjLGQsZSsxKX0pfTtmdW5jdGlvbiBLKGEsYil7aWYoISh0aGlzIGluc3RhbmNlb2YgSykpcmV0dXJuIG5ldyBLKGEpO3ZhciBjO2lmKGEpe3goYSk/YT1xYVthXTooYz1hLnByZXNldCkmJihhPU9iamVjdC5hc3NpZ24oe30sY1tjXSxhKSk7Yz1hLmNoYXJzZXQ7dmFyIGQ9YS5sYW5nO3goYykmJigtMT09PWMuaW5kZXhPZihcIjpcIikmJihjKz1cIjpkZWZhdWx0XCIpLGM9R1tjXSk7eChkKSYmKGQ9a2FbZF0pfWVsc2UgYT17fTtsZXQgZSxmLGc9YS5jb250ZXh0fHx7fTt0aGlzLmVuY29kZT1hLmVuY29kZXx8YyYmYy5lbmNvZGV8fGlhO3RoaXMucmVnaXN0ZXI9Ynx8digpO3RoaXMuRD1lPWEucmVzb2x1dGlvbnx8OTt0aGlzLkc9Yj1jJiZjLkd8fGEudG9rZW5pemV8fFwic3RyaWN0XCI7dGhpcy5kZXB0aD1cInN0cmljdFwiPT09YiYmZy5kZXB0aDt0aGlzLmw9dShnLmJpZGlyZWN0aW9uYWwpO3RoaXMucz1mPXUoYS5vcHRpbWl6ZSk7dGhpcy5tPXUoYS5mYXN0dXBkYXRlKTt0aGlzLkI9YS5taW5sZW5ndGh8fDE7dGhpcy5DPVxuYS5ib29zdDt0aGlzLm1hcD1mP2FhKGUpOnYoKTt0aGlzLkE9ZT1nLnJlc29sdXRpb258fDE7dGhpcy5oPWY/YWEoZSk6digpO3RoaXMuRj1jJiZjLkZ8fGEucnRsO3RoaXMuSD0oYj1hLm1hdGNoZXJ8fGQmJmQuSCkmJmZhKGIsITEpO3RoaXMuSj0oYj1hLnN0ZW1tZXJ8fGQmJmQuSikmJmZhKGIsITApO2lmKGM9Yj1hLmZpbHRlcnx8ZCYmZC5maWx0ZXIpe2M9YjtkPXYoKTtmb3IobGV0IGg9MCxrPWMubGVuZ3RoO2g8aztoKyspZFtjW2hdXT0xO2M9ZH10aGlzLmZpbHRlcj1jO3RoaXMuY2FjaGU9KGI9YS5jYWNoZSkmJm5ldyBKKGIpfXQ9Sy5wcm90b3R5cGU7dC5hcHBlbmQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5hZGQoYSxiLCEwKX07XG50LmFkZD1mdW5jdGlvbihhLGIsYyxkKXtpZihiJiYoYXx8MD09PWEpKXtpZighZCYmIWMmJnRoaXMucmVnaXN0ZXJbYV0pcmV0dXJuIHRoaXMudXBkYXRlKGEsYik7Yj10aGlzLmVuY29kZShiKTtpZihkPWIubGVuZ3RoKXtjb25zdCBtPXYoKSxuPXYoKSx3PXRoaXMuZGVwdGgscT10aGlzLkQ7Zm9yKGxldCByPTA7cjxkO3IrKyl7bGV0IGw9Ylt0aGlzLkY/ZC0xLXI6cl07dmFyIGU9bC5sZW5ndGg7aWYobCYmZT49dGhpcy5CJiYod3x8IW5bbF0pKXt2YXIgZj1MKHEsZCxyKSxnPVwiXCI7c3dpdGNoKHRoaXMuRyl7Y2FzZSBcImZ1bGxcIjppZigzPGUpe2ZvcihmPTA7ZjxlO2YrKylmb3IodmFyIGg9ZTtoPmY7aC0tKWlmKGgtZj49dGhpcy5CKXt2YXIgaz1MKHEsZCxyLGUsZik7Zz1sLnN1YnN0cmluZyhmLGgpO00odGhpcyxuLGcsayxhLGMpfWJyZWFrfWNhc2UgXCJyZXZlcnNlXCI6aWYoMjxlKXtmb3IoaD1lLTE7MDxoO2gtLSlnPWxbaF0rZyxnLmxlbmd0aD49dGhpcy5CJiZNKHRoaXMsbixcbmcsTChxLGQscixlLGgpLGEsYyk7Zz1cIlwifWNhc2UgXCJmb3J3YXJkXCI6aWYoMTxlKXtmb3IoaD0wO2g8ZTtoKyspZys9bFtoXSxnLmxlbmd0aD49dGhpcy5CJiZNKHRoaXMsbixnLGYsYSxjKTticmVha31kZWZhdWx0OmlmKHRoaXMuQyYmKGY9TWF0aC5taW4oZi90aGlzLkMoYixsLHIpfDAscS0xKSksTSh0aGlzLG4sbCxmLGEsYyksdyYmMTxkJiZyPGQtMSlmb3IoZT12KCksZz10aGlzLkEsZj1sLGg9TWF0aC5taW4odysxLGQtciksZVtmXT0xLGs9MTtrPGg7aysrKWlmKChsPWJbdGhpcy5GP2QtMS1yLWs6citrXSkmJmwubGVuZ3RoPj10aGlzLkImJiFlW2xdKXtlW2xdPTE7Y29uc3QgcD10aGlzLmwmJmw+ZjtNKHRoaXMsbSxwP2Y6bCxMKGcrKGQvMj5nPzA6MSksZCxyLGgtMSxrLTEpLGEsYyxwP2w6Zil9fX19dGhpcy5tfHwodGhpcy5yZWdpc3RlclthXT0xKX19cmV0dXJuIHRoaXN9O1xuZnVuY3Rpb24gTChhLGIsYyxkLGUpe3JldHVybiBjJiYxPGE/YisoZHx8MCk8PWE/YysoZXx8MCk6KGEtMSkvKGIrKGR8fDApKSooYysoZXx8MCkpKzF8MDowfWZ1bmN0aW9uIE0oYSxiLGMsZCxlLGYsZyl7bGV0IGg9Zz9hLmg6YS5tYXA7aWYoIWJbY118fGcmJiFiW2NdW2ddKWEucyYmKGg9aFtkXSksZz8oYj1iW2NdfHwoYltjXT12KCkpLGJbZ109MSxoPWhbZ118fChoW2ddPXYoKSkpOmJbY109MSxoPWhbY118fChoW2NdPVtdKSxhLnN8fChoPWhbZF18fChoW2RdPVtdKSksZiYmLTEhPT1oLmluZGV4T2YoZSl8fChoW2gubGVuZ3RoXT1lLGEubSYmKGE9YS5yZWdpc3RlcltlXXx8KGEucmVnaXN0ZXJbZV09W10pLGFbYS5sZW5ndGhdPWgpKX1cbnQuc2VhcmNoPWZ1bmN0aW9uKGEsYixjKXtjfHwoIWImJkMoYSk/KGM9YSxhPWMucXVlcnkpOkMoYikmJihjPWIpKTtsZXQgZD1bXSxlO2xldCBmLGc9MDtpZihjKXtiPWMubGltaXQ7Zz1jLm9mZnNldHx8MDt2YXIgaD1jLmNvbnRleHQ7Zj1jLnN1Z2dlc3R9aWYoYSYmKGE9dGhpcy5lbmNvZGUoYSksZT1hLmxlbmd0aCwxPGUpKXtjPXYoKTt2YXIgaz1bXTtmb3IobGV0IG49MCx3PTAscTtuPGU7bisrKWlmKChxPWFbbl0pJiZxLmxlbmd0aD49dGhpcy5CJiYhY1txXSlpZih0aGlzLnN8fGZ8fHRoaXMubWFwW3FdKWtbdysrXT1xLGNbcV09MTtlbHNlIHJldHVybiBkO2E9aztlPWEubGVuZ3RofWlmKCFlKXJldHVybiBkO2J8fChiPTEwMCk7aD10aGlzLmRlcHRoJiYxPGUmJiExIT09aDtjPTA7bGV0IG07aD8obT1hWzBdLGM9MSk6MTxlJiZhLnNvcnQoYmEpO2ZvcihsZXQgbix3O2M8ZTtjKyspe3c9YVtjXTtoPyhuPXNhKHRoaXMsZCxmLGIsZywyPT09ZSx3LG0pLGYmJiExPT09biYmZC5sZW5ndGh8fFxuKG09dykpOm49c2EodGhpcyxkLGYsYixnLDE9PT1lLHcpO2lmKG4pcmV0dXJuIG47aWYoZiYmYz09PWUtMSl7az1kLmxlbmd0aDtpZighayl7aWYoaCl7aD0wO2M9LTE7Y29udGludWV9cmV0dXJuIGR9aWYoMT09PWspcmV0dXJuIHRhKGRbMF0sYixnKX19cmV0dXJuIG1hKGQsYixnLGYpfTtcbmZ1bmN0aW9uIHNhKGEsYixjLGQsZSxmLGcsaCl7bGV0IGs9W10sbT1oP2EuaDphLm1hcDthLnN8fChtPXVhKG0sZyxoLGEubCkpO2lmKG0pe2xldCBuPTA7Y29uc3Qgdz1NYXRoLm1pbihtLmxlbmd0aCxoP2EuQTphLkQpO2ZvcihsZXQgcT0wLHI9MCxsLHA7cTx3O3ErKylpZihsPW1bcV0paWYoYS5zJiYobD11YShsLGcsaCxhLmwpKSxlJiZsJiZmJiYocD1sLmxlbmd0aCxwPD1lPyhlLT1wLGw9bnVsbCk6KGw9bC5zbGljZShlKSxlPTApKSxsJiYoa1tuKytdPWwsZiYmKHIrPWwubGVuZ3RoLHI+PWQpKSlicmVhaztpZihuKXtpZihmKXJldHVybiB0YShrLGQsMCk7YltiLmxlbmd0aF09aztyZXR1cm59fXJldHVybiFjJiZrfWZ1bmN0aW9uIHRhKGEsYixjKXthPTE9PT1hLmxlbmd0aD9hWzBdOltdLmNvbmNhdC5hcHBseShbXSxhKTtyZXR1cm4gY3x8YS5sZW5ndGg+Yj9hLnNsaWNlKGMsYytiKTphfVxuZnVuY3Rpb24gdWEoYSxiLGMsZCl7Yz8oZD1kJiZiPmMsYT0oYT1hW2Q/YjpjXSkmJmFbZD9jOmJdKTphPWFbYl07cmV0dXJuIGF9dC5jb250YWluPWZ1bmN0aW9uKGEpe3JldHVybiEhdGhpcy5yZWdpc3RlclthXX07dC51cGRhdGU9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5yZW1vdmUoYSkuYWRkKGEsYil9O1xudC5yZW1vdmU9ZnVuY3Rpb24oYSxiKXtjb25zdCBjPXRoaXMucmVnaXN0ZXJbYV07aWYoYyl7aWYodGhpcy5tKWZvcihsZXQgZD0wLGU7ZDxjLmxlbmd0aDtkKyspZT1jW2RdLGUuc3BsaWNlKGUuaW5kZXhPZihhKSwxKTtlbHNlIE4odGhpcy5tYXAsYSx0aGlzLkQsdGhpcy5zKSx0aGlzLmRlcHRoJiZOKHRoaXMuaCxhLHRoaXMuQSx0aGlzLnMpO2J8fGRlbGV0ZSB0aGlzLnJlZ2lzdGVyW2FdO2lmKHRoaXMuY2FjaGUpe2I9dGhpcy5jYWNoZTtmb3IobGV0IGQ9MCxlLGY7ZDxiLmgubGVuZ3RoO2QrKylmPWIuaFtkXSxlPWIuY2FjaGVbZl0sLTEhPT1lLmluZGV4T2YoYSkmJihiLmguc3BsaWNlKGQtLSwxKSxkZWxldGUgYi5jYWNoZVtmXSl9fXJldHVybiB0aGlzfTtcbmZ1bmN0aW9uIE4oYSxiLGMsZCxlKXtsZXQgZj0wO2lmKGEuY29uc3RydWN0b3I9PT1BcnJheSlpZihlKWI9YS5pbmRleE9mKGIpLC0xIT09Yj8xPGEubGVuZ3RoJiYoYS5zcGxpY2UoYiwxKSxmKyspOmYrKztlbHNle2U9TWF0aC5taW4oYS5sZW5ndGgsYyk7Zm9yKGxldCBnPTAsaDtnPGU7ZysrKWlmKGg9YVtnXSlmPU4oaCxiLGMsZCxlKSxkfHxmfHxkZWxldGUgYVtnXX1lbHNlIGZvcihsZXQgZyBpbiBhKShmPU4oYVtnXSxiLGMsZCxlKSl8fGRlbGV0ZSBhW2ddO3JldHVybiBmfXQuc2VhcmNoQ2FjaGU9b2E7XG50LmV4cG9ydD1mdW5jdGlvbihhLGIsYyxkLGUpe2xldCBmLGc7c3dpdGNoKGV8fChlPTApKXtjYXNlIDA6Zj1cInJlZ1wiO2lmKHRoaXMubSl7Zz12KCk7Zm9yKGxldCBoIGluIHRoaXMucmVnaXN0ZXIpZ1toXT0xfWVsc2UgZz10aGlzLnJlZ2lzdGVyO2JyZWFrO2Nhc2UgMTpmPVwiY2ZnXCI7Zz17ZG9jOjAsb3B0OnRoaXMucz8xOjB9O2JyZWFrO2Nhc2UgMjpmPVwibWFwXCI7Zz10aGlzLm1hcDticmVhaztjYXNlIDM6Zj1cImN0eFwiO2c9dGhpcy5oO2JyZWFrO2RlZmF1bHQ6cmV0dXJufXJhKGEsYnx8dGhpcyxjP2MrXCIuXCIrZjpmLGQsZSxnKTtyZXR1cm4hMH07dC5pbXBvcnQ9ZnVuY3Rpb24oYSxiKXtpZihiKXN3aXRjaCh4KGIpJiYoYj1KU09OLnBhcnNlKGIpKSxhKXtjYXNlIFwiY2ZnXCI6dGhpcy5zPSEhYi5vcHQ7YnJlYWs7Y2FzZSBcInJlZ1wiOnRoaXMubT0hMTt0aGlzLnJlZ2lzdGVyPWI7YnJlYWs7Y2FzZSBcIm1hcFwiOnRoaXMubWFwPWI7YnJlYWs7Y2FzZSBcImN0eFwiOnRoaXMuaD1ifX07bGEoSy5wcm90b3R5cGUpO2Z1bmN0aW9uIHZhKGEpe2E9YS5kYXRhO3ZhciBiPXNlbGYuX2luZGV4O2NvbnN0IGM9YS5hcmdzO3ZhciBkPWEudGFzaztzd2l0Y2goZCl7Y2FzZSBcImluaXRcIjpkPWEub3B0aW9uc3x8e307YT1hLmZhY3Rvcnk7Yj1kLmVuY29kZTtkLmNhY2hlPSExO2ImJjA9PT1iLmluZGV4T2YoXCJmdW5jdGlvblwiKSYmKGQuZW5jb2RlPUZ1bmN0aW9uKFwicmV0dXJuIFwiK2IpKCkpO2E/KEZ1bmN0aW9uKFwicmV0dXJuIFwiK2EpKCkoc2VsZiksc2VsZi5faW5kZXg9bmV3IHNlbGYuRmxleFNlYXJjaC5JbmRleChkKSxkZWxldGUgc2VsZi5GbGV4U2VhcmNoKTpzZWxmLl9pbmRleD1uZXcgSyhkKTticmVhaztkZWZhdWx0OmE9YS5pZCxiPWJbZF0uYXBwbHkoYixjKSxwb3N0TWVzc2FnZShcInNlYXJjaFwiPT09ZD97aWQ6YSxtc2c6Yn06e2lkOmF9KX19O2xldCB3YT0wO2Z1bmN0aW9uIE8oYSl7aWYoISh0aGlzIGluc3RhbmNlb2YgTykpcmV0dXJuIG5ldyBPKGEpO3ZhciBiO2E/RChiPWEuZW5jb2RlKSYmKGEuZW5jb2RlPWIudG9TdHJpbmcoKSk6YT17fTsoYj0oc2VsZnx8d2luZG93KS5fZmFjdG9yeSkmJihiPWIudG9TdHJpbmcoKSk7Y29uc3QgYz1zZWxmLmV4cG9ydHMsZD10aGlzO3RoaXMubz14YShiLGMsYS53b3JrZXIpO3RoaXMuaD12KCk7aWYodGhpcy5vKXtpZihjKXRoaXMuby5vbihcIm1lc3NhZ2VcIixmdW5jdGlvbihlKXtkLmhbZS5pZF0oZS5tc2cpO2RlbGV0ZSBkLmhbZS5pZF19KTtlbHNlIHRoaXMuby5vbm1lc3NhZ2U9ZnVuY3Rpb24oZSl7ZT1lLmRhdGE7ZC5oW2UuaWRdKGUubXNnKTtkZWxldGUgZC5oW2UuaWRdfTt0aGlzLm8ucG9zdE1lc3NhZ2Uoe3Rhc2s6XCJpbml0XCIsZmFjdG9yeTpiLG9wdGlvbnM6YX0pfX1QKFwiYWRkXCIpO1AoXCJhcHBlbmRcIik7UChcInNlYXJjaFwiKTtQKFwidXBkYXRlXCIpO1AoXCJyZW1vdmVcIik7XG5mdW5jdGlvbiBQKGEpe08ucHJvdG90eXBlW2FdPU8ucHJvdG90eXBlW2ErXCJBc3luY1wiXT1mdW5jdGlvbigpe2NvbnN0IGI9dGhpcyxjPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKTt2YXIgZD1jW2MubGVuZ3RoLTFdO2xldCBlO0QoZCkmJihlPWQsYy5zcGxpY2UoYy5sZW5ndGgtMSwxKSk7ZD1uZXcgUHJvbWlzZShmdW5jdGlvbihmKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Yi5oWysrd2FdPWY7Yi5vLnBvc3RNZXNzYWdlKHt0YXNrOmEsaWQ6d2EsYXJnczpjfSl9KX0pO3JldHVybiBlPyhkLnRoZW4oZSksdGhpcyk6ZH19XG5mdW5jdGlvbiB4YShhLGIsYyl7bGV0IGQ7dHJ5e2Q9Yj9ldmFsKCduZXcgKHJlcXVpcmUoXCJ3b3JrZXJfdGhyZWFkc1wiKVtcIldvcmtlclwiXSkoXCIuLi9kaXN0L25vZGUvbm9kZS5qc1wiKScpOmE/bmV3IFdvcmtlcihVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtcIm9ubWVzc2FnZT1cIit2YS50b1N0cmluZygpXSx7dHlwZTpcInRleHQvamF2YXNjcmlwdFwifSkpKTpuZXcgV29ya2VyKHgoYyk/YzpcIndvcmtlci93b3JrZXIuanNcIix7dHlwZTpcIm1vZHVsZVwifSl9Y2F0Y2goZSl7fXJldHVybiBkfTtmdW5jdGlvbiBRKGEpe2lmKCEodGhpcyBpbnN0YW5jZW9mIFEpKXJldHVybiBuZXcgUShhKTt2YXIgYj1hLmRvY3VtZW50fHxhLmRvY3x8YSxjO3RoaXMuSz1bXTt0aGlzLmg9W107dGhpcy5BPVtdO3RoaXMucmVnaXN0ZXI9digpO3RoaXMua2V5PShjPWIua2V5fHxiLmlkKSYmUyhjLHRoaXMuQSl8fFwiaWRcIjt0aGlzLm09dShhLmZhc3R1cGRhdGUpO3RoaXMuQz0oYz1iLnN0b3JlKSYmITAhPT1jJiZbXTt0aGlzLnN0b3JlPWMmJnYoKTt0aGlzLkk9KGM9Yi50YWcpJiZTKGMsdGhpcy5BKTt0aGlzLmw9YyYmdigpO3RoaXMuY2FjaGU9KGM9YS5jYWNoZSkmJm5ldyBKKGMpO2EuY2FjaGU9ITE7dGhpcy5vPWEud29ya2VyO3RoaXMuYXN5bmM9ITE7Yz12KCk7bGV0IGQ9Yi5pbmRleHx8Yi5maWVsZHx8Yjt4KGQpJiYoZD1bZF0pO2ZvcihsZXQgZT0wLGYsZztlPGQubGVuZ3RoO2UrKylmPWRbZV0seChmKXx8KGc9ZixmPWYuZmllbGQpLGc9QyhnKT9PYmplY3QuYXNzaWduKHt9LGEsZyk6YSxcbnRoaXMubyYmKGNbZl09bmV3IE8oZyksY1tmXS5vfHwodGhpcy5vPSExKSksdGhpcy5vfHwoY1tmXT1uZXcgSyhnLHRoaXMucmVnaXN0ZXIpKSx0aGlzLktbZV09UyhmLHRoaXMuQSksdGhpcy5oW2VdPWY7aWYodGhpcy5DKWZvcihhPWIuc3RvcmUseChhKSYmKGE9W2FdKSxiPTA7YjxhLmxlbmd0aDtiKyspdGhpcy5DW2JdPVMoYVtiXSx0aGlzLkEpO3RoaXMuaW5kZXg9Y31mdW5jdGlvbiBTKGEsYil7Y29uc3QgYz1hLnNwbGl0KFwiOlwiKTtsZXQgZD0wO2ZvcihsZXQgZT0wO2U8Yy5sZW5ndGg7ZSsrKWE9Y1tlXSwwPD1hLmluZGV4T2YoXCJbXVwiKSYmKGE9YS5zdWJzdHJpbmcoMCxhLmxlbmd0aC0yKSkmJihiW2RdPSEwKSxhJiYoY1tkKytdPWEpO2Q8Yy5sZW5ndGgmJihjLmxlbmd0aD1kKTtyZXR1cm4gMTxkP2M6Y1swXX1mdW5jdGlvbiBUKGEsYil7aWYoeChiKSlhPWFbYl07ZWxzZSBmb3IobGV0IGM9MDthJiZjPGIubGVuZ3RoO2MrKylhPWFbYltjXV07cmV0dXJuIGF9XG5mdW5jdGlvbiBVKGEsYixjLGQsZSl7YT1hW2VdO2lmKGQ9PT1jLmxlbmd0aC0xKWJbZV09YTtlbHNlIGlmKGEpaWYoYS5jb25zdHJ1Y3Rvcj09PUFycmF5KWZvcihiPWJbZV09QXJyYXkoYS5sZW5ndGgpLGU9MDtlPGEubGVuZ3RoO2UrKylVKGEsYixjLGQsZSk7ZWxzZSBiPWJbZV18fChiW2VdPXYoKSksZT1jWysrZF0sVShhLGIsYyxkLGUpfWZ1bmN0aW9uIFYoYSxiLGMsZCxlLGYsZyxoKXtpZihhPWFbZ10paWYoZD09PWIubGVuZ3RoLTEpe2lmKGEuY29uc3RydWN0b3I9PT1BcnJheSl7aWYoY1tkXSl7Zm9yKGI9MDtiPGEubGVuZ3RoO2IrKyllLmFkZChmLGFbYl0sITAsITApO3JldHVybn1hPWEuam9pbihcIiBcIil9ZS5hZGQoZixhLGgsITApfWVsc2UgaWYoYS5jb25zdHJ1Y3Rvcj09PUFycmF5KWZvcihnPTA7ZzxhLmxlbmd0aDtnKyspVihhLGIsYyxkLGUsZixnLGgpO2Vsc2UgZz1iWysrZF0sVihhLGIsYyxkLGUsZixnLGgpfXQ9US5wcm90b3R5cGU7XG50LmFkZD1mdW5jdGlvbihhLGIsYyl7QyhhKSYmKGI9YSxhPVQoYix0aGlzLmtleSkpO2lmKGImJihhfHwwPT09YSkpe2lmKCFjJiZ0aGlzLnJlZ2lzdGVyW2FdKXJldHVybiB0aGlzLnVwZGF0ZShhLGIpO2ZvcihsZXQgZD0wLGUsZjtkPHRoaXMuaC5sZW5ndGg7ZCsrKWY9dGhpcy5oW2RdLGU9dGhpcy5LW2RdLHgoZSkmJihlPVtlXSksVihiLGUsdGhpcy5BLDAsdGhpcy5pbmRleFtmXSxhLGVbMF0sYyk7aWYodGhpcy5JKXtsZXQgZD1UKGIsdGhpcy5JKSxlPXYoKTt4KGQpJiYoZD1bZF0pO2ZvcihsZXQgZj0wLGcsaDtmPGQubGVuZ3RoO2YrKylpZihnPWRbZl0sIWVbZ10mJihlW2ddPTEsaD10aGlzLmxbZ118fCh0aGlzLmxbZ109W10pLCFjfHwtMT09PWguaW5kZXhPZihhKSkpaWYoaFtoLmxlbmd0aF09YSx0aGlzLm0pe2NvbnN0IGs9dGhpcy5yZWdpc3RlclthXXx8KHRoaXMucmVnaXN0ZXJbYV09W10pO2tbay5sZW5ndGhdPWh9fWlmKHRoaXMuc3RvcmUmJighY3x8IXRoaXMuc3RvcmVbYV0pKXtsZXQgZDtcbmlmKHRoaXMuQyl7ZD12KCk7Zm9yKGxldCBlPTAsZjtlPHRoaXMuQy5sZW5ndGg7ZSsrKWY9dGhpcy5DW2VdLHgoZik/ZFtmXT1iW2ZdOlUoYixkLGYsMCxmWzBdKX10aGlzLnN0b3JlW2FdPWR8fGJ9fXJldHVybiB0aGlzfTt0LmFwcGVuZD1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLmFkZChhLGIsITApfTt0LnVwZGF0ZT1mdW5jdGlvbihhLGIpe3JldHVybiB0aGlzLnJlbW92ZShhKS5hZGQoYSxiKX07XG50LnJlbW92ZT1mdW5jdGlvbihhKXtDKGEpJiYoYT1UKGEsdGhpcy5rZXkpKTtpZih0aGlzLnJlZ2lzdGVyW2FdKXtmb3IodmFyIGI9MDtiPHRoaXMuaC5sZW5ndGgmJih0aGlzLmluZGV4W3RoaXMuaFtiXV0ucmVtb3ZlKGEsIXRoaXMubyksIXRoaXMubSk7YisrKTtpZih0aGlzLkkmJiF0aGlzLm0pZm9yKGxldCBjIGluIHRoaXMubCl7Yj10aGlzLmxbY107Y29uc3QgZD1iLmluZGV4T2YoYSk7LTEhPT1kJiYoMTxiLmxlbmd0aD9iLnNwbGljZShkLDEpOmRlbGV0ZSB0aGlzLmxbY10pfXRoaXMuc3RvcmUmJmRlbGV0ZSB0aGlzLnN0b3JlW2FdO2RlbGV0ZSB0aGlzLnJlZ2lzdGVyW2FdfXJldHVybiB0aGlzfTtcbnQuc2VhcmNoPWZ1bmN0aW9uKGEsYixjLGQpe2N8fCghYiYmQyhhKT8oYz1hLGE9Yy5xdWVyeSk6QyhiKSYmKGM9YixiPTApKTtsZXQgZT1bXSxmPVtdLGcsaCxrLG0sbix3LHE9MDtpZihjKWlmKGMuY29uc3RydWN0b3I9PT1BcnJheSlrPWMsYz1udWxsO2Vsc2V7az0oZz1jLnBsdWNrKXx8Yy5pbmRleHx8Yy5maWVsZDttPWMudGFnO2g9dGhpcy5zdG9yZSYmYy5lbnJpY2g7bj1cImFuZFwiPT09Yy5ib29sO2I9Yy5saW1pdHx8MTAwO3c9Yy5vZmZzZXR8fDA7aWYobSYmKHgobSkmJihtPVttXSksIWEpKXtmb3IobGV0IGw9MCxwO2w8bS5sZW5ndGg7bCsrKWlmKHA9eWEuY2FsbCh0aGlzLG1bbF0sYix3LGgpKWVbZS5sZW5ndGhdPXAscSsrO3JldHVybiBxP2U6W119eChrKSYmKGs9W2tdKX1rfHwoaz10aGlzLmgpO249biYmKDE8ay5sZW5ndGh8fG0mJjE8bS5sZW5ndGgpO2NvbnN0IHI9IWQmJih0aGlzLm98fHRoaXMuYXN5bmMpJiZbXTtmb3IobGV0IGw9MCxwLHosQjtsPGsubGVuZ3RoO2wrKyl7bGV0IEE7XG56PWtbbF07eCh6KXx8KEE9eix6PXouZmllbGQpO2lmKHIpcltsXT10aGlzLmluZGV4W3pdLnNlYXJjaEFzeW5jKGEsYixBfHxjKTtlbHNle2Q/cD1kW2xdOnA9dGhpcy5pbmRleFt6XS5zZWFyY2goYSxiLEF8fGMpO0I9cCYmcC5sZW5ndGg7aWYobSYmQil7Y29uc3QgeT1bXTtsZXQgSD0wO24mJih5WzBdPVtwXSk7Zm9yKGxldCBYPTAscGEsUjtYPG0ubGVuZ3RoO1grKylpZihwYT1tW1hdLEI9KFI9dGhpcy5sW3BhXSkmJlIubGVuZ3RoKUgrKyx5W3kubGVuZ3RoXT1uP1tSXTpSO0gmJihwPW4/bWEoeSxifHwxMDAsd3x8MCk6bmEocCx5KSxCPXAubGVuZ3RoKX1pZihCKWZbcV09eixlW3ErK109cDtlbHNlIGlmKG4pcmV0dXJuW119fWlmKHIpe2NvbnN0IGw9dGhpcztyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocCl7UHJvbWlzZS5hbGwocikudGhlbihmdW5jdGlvbih6KXtwKGwuc2VhcmNoKGEsYixjLHopKX0pfSl9aWYoIXEpcmV0dXJuW107aWYoZyYmKCFofHwhdGhpcy5zdG9yZSkpcmV0dXJuIGVbMF07XG5mb3IobGV0IGw9MCxwO2w8Zi5sZW5ndGg7bCsrKXtwPWVbbF07cC5sZW5ndGgmJmgmJihwPXphLmNhbGwodGhpcyxwKSk7aWYoZylyZXR1cm4gcDtlW2xdPXtmaWVsZDpmW2xdLHJlc3VsdDpwfX1yZXR1cm4gZX07ZnVuY3Rpb24geWEoYSxiLGMsZCl7bGV0IGU9dGhpcy5sW2FdLGY9ZSYmZS5sZW5ndGgtYztpZihmJiYwPGYpe2lmKGY+Ynx8YyllPWUuc2xpY2UoYyxjK2IpO2QmJihlPXphLmNhbGwodGhpcyxlKSk7cmV0dXJue3RhZzphLHJlc3VsdDplfX19ZnVuY3Rpb24gemEoYSl7Y29uc3QgYj1BcnJheShhLmxlbmd0aCk7Zm9yKGxldCBjPTAsZDtjPGEubGVuZ3RoO2MrKylkPWFbY10sYltjXT17aWQ6ZCxkb2M6dGhpcy5zdG9yZVtkXX07cmV0dXJuIGJ9dC5jb250YWluPWZ1bmN0aW9uKGEpe3JldHVybiEhdGhpcy5yZWdpc3RlclthXX07dC5nZXQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuc3RvcmVbYV19O3Quc2V0PWZ1bmN0aW9uKGEsYil7dGhpcy5zdG9yZVthXT1iO3JldHVybiB0aGlzfTtcbnQuc2VhcmNoQ2FjaGU9b2E7dC5leHBvcnQ9ZnVuY3Rpb24oYSxiLGMsZCxlKXtlfHwoZT0wKTtkfHwoZD0wKTtpZihkPHRoaXMuaC5sZW5ndGgpe2NvbnN0IGY9dGhpcy5oW2RdLGc9dGhpcy5pbmRleFtmXTtiPXRoaXM7c2V0VGltZW91dChmdW5jdGlvbigpe2cuZXhwb3J0KGEsYixlP2YucmVwbGFjZShcIjpcIixcIi1cIik6XCJcIixkLGUrKyl8fChkKyssZT0xLGIuZXhwb3J0KGEsYixmLGQsZSkpfSl9ZWxzZXtsZXQgZjtzd2l0Y2goZSl7Y2FzZSAxOmM9XCJ0YWdcIjtmPXRoaXMubDticmVhaztjYXNlIDI6Yz1cInN0b3JlXCI7Zj10aGlzLnN0b3JlO2JyZWFrO2RlZmF1bHQ6cmV0dXJufXJhKGEsdGhpcyxjLGQsZSxmKX19O1xudC5pbXBvcnQ9ZnVuY3Rpb24oYSxiKXtpZihiKXN3aXRjaCh4KGIpJiYoYj1KU09OLnBhcnNlKGIpKSxhKXtjYXNlIFwidGFnXCI6dGhpcy5sPWI7YnJlYWs7Y2FzZSBcInJlZ1wiOnRoaXMubT0hMTt0aGlzLnJlZ2lzdGVyPWI7Zm9yKGxldCBkPTAsZTtkPHRoaXMuaC5sZW5ndGg7ZCsrKWU9dGhpcy5pbmRleFt0aGlzLmhbZF1dLGUucmVnaXN0ZXI9YixlLm09ITE7YnJlYWs7Y2FzZSBcInN0b3JlXCI6dGhpcy5zdG9yZT1iO2JyZWFrO2RlZmF1bHQ6YT1hLnNwbGl0KFwiLlwiKTtjb25zdCBjPWFbMF07YT1hWzFdO2MmJmEmJnRoaXMuaW5kZXhbY10uaW1wb3J0KGEsYil9fTtsYShRLnByb3RvdHlwZSk7dmFyIEJhPXtlbmNvZGU6QWEsRjohMSxHOlwiXCJ9O2NvbnN0IENhPVtGKFwiW1xcdTAwZTBcXHUwMGUxXFx1MDBlMlxcdTAwZTNcXHUwMGU0XFx1MDBlNV1cIiksXCJhXCIsRihcIltcXHUwMGU4XFx1MDBlOVxcdTAwZWFcXHUwMGViXVwiKSxcImVcIixGKFwiW1xcdTAwZWNcXHUwMGVkXFx1MDBlZVxcdTAwZWZdXCIpLFwiaVwiLEYoXCJbXFx1MDBmMlxcdTAwZjNcXHUwMGY0XFx1MDBmNVxcdTAwZjZcXHUwMTUxXVwiKSxcIm9cIixGKFwiW1xcdTAwZjlcXHUwMGZhXFx1MDBmYlxcdTAwZmNcXHUwMTcxXVwiKSxcInVcIixGKFwiW1xcdTAwZmRcXHUwMTc3XFx1MDBmZl1cIiksXCJ5XCIsRihcIlxcdTAwZjFcIiksXCJuXCIsRihcIltcXHUwMGU3Y11cIiksXCJrXCIsRihcIlxcdTAwZGZcIiksXCJzXCIsRihcIiAmIFwiKSxcIiBhbmQgXCJdO2Z1bmN0aW9uIEFhKGEpe3ZhciBiPWE7Yi5ub3JtYWxpemUmJihiPWIubm9ybWFsaXplKFwiTkZEXCIpLnJlcGxhY2UoZWEsXCJcIikpO3JldHVybiBjYS5jYWxsKHRoaXMsYi50b0xvd2VyQ2FzZSgpLCFhLm5vcm1hbGl6ZSYmQ2EpfTt2YXIgRWE9e2VuY29kZTpEYSxGOiExLEc6XCJzdHJpY3RcIn07Y29uc3QgRmE9L1teYS16MC05XSsvLEdhPXtiOlwicFwiLHY6XCJmXCIsdzpcImZcIix6Olwic1wiLHg6XCJzXCIsXCJcXHUwMGRmXCI6XCJzXCIsZDpcInRcIixuOlwibVwiLGM6XCJrXCIsZzpcImtcIixqOlwia1wiLHE6XCJrXCIsaTpcImVcIix5OlwiZVwiLHU6XCJvXCJ9O2Z1bmN0aW9uIERhKGEpe2E9QWEuY2FsbCh0aGlzLGEpLmpvaW4oXCIgXCIpO2NvbnN0IGI9W107aWYoYSl7Y29uc3QgYz1hLnNwbGl0KEZhKSxkPWMubGVuZ3RoO2ZvcihsZXQgZT0wLGYsZz0wO2U8ZDtlKyspaWYoKGE9Y1tlXSkmJighdGhpcy5maWx0ZXJ8fCF0aGlzLmZpbHRlclthXSkpe2Y9YVswXTtsZXQgaD1HYVtmXXx8ZixrPWg7Zm9yKGxldCBtPTE7bTxhLmxlbmd0aDttKyspe2Y9YVttXTtjb25zdCBuPUdhW2ZdfHxmO24mJm4hPT1rJiYoaCs9bixrPW4pfWJbZysrXT1ofX1yZXR1cm4gYn07dmFyIElhPXtlbmNvZGU6SGEsRjohMSxHOlwiXCJ9O2NvbnN0IEphPVtGKFwiYWVcIiksXCJhXCIsRihcIm9lXCIpLFwib1wiLEYoXCJzaFwiKSxcInNcIixGKFwidGhcIiksXCJ0XCIsRihcInBoXCIpLFwiZlwiLEYoXCJwZlwiKSxcImZcIixGKFwiKD8hW2Flb10paCg/IVthZW9dKVwiKSxcIlwiLEYoXCIoPyFeW2Flb10paCg/IV5bYWVvXSlcIiksXCJcIl07ZnVuY3Rpb24gSGEoYSxiKXthJiYoYT1EYS5jYWxsKHRoaXMsYSkuam9pbihcIiBcIiksMjxhLmxlbmd0aCYmKGE9RShhLEphKSksYnx8KDE8YS5sZW5ndGgmJihhPWhhKGEpKSxhJiYoYT1hLnNwbGl0KFwiIFwiKSkpKTtyZXR1cm4gYX07dmFyIExhPXtlbmNvZGU6S2EsRjohMSxHOlwiXCJ9O2NvbnN0IE1hPUYoXCIoPyFcXFxcYilbYWVvXVwiKTtmdW5jdGlvbiBLYShhKXthJiYoYT1IYS5jYWxsKHRoaXMsYSwhMCksMTxhLmxlbmd0aCYmKGE9YS5yZXBsYWNlKE1hLFwiXCIpKSwxPGEubGVuZ3RoJiYoYT1oYShhKSksYSYmKGE9YS5zcGxpdChcIiBcIikpKTtyZXR1cm4gYX07R1tcImxhdGluOmRlZmF1bHRcIl09amE7R1tcImxhdGluOnNpbXBsZVwiXT1CYTtHW1wibGF0aW46YmFsYW5jZVwiXT1FYTtHW1wibGF0aW46YWR2YW5jZWRcIl09SWE7R1tcImxhdGluOmV4dHJhXCJdPUxhO2NvbnN0IFc9c2VsZjtsZXQgWTtjb25zdCBaPXtJbmRleDpLLERvY3VtZW50OlEsV29ya2VyOk8scmVnaXN0ZXJDaGFyc2V0OmZ1bmN0aW9uKGEsYil7R1thXT1ifSxyZWdpc3Rlckxhbmd1YWdlOmZ1bmN0aW9uKGEsYil7a2FbYV09Yn19OyhZPVcuZGVmaW5lKSYmWS5hbWQ/WShbXSxmdW5jdGlvbigpe3JldHVybiBafSk6Vy5leHBvcnRzP1cuZXhwb3J0cz1aOlcuRmxleFNlYXJjaD1aO30odGhpcykpO1xuIiwgImltcG9ydCB7IFBsdWdpbiB9IGZyb20gJ29ic2lkaWFuJztcclxuaW1wb3J0IHsgU2VhcmNoSW5kZXggfSBmcm9tICdzcmMnO1xyXG5pbXBvcnQgeyBTRUFSQ0hfUkVTVUxUX1ZJRVdfVFlQRSB9IGZyb20gJy4vY29uc3RhbnRzJztcclxuaW1wb3J0IHsgQW5raUluZGV4IH0gZnJvbSAnLi9jb3JlL2Fua2knO1xyXG5pbXBvcnQgeyBPYnNpZGlhbkluZGV4IH0gZnJvbSAnLi9jb3JlL29icyc7XHJcbmltcG9ydCB7IFNlYXJjaGVyIH0gZnJvbSAnLi9zZWFyY2gnO1xyXG5pbXBvcnQgeyBERUZBVUxUX1NFVFRJTkdTLCBQb3dlclNlYXJjaFNldHRpbmdzLCBQb3dlclNlYXJjaFNldHRpbmdzVGFiIH0gZnJvbSAnLi9zZXR0aW5ncyc7XHJcbmltcG9ydCB7IFNlYXJjaFJlc3VsdFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xyXG5cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvd2VyU2VhcmNoIGV4dGVuZHMgUGx1Z2luIHtcclxuXHRzZXR0aW5nczogUG93ZXJTZWFyY2hTZXR0aW5ncztcclxuXHRzZWFyY2g6IFNlYXJjaGVyO1xyXG5cdGluZGV4ZXM6IFNlYXJjaEluZGV4W11cclxuXHJcblx0YXN5bmMgb25sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJQb3dlciBTZWFyY2ggcGx1Z2luIGxvYWRpbmdcIilcclxuXHRcdGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XHJcblx0XHR0aGlzLmluZGV4ZXMgPSBbXVxyXG5cdFx0dGhpcy5yZWdpc3RlclZpZXcoXHJcblx0XHRcdFNFQVJDSF9SRVNVTFRfVklFV19UWVBFLFxyXG5cdFx0XHQobGVhZikgPT4gKG5ldyBTZWFyY2hSZXN1bHRWaWV3KGxlYWYsIHRoaXMpKVxyXG5cdFx0KTtcclxuXHRcdHRoaXMuYWRkQ29tbWFuZHMoKVxyXG5cclxuXHRcdHRoaXMuc2VhcmNoID0gbmV3IFNlYXJjaGVyKHRoaXMpXHJcblx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeSgoKSA9PiB0aGlzLmluaXRQbHVnaW4oKSk7XHJcblx0fVxyXG5cclxuXHRpbml0UGx1Z2luKCkge1xyXG5cdFx0bmV3IEFua2lJbmRleCh0aGlzLnNlYXJjaClcclxuXHRcdG5ldyBPYnNpZGlhbkluZGV4KHRoaXMuc2VhcmNoKVxyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBQb3dlclNlYXJjaFNldHRpbmdzVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblx0XHR0aGlzLmluaXRMZWFmKCk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRXZlbnRzKClcclxuXHRcdFxyXG5cdH1cclxuXHJcblx0YWRkQ29tbWFuZHMoKSB7XHJcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xyXG5cdFx0XHRpZDogXCJvcGVuLXBvd2VyLXNlYXJjaC1yZXN1bHRzLXZpZXdcIixcclxuXHRcdFx0bmFtZTogXCJPcGVuIFZpZXdcIixcclxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHRoaXMuaW5pdExlYWYoKVxyXG5cdFx0fSlcclxuXHR9XHJcblxyXG5cdHJlZ2lzdGVyRXZlbnRzKCkge1xyXG5cdFx0Ly8gd2hlbiB0ZXh0IGlzIHNlbGVjdGVkLCBpdCBpcyBzZWFyY2hlZFxyXG5cdFx0dGhpcy5yZWdpc3RlckRvbUV2ZW50KGRvY3VtZW50LCBcInNlbGVjdGlvbmNoYW5nZVwiLCAoKSA9PiB7dGhpcy5zZWFyY2guZGVib3VuY2VkU2VhcmNoKGRvY3VtZW50LmdldFNlbGVjdGlvbigpLnRvU3RyaW5nKCkpfSlcclxuXHRcdC8vIHdoaWxlIHR5cGluZywgdGhlIHRleHQgaXMgc2VhcmNoZWRcclxuXHRcdHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgXCJrZXlkb3duXCIsICgpID0+IHRoaXMuc2VhcmNoLmRlYm91bmNlZFNlYXJjaEN1cnJlbnQodGhpcy5zZXR0aW5ncy5zZWFyY2hCbG9jaykpIC8vIFRPRE8gY3VzdG9taXNlIHNlYXJjaCBibG9jayB2cyBsaW5lXHJcblx0XHQvLyB0aGlzLnJlZ2lzdGVyT2JzaWRpYW5Qcm90b2NvbEhhbmRsZXIoXCJvcGVuXCIgPT4gKSBUT0RPIGlmIHZpZXcgbm90IG9wZW4gaW4gc2lkZWJhciwgb3BlbiBwcm90b2NvbHMgaW4gbmV3IHBhbmVcclxuXHR9XHJcblxyXG5cdG9udW5sb2FkKCkge1xyXG5cdFx0Y29uc29sZS5sb2coXCJQb3dlciBTZWFyY2ggcGx1Z2luIHVubG9hZGluZ1wiKVxyXG5cdFx0dGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShTRUFSQ0hfUkVTVUxUX1ZJRVdfVFlQRSk7XHJcblx0fVxyXG5cclxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XHJcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcclxuXHR9XHJcblxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG5cclxuXHRnZXRWaWV3KCk6IFNlYXJjaFJlc3VsdFZpZXcgfCBudWxsIHtcclxuXHRcdGZvciAobGV0IGxlYWYgb2YgdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShTRUFSQ0hfUkVTVUxUX1ZJRVdfVFlQRSkpIHtcclxuXHRcdFx0bGV0IHZpZXcgPSBsZWFmLnZpZXc7XHJcblx0XHRcdGlmICh2aWV3IGluc3RhbmNlb2YgU2VhcmNoUmVzdWx0Vmlldykge1xyXG5cdFx0XHQgIHJldHVybiB2aWV3XHJcblx0XHRcdH1cclxuXHRcdCAgfVxyXG5cdFx0cmV0dXJuIG51bGxcclxuXHR9XHJcblxyXG5cdGluaXRMZWFmKCk6IHZvaWQge1xyXG5cdFx0bGV0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoU0VBUkNIX1JFU1VMVF9WSUVXX1RZUEUpXHJcblx0XHRpZiAobGVhdmVzLmxlbmd0aCkge1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdCAgXHR0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0UmlnaHRMZWFmKGZhbHNlKS5zZXRWaWV3U3RhdGUoe1xyXG5cdFx0XHR0eXBlOiBTRUFSQ0hfUkVTVUxUX1ZJRVdfVFlQRSxcclxuXHRcdFx0YWN0aXZlOiB0cnVlLFxyXG5cdFx0ICB9KTtcclxuXHRcdH1cclxuXHR9XHJcbiAgICBcclxufVxyXG5cclxuIiwgImV4cG9ydCBjb25zdCBTRUFSQ0hfUkVTVUxUX1ZJRVdfVFlQRSA9IFwic2VhcmNoLXJlc3VsdC12aWV3XCIiLCAiaW1wb3J0IHsgT2JzaWRpYW5Qcm90b2NvbERhdGEsIHJlbmRlck1hdGggfSBmcm9tIFwib2JzaWRpYW5cIlxuaW1wb3J0IHsgU2VhcmNoSW5kZXggfSBmcm9tIFwic3JjXCJcbmltcG9ydCB7IFNlYXJjaGVyIH0gZnJvbSBcInNyYy9zZWFyY2hcIlxuaW1wb3J0IHsgc3RyaXBIVE1MIH0gZnJvbSBcInNyYy91dGlsc1wiXG5cbmV4cG9ydCBjbGFzcyBBbmtpSW5kZXggZXh0ZW5kcyBTZWFyY2hJbmRleCB7XG5cbiAgICBjb25zdHJ1Y3RvcihzZWFyY2hlcjogU2VhcmNoZXIpIHtcbiAgICAgICAgc3VwZXIoc2VhcmNoZXIsIFwiQW5raSBOb3RlXCIpXG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyT2JzaWRpYW5Qcm90b2NvbEhhbmRsZXIoXCJhbmtpXCIsIChwYXJhbXM6IE9ic2lkaWFuUHJvdG9jb2xEYXRhKSA9PiBpbnZva2UoXCJndWlCcm93c2VcIiwge3F1ZXJ5OiBgbmlkOiR7cGFyYW1zLmlkfWB9KSlcbiAgICB9XG5cbiAgICBhc3luYyBnZXRPcmlnaW5hbE5vdGVzKCk6IFByb21pc2U8SW5jb21pbmdBbmtpQ29ubmVjdE5vdGVbXT4ge1xuICAgICAgICBsZXQgaWRzOiBudW1iZXJbXSA9IGF3YWl0IGludm9rZShcImZpbmROb3Rlc1wiLCB7cXVlcnk6IFwiZGVjazoqXCJ9KVxuICAgICAgICBsZXQgbm90ZXM6IEluY29taW5nQW5raUNvbm5lY3ROb3RlW10gPSBhd2FpdCBpbnZva2UoXCJub3Rlc0luZm9cIiwge25vdGVzOiBpZHN9KVxuICAgICAgICByZXR1cm4gbm90ZXNcbiAgICB9XG5cbiAgICBnZXRJZEZyb21PcmlnaW5hbChvcmlnaW5hbDogSW5jb21pbmdBbmtpQ29ubmVjdE5vdGUpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLm5vdGVJZFxuICAgIH1cblxuICAgIGdldE5hbWVGcm9tT3JpZ2luYWwob3JpZ2luYWw6IEluY29taW5nQW5raUNvbm5lY3ROb3RlKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLm5vdGVJZC50b1N0cmluZygpXG4gICAgfVxuXG4gICAgZ2V0TGlua0Zyb21PcmlnaW5hbChvcmlnaW5hbDogSW5jb21pbmdBbmtpQ29ubmVjdE5vdGUpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJvYnNpZGlhbjovL2Fua2k/XCIgKyBTdHJpbmcucmF3YCZpZD1gICsgZW5jb2RlVVJJQ29tcG9uZW50KG9yaWdpbmFsLm5vdGVJZClcbiAgICB9XG5cbiAgICBhc3luYyBnZXRSYXdTZWFyY2hEYXRhRnJvbU9yaWdpbmFsKG9yaWdpbmFsOiBJbmNvbWluZ0Fua2lDb25uZWN0Tm90ZSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBzdHJpcEhUTUwodGhpcy5nZXRGaWVsZHNUZXh0KG9yaWdpbmFsKSlcbiAgICB9XG5cbiAgICBhc3luYyBnZXREaXNwbGF5RnJvbU9yaWdpbmFsKG9yaWdpbmFsOiBJbmNvbWluZ0Fua2lDb25uZWN0Tm90ZSk6IFByb21pc2U8RWxlbWVudD4ge1xuICAgICAgICBsZXQgaHRtbEVsID0gY3JlYXRlRGl2KHsgY2xzOiAncG93ZXItc2VhcmNoLXJlc3VsdHMtY2FyZCcgfSlcbiAgICAgICAgaHRtbEVsLmlubmVySFRNTCA9IHRoaXMuZ2V0RmllbGRzVGV4dChvcmlnaW5hbClcbiAgICAgICAgdGhpcy5yZW5kZXJNYXRoRm9yTm90ZShodG1sRWwpXG4gICAgICAgIGF3YWl0IHRoaXMuZml4SW1hZ2VzRm9yTm90ZShodG1sRWwpXG4gICAgICAgIHJldHVybiBodG1sRWxcbiAgICB9XG4gICAgXG5cbiAgICBhc3luYyBiZWZvcmVQcm9kdWN0aW9uKG9yaWdOb3RlczogSW5jb21pbmdBbmtpQ29ubmVjdE5vdGVbXSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICAvLyBidWxrIGxvYWQgbm90IG5lZWRlZFxuICAgIH1cblxuICAgIGdldEZpZWxkc1RleHQob3JpZ2luYWw6IEluY29taW5nQW5raUNvbm5lY3ROb3RlKSB7XG4gICAgICAgIGxldCBmaWVsZHNUZXh0OiBzdHJpbmcgPSBcIlwiXG4gICAgICAgIGZvciAobGV0IGZpZWxkIGluIG9yaWdpbmFsLmZpZWxkcykge1xuICAgICAgICAgICAgZmllbGRzVGV4dCArPSBgJHtvcmlnaW5hbC5maWVsZHNbZmllbGRdLnZhbHVlfSB8YFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmaWVsZHNUZXh0XG4gICAgfVxuXG4gICAgcmVuZGVyTWF0aEZvck5vdGUoZWw6IEVsZW1lbnQpIHtcbiAgICAgICAgbGV0IHN0ciA9IGVsLmlubmVySFRNTFxuICAgICAgICBsZXQgc3RhcnREZWxpbUluZGV4ID0gc3RyLmluZGV4T2YoXCJcXFxcXFwoXCIpXG4gICAgICAgIGxldCBlbmREZWxpbUluZGV4ID0gc3RyLmluZGV4T2YoXCJcXFxcXFwpXCIpXG4gICAgICAgIGxldCBzdGFydEluZGV4ID0gMCBcbiAgICAgICAgbGV0IHN0ckxpc3Q6IHN0cmluZ1tdID0gW11cbiAgICAgICAgd2hpbGUgKHN0YXJ0RGVsaW1JbmRleCAhPSAtMSAmJiBlbmREZWxpbUluZGV4ICE9IC0xKSB7XG4gICAgICAgICAgICBzdHJMaXN0LnB1c2goc3RyLnN1YnN0cmluZyhzdGFydEluZGV4LCBzdGFydERlbGltSW5kZXgpKVxuICAgICAgICAgICAgbGV0IHN1YnN0cmluZyA9IHN0ci5zdWJzdHJpbmcoc3RhcnREZWxpbUluZGV4ICsgMiwgZW5kRGVsaW1JbmRleClcbiAgICAgICAgICAgIHN0ckxpc3QucHVzaChyZW5kZXJNYXRoKHN1YnN0cmluZywgdHJ1ZSkuaW5uZXJIVE1MKVxuICAgICAgICAgICAgc3RhcnRJbmRleCA9IGVuZERlbGltSW5kZXggKyAyXG4gICAgICAgICAgICBzdGFydERlbGltSW5kZXggPSBzdHIuaW5kZXhPZihcIlxcXFxcXChcIiwgc3RhcnRJbmRleClcbiAgICAgICAgICAgIGVuZERlbGltSW5kZXggPSBzdHIuaW5kZXhPZihcIlxcXFxcXClcIiwgc3RhcnRJbmRleClcbiAgICAgICAgfVxuICAgICAgICBzdHJMaXN0LnB1c2goc3RyLnN1YnN0cmluZyhzdGFydEluZGV4KSlcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gc3RyTGlzdC5qb2luKFwiXCIpXG4gICAgfVxuXG4gICAgYXN5bmMgZml4SW1hZ2VzRm9yTm90ZShlbDogRWxlbWVudCkge1xuICAgICAgICBsZXQgaW1ncyA9IEFycmF5LmZyb20oZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJpbWdcIikpXG4gICAgICAgIGZvciAobGV0IGltZyBvZiBpbWdzKSB7XG4gICAgICAgICAgICBsZXQgaW1nQmFzZTY0ID0gYXdhaXQgaW52b2tlKFwicmV0cmlldmVNZWRpYUZpbGVcIiwge2ZpbGVuYW1lOiBpbWcuYWx0fSlcbiAgICAgICAgICAgIGltZy5zcmMgPSBgZGF0YTppbWFnZS9wbmc7YmFzZTY0LCAke2ltZ0Jhc2U2NH1gXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSW5jb21pbmdBbmtpQ29ubmVjdE5vdGUge1xuXHRub3RlSWQ6IG51bWJlcixcblx0bW9kZWxOYW1lOiBzdHJpbmcsXG4gICAgdGFnczogc3RyaW5nW10sXG5cdGZpZWxkczoge1tmaWVsZG5hbWU6IHN0cmluZ106IHtcbiAgICAgICAgdmFsdWU6IHN0cmluZyxcbiAgICAgICAgb3JkZXI6IG51bWJlclxuICAgIH19XG59XG5cbmNvbnN0IEFOS0lfUE9SVDogbnVtYmVyID0gODc2NVxuXG5leHBvcnQgZnVuY3Rpb24gaW52b2tlKGFjdGlvbjogc3RyaW5nLCBwYXJhbXM9e30pOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsICgpID0+IHJlamVjdCgnZmFpbGVkIHRvIGlzc3VlIHJlcXVlc3QnKSk7XG4gICAgICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHJlc3BvbnNlKS5sZW5ndGggIT0gMikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAncmVzcG9uc2UgaGFzIGFuIHVuZXhwZWN0ZWQgbnVtYmVyIG9mIGZpZWxkcyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuaGFzT3duUHJvcGVydHkoJ2Vycm9yJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ3Jlc3BvbnNlIGlzIG1pc3NpbmcgcmVxdWlyZWQgZXJyb3IgZmllbGQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlLmhhc093blByb3BlcnR5KCdyZXN1bHQnKSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAncmVzcG9uc2UgaXMgbWlzc2luZyByZXF1aXJlZCByZXN1bHQgZmllbGQnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgcmVzcG9uc2UuZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UucmVzdWx0KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHhoci5vcGVuKCdQT1NUJywgJ2h0dHA6Ly8xMjcuMC4wLjE6JyArIEFOS0lfUE9SVC50b1N0cmluZygpKTtcbiAgICAgICAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoe2FjdGlvbiwgdmVyc2lvbjogNiwgcGFyYW1zfSkpO1xuICAgIH0pO1xufVxuIiwgImltcG9ydCB7IE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IFBvd2VyU2VhcmNoIGZyb20gXCIuL21haW5cIjtcbmltcG9ydCB7IFNlYXJjaGVyIH0gZnJvbSBcIi4vc2VhcmNoXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhOb3RlIHtcbiAgICBpZDogYW55O1xuICAgIG5hbWU6IHN0cmluZyxcbiAgICBsaW5rOiBzdHJpbmc7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIHNlYXJjaDogc3RyaW5nO1xuICAgIG9yaWdpbmFsOiBhbnk7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBTZWFyY2hJbmRleCB7XG5cbiAgICBwbHVnaW46IFBvd2VyU2VhcmNoXG4gICAgc2VhcmNoZXI6IFNlYXJjaGVyXG5cbiAgICBlcnJvclNob3duOiBudW1iZXI7XG4gICAgXG4gICAgbm90ZXM6IEluZGV4Tm90ZVtdXG4gICAgdHlwZTogc3RyaW5nXG5cbiAgICBjb25zdHJ1Y3RvcihzZWFyY2hlcjogU2VhcmNoZXIsIHR5cGU6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNlYXJjaGVyID0gc2VhcmNoZXJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSB0aGlzLnNlYXJjaGVyLnBsdWdpblxuICAgICAgICAvLyBUT0RPIGVuZm9yY2UgdHlwZSBpcyB1bmlxdWVcbiAgICAgICAgLy8gVE9ETyBlbmZvcmNlIGlkIGlzIHVuaXF1ZVxuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICAgICAgIHRoaXMubm90ZXMgPSBbXVxuICAgICAgICB0aGlzLmVycm9yU2hvd24gPSAwXG4gICAgICAgIHRoaXMucGx1Z2luLmluZGV4ZXMucHVzaCh0aGlzKVxuICAgICAgICB0aGlzLnNldHVwSW5kZXgoKVxuICAgIH1cblxuICAgIGFzeW5jIHNldHVwSW5kZXgoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRleGVzW3RoaXMudHlwZV0pIHtcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoZXIuYWRkSW5kZXhJZk5vdEFscmVhZHlBZGRlZCh0aGlzKVxuICAgICAgICB9IGVsc2UgYXdhaXQgdGhpcy5zZWFyY2hlci5yZW1vdmVJbmRleCh0aGlzKVxuICAgIH1cblxuICAgIGFzeW5jIGxvYWROb3RlcygpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBvcmlnTm90ZXMgPSBhd2FpdCB0aGlzLmdldE9yaWdpbmFsTm90ZXMoKVxuICAgICAgICAgICAgdGhpcy5iZWZvcmVQcm9kdWN0aW9uKG9yaWdOb3RlcylcbiAgICAgICAgICAgIHRoaXMubm90ZXMgPSBbXVxuICAgICAgICAgICAgZm9yIChsZXQgbyBvZiBvcmlnTm90ZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vdGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBpZDogdGhpcy5nZXRJZEZyb21PcmlnaW5hbChvKSxcbiAgICAgICAgICAgICAgICAgICAgbGluazogdGhpcy5nZXRMaW5rRnJvbU9yaWdpbmFsKG8pLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmdldE5hbWVGcm9tT3JpZ2luYWwobyksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoOiBhd2FpdCB0aGlzLmdldFJhd1NlYXJjaERhdGFGcm9tT3JpZ2luYWwobyksXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsOiBvLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm5vdGVzKSB0aGlzLm5vdGVzID0gW11cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKVxuICAgICAgICAgICAgaWYgKHRoaXMuZXJyb3JTaG93biA8PSAyKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShgRmFpbGVkIHRvIGxvYWQgbm90ZXMgZm9yIHRoZSBpbmRleCBvZiB0eXBlOiAke3RoaXMudHlwZX0sIHNlZSBkZWJ1Z2dpbmcgbG9nYClcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9yU2hvd24gKz0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhYnN0cmFjdCBnZXRPcmlnaW5hbE5vdGVzKCk6IFByb21pc2U8YW55W10+XG5cbiAgICBhYnN0cmFjdCBnZXRJZEZyb21PcmlnaW5hbChvcmlnaW5hbDogYW55KTogYW55XG5cbiAgICBhYnN0cmFjdCBnZXRMaW5rRnJvbU9yaWdpbmFsKG9yaWdpbmFsOiBhbnkpOiBzdHJpbmdcblxuICAgIGFic3RyYWN0IGdldE5hbWVGcm9tT3JpZ2luYWwob3JpZ2luYWw6IGFueSk6IHN0cmluZ1xuXG4gICAgYWJzdHJhY3QgZ2V0UmF3U2VhcmNoRGF0YUZyb21PcmlnaW5hbChvcmlnaW5hbDogYW55KTogUHJvbWlzZTxzdHJpbmc+XG5cbiAgICBhYnN0cmFjdCBnZXREaXNwbGF5RnJvbU9yaWdpbmFsKG9yaWdpbmFsOiBhbnkpOiBQcm9taXNlPEVsZW1lbnQ+XG5cbiAgICAvLyBvbmx5IG5lZWRlZCBpZiBidWxrIGxvYWQgbmVlZGVkIGJlZm9yZSBwcm9kdWN0aW9uXG4gICAgYWJzdHJhY3QgYmVmb3JlUHJvZHVjdGlvbihvcmlnTm90ZXM6IGFueVtdKTogUHJvbWlzZTx2b2lkPlxuXG5cbn1cblxuXG5cbiIsICJleHBvcnQgZnVuY3Rpb24gc3RyaXBIVE1MKGh0bWw6IHN0cmluZyl7XG4gICAgbGV0IGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoaHRtbCwgJ3RleHQvaHRtbCcpO1xuICAgIHJldHVybiBkb2MuYm9keS50ZXh0Q29udGVudCB8fCBcIlwiO1xuIH1cbiAgXG4iLCAiaW1wb3J0IHsgTWFya2Rvd25SZW5kZXJlciwgVEFic3RyYWN0RmlsZSwgVEZpbGUsIFZhdWx0IH0gZnJvbSBcIm9ic2lkaWFuXCJcbmltcG9ydCB7IFNlYXJjaEluZGV4IH0gZnJvbSBcInNyY1wiXG5pbXBvcnQgeyBTZWFyY2hlciB9IGZyb20gXCJzcmMvc2VhcmNoXCJcblxuZXhwb3J0IGNsYXNzIE9ic2lkaWFuSW5kZXggZXh0ZW5kcyBTZWFyY2hJbmRleCB7XG5cbiAgICBmaWxlVGV4dHM6IHtbcGF0aDogc3RyaW5nXTogc3RyaW5nfTtcbiAgICBtb2RpZmllZEZpbGVzOiBURmlsZVtdXG4gICAgZmlyc3RMb2FkOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3Ioc2VhcmNoZXI6IFNlYXJjaGVyKSB7XG4gICAgICAgIHN1cGVyKHNlYXJjaGVyLCBcIk9ic2lkaWFuIEZpbGVcIikgXG4gICAgICAgIHRoaXMuZmlsZVRleHRzID0ge31cbiAgICAgICAgdGhpcy5tb2RpZmllZEZpbGVzID0gW11cbiAgICAgICAgdGhpcy5maXJzdExvYWQgPSB0cnVlXG4gICAgICAgIHRoaXMucGx1Z2luLmFwcC52YXVsdC5vbihcIm1vZGlmeVwiLCAoZikgPT4gdGhpcy5vbk1vZGlmeShmKSlcbiAgICAgICAgdGhpcy5wbHVnaW4uYXBwLnZhdWx0Lm9uKFwiZGVsZXRlXCIsIChmKSA9PiB0aGlzLm9uRGVsZXRlKGYpKVxuICAgICAgICB0aGlzLnBsdWdpbi5hcHAudmF1bHQub24oXCJjcmVhdGVcIiwgKGYpID0+IHRoaXMub25DcmVhdGUoZikpXG4gICAgfVxuXG4gICAgb25Nb2RpZnkoZjogVEFic3RyYWN0RmlsZSkge1xuICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIFRGaWxlICYmIHRoaXMubW9kaWZpZWRGaWxlcy5pbmRleE9mKGYpID09IC0xKSB0aGlzLm1vZGlmaWVkRmlsZXMucHVzaChmKVxuICAgIH1cblxuICAgIG9uRGVsZXRlKGY6IFRBYnN0cmFjdEZpbGUpIHtcbiAgICAgICAgaWYgKGYgaW5zdGFuY2VvZiBURmlsZSAmJiBmLnBhdGggaW4gdGhpcy5maWxlVGV4dHMpIGRlbGV0ZSB0aGlzLmZpbGVUZXh0c1tmLnBhdGhdXG4gICAgfVxuXG4gICAgYXN5bmMgb25DcmVhdGUoZjogVEFic3RyYWN0RmlsZSkge1xuICAgICAgICBpZiAoZiBpbnN0YW5jZW9mIFRGaWxlKSB0aGlzLmZpbGVUZXh0c1tmLnBhdGhdID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmNhY2hlZFJlYWQoZilcbiAgICB9XG5cbiAgICBhc3luYyBnZXRPcmlnaW5hbE5vdGVzKCk6IFByb21pc2U8VEZpbGVbXT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmdldE1hcmtkb3duRmlsZXMoKVxuICAgIH1cblxuICAgIGdldE5hbWVGcm9tT3JpZ2luYWwob3JpZ2luYWw6IFRGaWxlKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLm5hbWVcbiAgICB9XG5cbiAgICBnZXRJZEZyb21PcmlnaW5hbChvcmlnaW5hbDogVEZpbGUpIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLnBhdGhcbiAgICB9XG5cbiAgICBhc3luYyBnZXRSYXdTZWFyY2hEYXRhRnJvbU9yaWdpbmFsKG9yaWdpbmFsOiBURmlsZSk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGVUZXh0c1tvcmlnaW5hbC5wYXRoXVxuICAgIH1cblxuICAgIGFzeW5jIGdldERpc3BsYXlGcm9tT3JpZ2luYWwob3JpZ2luYWw6IFRGaWxlKTogUHJvbWlzZTxFbGVtZW50PiB7XG4gICAgICAgIGxldCBlbCA9IGNyZWF0ZURpdih7Y2xzOiBcInBvd2VyLXNlYXJjaC1yZXN1bHRzLWNhcmRcIn0pXG4gICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24odGhpcy5maWxlVGV4dHNbb3JpZ2luYWwucGF0aF0sIGVsLCBvcmlnaW5hbC5wYXRoLCB0aGlzLnNlYXJjaGVyLnBsdWdpbi5nZXRWaWV3KCkpXG4gICAgICAgIHJldHVybiBlbFxuICAgIH1cblxuICAgIGFzeW5jIGJlZm9yZVByb2R1Y3Rpb24ob3JpZ05vdGVzOiBURmlsZVtdKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmICh0aGlzLmZpcnN0TG9hZCkgZm9yIChsZXQgbiBvZiBvcmlnTm90ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsZVRleHRzW24ucGF0aF0gPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQucmVhZChuKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgZiBvZiB0aGlzLm1vZGlmaWVkRmlsZXMpIHRoaXMuZmlsZVRleHRzW2YucGF0aF0gPSBhd2FpdCB0aGlzLnBsdWdpbi5hcHAudmF1bHQuY2FjaGVkUmVhZChmKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmlyc3RMb2FkID0gZmFsc2VcbiAgICAgICAgdGhpcy5tb2RpZmllZEZpbGVzID0gW11cbiAgICB9XG5cbiAgICBnZXRMaW5rRnJvbU9yaWdpbmFsKG9yaWdpbmFsOiBURmlsZSk6IHN0cmluZyB7XG4gICAgICAgIGxldCB2YXVsdE5hbWUgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0TmFtZSgpXG4gICAgICAgIHJldHVybiBcIm9ic2lkaWFuOi8vb3Blbj92YXVsdD1cIiArIGVuY29kZVVSSUNvbXBvbmVudCh2YXVsdE5hbWUpICsgU3RyaW5nLnJhd2AmZmlsZT1gICsgZW5jb2RlVVJJQ29tcG9uZW50KG9yaWdpbmFsLnBhdGgpXG4gICAgfVxuXG4gICAgXG59XG4iLCAiaW1wb3J0IHsgSW5kZXggfSBmcm9tIFwiZmxleHNlYXJjaFwiO1xuaW1wb3J0IHsgZGVib3VuY2UsIE1hcmtkb3duVmlldyB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IFBvd2VyU2VhcmNoIGZyb20gXCIuL21haW5cIjtcbmltcG9ydCB7IHN0ZW1tZXIgfSBmcm9tIFwic3RlbW1lclwiXG5pbXBvcnQgeyBJbmRleE5vdGUsIFNlYXJjaEluZGV4IH0gZnJvbSBcInNyY1wiO1xuXG5pbnRlcmZhY2UgU2VhcmNoTm90ZSBleHRlbmRzIEluZGV4Tm90ZSB7XG4gICAgaW5kZXg6IFNlYXJjaEluZGV4XG59XG5cbmV4cG9ydCBjbGFzcyBTZWFyY2hlciB7XG4gICAgcGx1Z2luOiBQb3dlclNlYXJjaFxuICAgIGluZGV4OiBJbmRleFxuICAgIHJlc3VsdHM6IHtxdWVyeTogc3RyaW5nLCByZXM6IHtpZDogYW55LCBuYW1lOiBzdHJpbmcsIGxpbms6IHN0cmluZywgdHlwZTogc3RyaW5nLCBoaWdobGlnaHRlZFNlYXJjaDogc3RyaW5nLCBkaXNwbGF5OiBFbGVtZW50fVtdfVxuICAgIG5vdGVzOiBTZWFyY2hOb3RlW11cbiAgICBpbmRleGVzOiB7W3R5cGU6IHN0cmluZ106IFNlYXJjaEluZGV4fVxuXG4gICAgZGVib3VuY2VkUmVmcmVzaEluZGV4OiBGdW5jdGlvblxuICAgIGRlYm91bmNlZFNlYXJjaDogRnVuY3Rpb25cbiAgICBkZWJvdW5jZWRTZWFyY2hDdXJyZW50OiBGdW5jdGlvblxuICAgIF9kZWJvdW5jZWRTZWFyY2g6IEZ1bmN0aW9uXG4gICAgX2RlYm91bmNlZFNlYXJjaEN1cnJlbnQ6IEZ1bmN0aW9uXG5cbiAgICBfaW5kZXhfdXBkYXRpbmc6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcihwbHVnaW46IFBvd2VyU2VhcmNoKSB7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luXG4gICAgICAgIHRoaXMucmVmcmVzaERlYm91bmNlcygpXG4gICAgICAgIHRoaXMuaW5kZXggPSBuZXcgSW5kZXgoe1xuICAgICAgICAgICAgc3RlbW1lcjogc3RlbW1lcixcbiAgICAgICAgICAgIC8vIFRPRE8gYWRkIG1hdGNoZXJcbiAgICAgICAgICAgIC8vIFRPRE8gYWRkIGN1c3RvbSBzdG9wIHdvcmQgZmlsdGVyXG4gICAgICAgIH0pXG4gICAgICAgIHRoaXMucmVzdWx0cyA9IHtxdWVyeTogXCJcIiwgcmVzOiBbXX1cbiAgICAgICAgdGhpcy5pbmRleGVzID0ge31cbiAgICAgICAgdGhpcy5ub3RlcyA9IFtdXG4gICAgfVxuXG4gICAgYXN5bmMgc2VhcmNoKHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbmRleF91cGRhdGluZykgdGhpcy5kZWJvdW5jZWRSZWZyZXNoSW5kZXgoKVxuICAgICAgICBhd2FpdCB0aGlzLl9zZWFyY2gocXVlcnkpXG4gICAgfVxuXG4gICAgYXN5bmMgX3NlYXJjaChxdWVyeTogc3RyaW5nLCBvZmZzZXQ6IG51bWJlciA9IDAsIHBhZ2luYXRlOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5yZXN1bHRzID0ge3F1ZXJ5OiBxdWVyeSwgcmVzOiBbXX1cbiAgICAgICAgaWYgKCFxdWVyeSkgcmV0dXJuIFxuICAgICAgICAvLyBUT0RPIGN1c3RvbWlzZSBvcHRpb25zIGluIHNldHRpbmdzXG4gICAgICAgIGxldCBycyA9IHRoaXMuaW5kZXguc2VhcmNoKHF1ZXJ5LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGxpbWl0OiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldCxcbiAgICAgICAgICAgICAgICBzdWdnZXN0OiB0cnVlLFxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgIGlmICghKHJzIHx8IHJzLmxlbmd0aCkpIHt9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgciBvZiBycykge1xuICAgICAgICAgICAgICAgIGxldCBuID0gdGhpcy5ub3Rlcy5maWx0ZXIobiA9PiBuLmlkID09IHIpWzBdXG4gICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzLnJlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgaWQ6IG4uaWQsIFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBuLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxpbms6IG4ubGluayxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogbi50eXBlLFxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRlZFNlYXJjaDogdGhpcy5oaWdobGlnaHRTZWFyY2gobi5zZWFyY2gsIHF1ZXJ5KSxcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogYXdhaXQgbi5pbmRleC5nZXREaXNwbGF5RnJvbU9yaWdpbmFsKG4ub3JpZ2luYWwpLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHZpZXcgPSB0aGlzLnBsdWdpbi5nZXRWaWV3KClcbiAgICAgICAgaWYgKCFwYWdpbmF0ZSkgYXdhaXQgdmlldy5yZWRyYXcoKSAvLyBUT0RPIGRlYWwgd2l0aCBudWxsIHZpZXdcbiAgICAgICAgZWxzZSBpZiAocnMubGVuZ3RoID4gMCkgYXdhaXQgdmlldy5fcmVkcmF3KClcbiAgICB9XG5cbiAgICBhc3luYyByZW1vdmVJbmRleChpZHg6IFNlYXJjaEluZGV4KSB7XG4gICAgICAgIGF3YWl0IGlkeC5sb2FkTm90ZXMoKVxuICAgICAgICBpZHgubm90ZXMuZm9yRWFjaChuID0+IHRoaXMuaW5kZXgucmVtb3ZlKG4uaWQpKVxuICAgICAgICBkZWxldGUgdGhpcy5pbmRleGVzW2lkeC50eXBlXVxuICAgIH1cblxuICAgIGFkZEluZGV4SWZOb3RBbHJlYWR5QWRkZWQoaW5kZXg6IFNlYXJjaEluZGV4KSB7XG4gICAgICAgIGlmICghKGluZGV4LnR5cGUgaW4gdGhpcy5pbmRleGVzKSkgeyBcbiAgICAgICAgICAgIHRoaXMuaW5kZXhlc1tpbmRleC50eXBlXSA9IGluZGV4XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUluZGV4KGZhbHNlLCBpbmRleClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhpZ2hsaWdodFNlYXJjaChzZWFyY2hUZXh0OiBzdHJpbmcsIHF1ZXJ5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHNlYXJjaFRleHRcbiAgICAgICAgLy8gVE9ET1xuICAgICAgICAvLyBsZXQgcXVlcnlXb3JkcyA9IFsuLi5uZXcgU2V0KHF1ZXJ5LnNwbGl0KFwiIFwiKS5tYXAodyA9PiBzdGVtbWVyKHcpKSldXG4gICAgICAgIC8vIHRoaXMucmVzdWx0cy5yZXMuZm9yRWFjaChyID0+IHtxdWVyeVdvcmRzLmZvckVhY2gocXcgPT4gclsxXSA9IHRoaXMuaGlnaGxpZ2h0KHJbMV0sIHF3KSl9KVxuICAgIH1cblxuICAgICAgICAvLyBoaWdobGlnaHQoY29udGVudDogc3RyaW5nLCBrZXl3b3JkOiBzdHJpbmcpIHtcbiAgICAvLyAgICAgY29uc3Qgc2FuaXRpemVkS2V5d29yZCA9IGtleXdvcmQucmVwbGFjZSgvXFxXL2csICcnKTtcbiAgICAvLyAgICAgY29uc3QgcmVnZXhGb3JDb250ZW50ID0gbmV3IFJlZ0V4cChzYW5pdGl6ZWRLZXl3b3JkLCAnZ2knKTtcbiAgICAvLyAgICAgcmV0dXJuIGNvbnRlbnQucmVwbGFjZShyZWdleEZvckNvbnRlbnQsICc8c3BhbiBjbGFzcz1cImhpZ2hsaWdodFwiPiQmPC9zcGFuPicpO1xuICAgIC8vIH1cblxuXG4gICAgYXN5bmMgdXBkYXRlSW5kZXgodXBkYXRlOiBib29sZWFuID0gdHJ1ZSwgaWR4OiBcImFsbFwiIHwgU2VhcmNoSW5kZXggPSBcImFsbFwiKSB7XG4gICAgICAgIHRoaXMuX2luZGV4X3VwZGF0aW5nID0gdHJ1ZVxuICAgICAgICBpZiAoIShpZHggPT0gXCJhbGxcIikpIGF3YWl0IHRoaXMuX2RvVXBkYXRlSW5kZXgodXBkYXRlLCBpZHgpXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLl9kb1VwZGF0ZUluZGV4KHVwZGF0ZSwgdGhpcy5pbmRleGVzW2ldKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlZnJlc2hOb3Rlc0xpc3QoKVxuICAgICAgICB0aGlzLl9pbmRleF91cGRhdGluZyA9IGZhbHNlXG4gICAgfVxuXG4gICAgYXN5bmMgX2RvVXBkYXRlSW5kZXgodXBkYXRlOiBib29sZWFuLCBpZHg6IFNlYXJjaEluZGV4KSB7XG4gICAgICAgIGF3YWl0IGlkeC5sb2FkTm90ZXMoKVxuICAgICAgICBpZiAodXBkYXRlKSBpZHgubm90ZXMuZm9yRWFjaChuID0+IHRoaXMuaW5kZXguYWRkKG4uaWQsIG4uc2VhcmNoKSlcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZHgubm90ZXMuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4LnVwZGF0ZShuLmlkLCBuLnNlYXJjaClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcmVmcmVzaE5vdGVzTGlzdCgpIHtcbiAgICAgICAgdGhpcy5ub3RlcyA9IFtdXG4gICAgICAgIGZvciAobGV0IGkgaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICAgICAgICB0aGlzLmluZGV4ZXNbaV0ubm90ZXMuZm9yRWFjaChuID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2VhcmNoTm90ZTogU2VhcmNoTm90ZSA9IE9iamVjdC5hc3NpZ24oe2luZGV4OiB0aGlzLmluZGV4ZXNbaV19LCBuKVxuICAgICAgICAgICAgICAgIHRoaXMubm90ZXMucHVzaChzZWFyY2hOb3RlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZWFyY2hDdXJyZW50KGJsb2NrOiBib29sZWFuKSB7XG4gICAgICAgIGxldCBtdiA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpXG4gICAgICAgIGlmIChtdikge1xuICAgICAgICAgICAgbGV0IGVkaXRvciA9IG12LmVkaXRvclxuICAgICAgICAgICAgaWYgKGJsb2NrKSB7IC8vIFRPRE8gdGhpcyBpcyBjbHVua3k/IGZpbmQgYW5vdGhlciB3YXlcbiAgICAgICAgICAgICAgICBsZXQgcXVlcnk6IHN0cmluZyA9IFwiXCJcbiAgICAgICAgICAgICAgICBsZXQgb3JpZ0xpbmVObyA9IGVkaXRvci5nZXRDdXJzb3IoKS5saW5lIFxuICAgICAgICAgICAgICAgIGxldCBsaW5lQ291bnQgPSBlZGl0b3IubGluZUNvdW50KClcbiAgICAgICAgICAgICAgICBsZXQgbGluZU5vID0gb3JpZ0xpbmVOb1xuICAgICAgICAgICAgICAgIGxldCBsaW5lID0gZWRpdG9yLmdldExpbmUobGluZU5vKVxuICAgICAgICAgICAgICAgIC8vIGdldCBsaW5lcyBiZWZvcmUgY3Vyc29yIGFuZCBhZGQgdGhlbSB0byBzdGFydCBvZiBxdWVyeVxuICAgICAgICAgICAgICAgIHdoaWxlIChsaW5lLmxlbmd0aCAhPSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lTm8pXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lKSBxdWVyeSA9IGxpbmUgKyBgICR7cXVlcnl9YFxuICAgICAgICAgICAgICAgICAgICBpZiAobGluZU5vID09IDApIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgIGxpbmVObyAtPSAxXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZ2V0IGxpbmVzIGFmdGVyIGN1cnNvciBhbmQgYWRkIHRoZW0gdG8gZW5kIG9mIHF1ZXJ5XG4gICAgICAgICAgICAgICAgbGluZU5vID0gb3JpZ0xpbmVObyArIDFcbiAgICAgICAgICAgICAgICBsaW5lID0gZWRpdG9yLmdldExpbmUobGluZU5vKVxuICAgICAgICAgICAgICAgIHdoaWxlIChsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBlZGl0b3IuZ2V0TGluZShsaW5lTm8pXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lKSBxdWVyeSArPSBgICR7bGluZX1gXG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5lTm8gPT0gKGxpbmVDb3VudCAtIDEpKSBicmVha1xuICAgICAgICAgICAgICAgICAgICBsaW5lTm8gKz0gMVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaChxdWVyeSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgdGhpcy5zZWFyY2goZWRpdG9yLmdldExpbmUoZWRpdG9yLmdldEN1cnNvcigpLmxpbmUpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2RlYlJlZnJlc2hJbmRleFRoZW5DYWxsKGZ1bmM6IENhbGxhYmxlRnVuY3Rpb24pIHtcbiAgICAgICAgZnVuY3Rpb24gbmV3X2Z1bmN0aW9uKGFyZ3M6IGFueSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbmRleF91cGRhdGluZykgdGhpcy5kZWJvdW5jZWRSZWZyZXNoSW5kZXgoKVxuICAgICAgICAgICAgZnVuYyhhcmdzKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdfZnVuY3Rpb25cbiAgICB9XG5cbiAgICByZWZyZXNoRGVib3VuY2VzKCkge1xuICAgICAgICB0aGlzLmRlYm91bmNlZFJlZnJlc2hJbmRleCA9IGRlYm91bmNlKHRoaXMudXBkYXRlSW5kZXgsIHRoaXMucGx1Z2luLnNldHRpbmdzLnJlZnJlc2hEZWJvdW5jZSwgdHJ1ZSkgXG5cbiAgICAgICAgdGhpcy5fZGVib3VuY2VkU2VhcmNoID0gZGVib3VuY2UoKHF1ZXJ5OiBzdHJpbmcpID0+IHRoaXMuc2VhcmNoKHF1ZXJ5KSwgdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VhcmNoRGVib3VuY2UsIHRydWUpXG4gICAgICAgIHRoaXMuX2RlYm91bmNlZFNlYXJjaEN1cnJlbnQgPSBkZWJvdW5jZSgoYmxvY2s6IGJvb2xlYW4pID0+IHRoaXMuX3NlYXJjaEN1cnJlbnQoYmxvY2spLCB0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWFyY2hEZWJvdW5jZSwgdHJ1ZSlcblxuICAgICAgICB0aGlzLmRlYm91bmNlZFNlYXJjaCA9IHRoaXMuX2RlYlJlZnJlc2hJbmRleFRoZW5DYWxsKHRoaXMuX2RlYm91bmNlZFNlYXJjaClcbiAgICAgICAgdGhpcy5kZWJvdW5jZWRTZWFyY2hDdXJyZW50ID0gdGhpcy5fZGViUmVmcmVzaEluZGV4VGhlbkNhbGwodGhpcy5fZGVib3VuY2VkU2VhcmNoQ3VycmVudClcbiAgICB9XG5cbn0iLCAiLy8gU3RhbmRhcmQgc3VmZml4IG1hbmlwdWxhdGlvbnMuXG52YXIgc3RlcDJsaXN0ID0ge1xuICBhdGlvbmFsOiAnYXRlJyxcbiAgdGlvbmFsOiAndGlvbicsXG4gIGVuY2k6ICdlbmNlJyxcbiAgYW5jaTogJ2FuY2UnLFxuICBpemVyOiAnaXplJyxcbiAgYmxpOiAnYmxlJyxcbiAgYWxsaTogJ2FsJyxcbiAgZW50bGk6ICdlbnQnLFxuICBlbGk6ICdlJyxcbiAgb3VzbGk6ICdvdXMnLFxuICBpemF0aW9uOiAnaXplJyxcbiAgYXRpb246ICdhdGUnLFxuICBhdG9yOiAnYXRlJyxcbiAgYWxpc206ICdhbCcsXG4gIGl2ZW5lc3M6ICdpdmUnLFxuICBmdWxuZXNzOiAnZnVsJyxcbiAgb3VzbmVzczogJ291cycsXG4gIGFsaXRpOiAnYWwnLFxuICBpdml0aTogJ2l2ZScsXG4gIGJpbGl0aTogJ2JsZScsXG4gIGxvZ2k6ICdsb2cnXG59XG5cbnZhciBzdGVwM2xpc3QgPSB7XG4gIGljYXRlOiAnaWMnLFxuICBhdGl2ZTogJycsXG4gIGFsaXplOiAnYWwnLFxuICBpY2l0aTogJ2ljJyxcbiAgaWNhbDogJ2ljJyxcbiAgZnVsOiAnJyxcbiAgbmVzczogJydcbn1cblxuLy8gQ29uc29uYW50LXZvd2VsIHNlcXVlbmNlcy5cbnZhciBjb25zb25hbnQgPSAnW15hZWlvdV0nXG52YXIgdm93ZWwgPSAnW2FlaW91eV0nXG52YXIgY29uc29uYW50cyA9ICcoJyArIGNvbnNvbmFudCArICdbXmFlaW91eV0qKSdcbnZhciB2b3dlbHMgPSAnKCcgKyB2b3dlbCArICdbYWVpb3VdKiknXG5cbnZhciBndDAgPSBuZXcgUmVnRXhwKCdeJyArIGNvbnNvbmFudHMgKyAnPycgKyB2b3dlbHMgKyBjb25zb25hbnRzKVxudmFyIGVxMSA9IG5ldyBSZWdFeHAoXG4gICdeJyArIGNvbnNvbmFudHMgKyAnPycgKyB2b3dlbHMgKyBjb25zb25hbnRzICsgdm93ZWxzICsgJz8kJ1xuKVxudmFyIGd0MSA9IG5ldyBSZWdFeHAoJ14nICsgY29uc29uYW50cyArICc/KCcgKyB2b3dlbHMgKyBjb25zb25hbnRzICsgJyl7Mix9JylcbnZhciB2b3dlbEluU3RlbSA9IG5ldyBSZWdFeHAoJ14nICsgY29uc29uYW50cyArICc/JyArIHZvd2VsKVxudmFyIGNvbnNvbmFudExpa2UgPSBuZXcgUmVnRXhwKCdeJyArIGNvbnNvbmFudHMgKyB2b3dlbCArICdbXmFlaW91d3h5XSQnKVxuXG4vLyBFeGNlcHRpb24gZXhwcmVzc2lvbnMuXG52YXIgc2Z4TGwgPSAvbGwkL1xudmFyIHNmeEUgPSAvXiguKz8pZSQvXG52YXIgc2Z4WSA9IC9eKC4rPyl5JC9cbnZhciBzZnhJb24gPSAvXiguKz8oc3x0KSkoaW9uKSQvXG52YXIgc2Z4RWRPckluZyA9IC9eKC4rPykoZWR8aW5nKSQvXG52YXIgc2Z4QXRPckJsT3JJeiA9IC8oYXR8Ymx8aXopJC9cbnZhciBzZnhFRUQgPSAvXiguKz8pZWVkJC9cbnZhciBzZnhTID0gL14uKz9bXnNdcyQvXG52YXIgc2Z4U3Nlc09ySWVzID0gL14uKz8oc3N8aSllcyQvXG52YXIgc2Z4TXVsdGlDb25zb25hbnRMaWtlID0gLyhbXmFlaW91eWxzel0pXFwxJC9cbnZhciBzdGVwMiA9IC9eKC4rPykoYXRpb25hbHx0aW9uYWx8ZW5jaXxhbmNpfGl6ZXJ8YmxpfGFsbGl8ZW50bGl8ZWxpfG91c2xpfGl6YXRpb258YXRpb258YXRvcnxhbGlzbXxpdmVuZXNzfGZ1bG5lc3N8b3VzbmVzc3xhbGl0aXxpdml0aXxiaWxpdGl8bG9naSkkL1xudmFyIHN0ZXAzID0gL14oLis/KShpY2F0ZXxhdGl2ZXxhbGl6ZXxpY2l0aXxpY2FsfGZ1bHxuZXNzKSQvXG52YXIgc3RlcDQgPSAvXiguKz8pKGFsfGFuY2V8ZW5jZXxlcnxpY3xhYmxlfGlibGV8YW50fGVtZW50fG1lbnR8ZW50fG91fGlzbXxhdGV8aXRpfG91c3xpdmV8aXplKSQvXG5cbi8qKlxuICogU3RlbSBgdmFsdWVgLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0ZW1tZXIodmFsdWUpIHtcbiAgLyoqIEB0eXBlIHtib29sZWFufSAqL1xuICB2YXIgZmlyc3RDaGFyYWN0ZXJXYXNMb3dlckNhc2VZXG4gIC8qKiBAdHlwZSB7UmVnRXhwTWF0Y2hBcnJheX0gKi9cbiAgdmFyIG1hdGNoXG5cbiAgdmFsdWUgPSBTdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKClcblxuICAvLyBFeGl0IGVhcmx5LlxuICBpZiAodmFsdWUubGVuZ3RoIDwgMykge1xuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLy8gRGV0ZWN0IGluaXRpYWwgYHlgLCBtYWtlIHN1cmUgaXQgbmV2ZXIgbWF0Y2hlcy5cbiAgaWYgKFxuICAgIHZhbHVlLmNoYXJDb2RlQXQoMCkgPT09IDEyMSAvLyBMb3dlcmNhc2UgWVxuICApIHtcbiAgICBmaXJzdENoYXJhY3Rlcldhc0xvd2VyQ2FzZVkgPSB0cnVlXG4gICAgdmFsdWUgPSAnWScgKyB2YWx1ZS5zbGljZSgxKVxuICB9XG5cbiAgLy8gU3RlcCAxYS5cbiAgaWYgKHNmeFNzZXNPckllcy50ZXN0KHZhbHVlKSkge1xuICAgIC8vIFJlbW92ZSBsYXN0IHR3byBjaGFyYWN0ZXJzLlxuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgLTIpXG4gIH0gZWxzZSBpZiAoc2Z4Uy50ZXN0KHZhbHVlKSkge1xuICAgIC8vIFJlbW92ZSBsYXN0IGNoYXJhY3Rlci5cbiAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIC0xKVxuICB9XG5cbiAgLy8gU3RlcCAxYi5cbiAgaWYgKChtYXRjaCA9IHNmeEVFRC5leGVjKHZhbHVlKSkpIHtcbiAgICBpZiAoZ3QwLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgICAvLyBSZW1vdmUgbGFzdCBjaGFyYWN0ZXIuXG4gICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIC0xKVxuICAgIH1cbiAgfSBlbHNlIGlmICgobWF0Y2ggPSBzZnhFZE9ySW5nLmV4ZWModmFsdWUpKSAmJiB2b3dlbEluU3RlbS50ZXN0KG1hdGNoWzFdKSkge1xuICAgIHZhbHVlID0gbWF0Y2hbMV1cblxuICAgIGlmIChzZnhBdE9yQmxPckl6LnRlc3QodmFsdWUpKSB7XG4gICAgICAvLyBBcHBlbmQgYGVgLlxuICAgICAgdmFsdWUgKz0gJ2UnXG4gICAgfSBlbHNlIGlmIChzZnhNdWx0aUNvbnNvbmFudExpa2UudGVzdCh2YWx1ZSkpIHtcbiAgICAgIC8vIFJlbW92ZSBsYXN0IGNoYXJhY3Rlci5cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgLTEpXG4gICAgfSBlbHNlIGlmIChjb25zb25hbnRMaWtlLnRlc3QodmFsdWUpKSB7XG4gICAgICAvLyBBcHBlbmQgYGVgLlxuICAgICAgdmFsdWUgKz0gJ2UnXG4gICAgfVxuICB9XG5cbiAgLy8gU3RlcCAxYy5cbiAgaWYgKChtYXRjaCA9IHNmeFkuZXhlYyh2YWx1ZSkpICYmIHZvd2VsSW5TdGVtLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgLy8gUmVtb3ZlIHN1ZmZpeGluZyBgeWAgYW5kIGFwcGVuZCBgaWAuXG4gICAgdmFsdWUgPSBtYXRjaFsxXSArICdpJ1xuICB9XG5cbiAgLy8gU3RlcCAyLlxuICBpZiAoKG1hdGNoID0gc3RlcDIuZXhlYyh2YWx1ZSkpICYmIGd0MC50ZXN0KG1hdGNoWzFdKSkge1xuICAgIHZhbHVlID0gbWF0Y2hbMV0gKyBzdGVwMmxpc3RbbWF0Y2hbMl1dXG4gIH1cblxuICAvLyBTdGVwIDMuXG4gIGlmICgobWF0Y2ggPSBzdGVwMy5leGVjKHZhbHVlKSkgJiYgZ3QwLnRlc3QobWF0Y2hbMV0pKSB7XG4gICAgdmFsdWUgPSBtYXRjaFsxXSArIHN0ZXAzbGlzdFttYXRjaFsyXV1cbiAgfVxuXG4gIC8vIFN0ZXAgNC5cbiAgaWYgKChtYXRjaCA9IHN0ZXA0LmV4ZWModmFsdWUpKSkge1xuICAgIGlmIChndDEudGVzdChtYXRjaFsxXSkpIHtcbiAgICAgIHZhbHVlID0gbWF0Y2hbMV1cbiAgICB9XG4gIH0gZWxzZSBpZiAoKG1hdGNoID0gc2Z4SW9uLmV4ZWModmFsdWUpKSAmJiBndDEudGVzdChtYXRjaFsxXSkpIHtcbiAgICB2YWx1ZSA9IG1hdGNoWzFdXG4gIH1cblxuICAvLyBTdGVwIDUuXG4gIGlmIChcbiAgICAobWF0Y2ggPSBzZnhFLmV4ZWModmFsdWUpKSAmJlxuICAgIChndDEudGVzdChtYXRjaFsxXSkgfHxcbiAgICAgIChlcTEudGVzdChtYXRjaFsxXSkgJiYgIWNvbnNvbmFudExpa2UudGVzdChtYXRjaFsxXSkpKVxuICApIHtcbiAgICB2YWx1ZSA9IG1hdGNoWzFdXG4gIH1cblxuICBpZiAoc2Z4TGwudGVzdCh2YWx1ZSkgJiYgZ3QxLnRlc3QodmFsdWUpKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCAtMSlcbiAgfVxuXG4gIC8vIFR1cm4gaW5pdGlhbCBgWWAgYmFjayB0byBgeWAuXG4gIGlmIChmaXJzdENoYXJhY3Rlcldhc0xvd2VyQ2FzZVkpIHtcbiAgICB2YWx1ZSA9ICd5JyArIHZhbHVlLnNsaWNlKDEpXG4gIH1cblxuICByZXR1cm4gdmFsdWVcbn1cbiIsICJpbXBvcnQgeyBBcHAsIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCBQb3dlclNlYXJjaCBmcm9tIFwiLi9tYWluXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG93ZXJTZWFyY2hTZXR0aW5ncyB7XG5cdHNlYXJjaERlYm91bmNlOiBudW1iZXI7XG5cdHJlZnJlc2hEZWJvdW5jZTogbnVtYmVyO1xuXHRzZWFyY2hCbG9jazogYm9vbGVhbjtcblx0cGFnZVNpemU6IG51bWJlclxuXHRpbmRleGVzOiB7W2luZGV4VHlwZTogc3RyaW5nXTogYm9vbGVhbn1cbn1cblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFBvd2VyU2VhcmNoU2V0dGluZ3MgPSB7XG5cdHNlYXJjaERlYm91bmNlOiAxMDAwLFxuXHRyZWZyZXNoRGVib3VuY2U6IDIwMDAsXG5cdHNlYXJjaEJsb2NrOiB0cnVlLFxuXHRwYWdlU2l6ZTogMTAsXG5cdGluZGV4ZXM6IHt9LFxufVxuXG5cbmV4cG9ydCBjbGFzcyBQb3dlclNlYXJjaFNldHRpbmdzVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogUG93ZXJTZWFyY2g7XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogUG93ZXJTZWFyY2gpIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XHRcblx0fVxuXG5cdGRpc3BsYXkoKTogdm9pZCB7XG5cdFx0Y29uc3Qge2NvbnRhaW5lckVsfSA9IHRoaXM7XG5cblx0XHRjb250YWluZXJFbC5lbXB0eSgpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywge3RleHQ6ICdQb3dlciBTZWFyY2ggU2V0dGluZ3MnfSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdTZWFyY2ggYWZ0ZXIgdGltZScpXG5cdFx0XHQuc2V0RGVzYygnVGhpcyBpcyB0aGUgdGltZSwgaW4gbWlsbGlzZWNvbmRzLCBhZnRlciB5b3Ugc3RvcCB0eXBpbmcvc3RvcCBzZWxlY3RpbmcgdGhpbmdzIHRoYXQgdGhlIHNlYXJjaCBvY2N1cnMgKGRlYm91bmNlIHRpbWVvdXQpJylcblx0XHRcdC5hZGRTbGlkZXIoc2xpZGVyID0+IHNsaWRlclxuXHRcdFx0XHQuc2V0TGltaXRzKDUwMCwgNTAwMCwgMTAwKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VhcmNoRGVib3VuY2UpXG5cdFx0XHRcdC5zZXREeW5hbWljVG9vbHRpcCgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWFyY2hEZWJvdW5jZSA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNlYXJjaC5yZWZyZXNoRGVib3VuY2VzKClcblx0XHRcdFx0fSlcblx0XHRcdCk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHQuc2V0TmFtZSgnUmVmcmVzaCBhZnRlciB0aW1lJylcblx0XHQuc2V0RGVzYygnVGhpcyBpcyB0aGUgdGltZSwgaW4gbWlsbGlzZWNvbmRzLCBhZnRlciB5b3Ugc3RvcCBzZWFyY2hpbmcgdGhhdCB0aGUgaW5kZXggcmVmcmVzaGVzIGkuZS4gY2hhbmdlcyB0byB0aGUgc2VhcmNoYWJsZSBjb250ZW50IGFyZSBsb2FkZWQgaW50byB0aGUgc2VhcmNoIGluZGV4IChkZWJvdW5jZSB0aW1lb3V0KScpXG5cdFx0LmFkZFNsaWRlcihzbGlkZXIgPT4gc2xpZGVyXG5cdFx0XHQuc2V0TGltaXRzKDMwMDAsIDMwMDAwLCA1MDApXG5cdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucmVmcmVzaERlYm91bmNlKVxuXHRcdFx0LnNldER5bmFtaWNUb29sdGlwKClcblx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucmVmcmVzaERlYm91bmNlID0gdmFsdWU7XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZWFyY2gucmVmcmVzaERlYm91bmNlcygpXG5cdFx0XHR9KVxuXHRcdCk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiU2VhcmNoIHRleHQgYmxvY2tzXCIpXG5cdFx0XHQuc2V0RGVzYyhgRm9yIHNlYXJjaCBvbiB0eXBlLCBxdWVyaWVzIGFyZSBidWlsdCBmcm9tIGJsb2NrcyBvZiB0ZXh0IHN1cnJvdW5kZWQgYnkgd2hpdGVzcGFjZSBpZiB0cnVlIGFuZCBpbmRpdmlkdWFsIGxpbmVzIGlmIGZhbHNlIChSRVNUQVJUIFJFUVVJUkVEIFRPIEVOQUNUIENIQU5HRVMpYClcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHRvZ2dsZVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2VhcmNoQmxvY2spXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWFyY2hCbG9jayA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHRcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiUGFnZSBTaXplXCIpXG5cdFx0XHQuc2V0RGVzYyhgTnVtYmVyIG9mIHJlc3VsdHMgc2hvd24gcGVyIHNlYXJjaCByZXN1bHQgcGFnZWApXG5cdFx0XHQuYWRkU2xpZGVyKHNsaWRlciA9PiBzbGlkZXJcblx0XHRcdFx0LnNldExpbWl0cygxLCAxMDAsIDEpXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYWdlU2l6ZSlcblx0XHRcdFx0LnNldER5bmFtaWNUb29sdGlwKClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBhZ2VTaXplID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pXG5cdFx0XHQpO1xuXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywge3RleHQ6ICdTZWFyY2ggSW5kZXhlcyd9KTtcblx0XHRcblx0XHR0aGlzLnBsdWdpbi5pbmRleGVzLmZvckVhY2goaSA9PiB7XG5cdFx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdFx0LnNldE5hbWUoaS50eXBlKVxuXHRcdFx0XHQuc2V0RGVzYyhgQWRkIG5vdGVzIG9mIHR5cGUgJHtpLnR5cGV9IHRvIHRoZSBjb250ZW50IHRvIGJlIHNlYXJjaGVkYClcblx0XHRcdFx0LmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmluZGV4ZXNbaS50eXBlXSlcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5pbmRleGVzW2kudHlwZV0gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0YXdhaXQgaS5zZXR1cEluZGV4KClcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLmdldFZpZXcoKS5kZWJvdW5jZWRSZWRyYXcoKVxuXHRcdFx0XHRcdH0pXG5cdFx0XHRcdCk7XG5cdFx0XHR9KVxuXG5cdFx0fVxufVxuIiwgImltcG9ydCB7IGRlYm91bmNlLCBJdGVtVmlldywgV29ya3NwYWNlTGVhZiB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgU0VBUkNIX1JFU1VMVF9WSUVXX1RZUEUgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCBQb3dlclNlYXJjaCBmcm9tIFwiLi9tYWluXCI7XG5cblxuZXhwb3J0IGNsYXNzIFNlYXJjaFJlc3VsdFZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XG4gICAgcGFnZTogbnVtYmVyXG4gICAgcGx1Z2luOiBQb3dlclNlYXJjaDtcbiAgICBkZWJvdW5jZWRSZWRyYXc6IEZ1bmN0aW9uO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogUG93ZXJTZWFyY2gpIHtcbiAgICAgICAgc3VwZXIobGVhZik7XG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luXG4gICAgICAgIHRoaXMuZGVib3VuY2VkUmVkcmF3ID0gZGVib3VuY2UoKCkgPT4gdGhpcy5yZWRyYXcoKSwgMTAwMClcbiAgICB9XG5cbiAgICBhc3luYyByZWRyYXcoKSB7XG4gICAgICAgIHRoaXMucGFnZSA9IDFcbiAgICAgICAgYXdhaXQgdGhpcy5fcmVkcmF3KClcbiAgICB9XG4gICAgXG4gICAgYXN5bmMgX3JlZHJhdygpOiBQcm9taXNlPHZvaWQ+IHtcblxuICAgICAgICBsZXQgYXJyb3dFbCA9IGNyZWF0ZURpdih7Y2xzOiBcInBvd2VyLXNlYXJjaC1hcnJvdy1iYXJcIn0pXG4gICAgICAgIGxldCBsZWZ0QXJyb3cgPSBhcnJvd0VsLmNyZWF0ZUVsKFwiYVwiKVxuICAgICAgICBsZWZ0QXJyb3cuaW5uZXJIVE1MID0gXCImbGFxdW87IFwiXG4gICAgICAgIGxlZnRBcnJvdy5jbGFzc0xpc3QuYWRkKFwicG93ZXItc2VhcmNoLWFycm93LWJhci1pdGVtXCIpXG4gICAgICAgIGxlZnRBcnJvdy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4gdGhpcy5wcmV2UGFnZSgpKVxuICAgICAgICBsZXQgcGFnZU5vID0gYXJyb3dFbC5jcmVhdGVTcGFuKClcbiAgICAgICAgcGFnZU5vLmlubmVySFRNTCA9IHRoaXMucGFnZS50b1N0cmluZygpXG4gICAgICAgIHBhZ2VOby5jbGFzc0xpc3QuYWRkKFwicG93ZXItc2VhcmNoLWFycm93LWJhci1pdGVtXCIpXG4gICAgICAgIGxldCByaWdodEFycm93ID0gYXJyb3dFbC5jcmVhdGVFbChcImFcIilcbiAgICAgICAgcmlnaHRBcnJvdy5jbGFzc0xpc3QuYWRkKFwicG93ZXItc2VhcmNoLWFycm93LWJhci1pdGVtXCIpXG4gICAgICAgIHJpZ2h0QXJyb3cuaW5uZXJIVE1MID0gXCIgJnJhcXVvO1wiXG4gICAgICAgIHJpZ2h0QXJyb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHRoaXMubmV4dFBhZ2UoKSlcblxuICAgICAgICBsZXQgcmVzID0gY3JlYXRlRGl2KHsgY2xzOiAncG93ZXItc2VhcmNoLXJlc3VsdHMtY2hpbGRyZW4nIH0pXG4gICAgICAgIGxldCBpZHhzID0gdGhpcy5wbHVnaW4uc2VhcmNoLmluZGV4ZXNcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhpZHhzKS5sZW5ndGgpIHJlcy5jcmVhdGVEaXYoe2NsczogXCJwb3dlci1zZWFyY2gtcmVzdWx0cy10eXBlXCIsIHRleHQ6IFwiTm8gaW5kZXhlcyBhY3RpdmF0ZWQhIFRoZXkgY2FuIGJlIGFjdGl2YXRlZCBpbiB0aGUgUG93ZXIgU2VhcmNoIHNldHRpbmdzIHRhYi5cIn0pXG4gICAgICAgIGVsc2UgaWYgKHRoaXMucGx1Z2luLnNlYXJjaC5yZXN1bHRzLnJlcy5sZW5ndGggPT0gMCkgcmVzLmNyZWF0ZURpdih7Y2xzOiBcInBvd2VyLXNlYXJjaC1yZXN1bHRzLXR5cGVcIiwgdGV4dDogXCJObyByZXN1bHRzIGZvdW5kISBDaGVjayBmb3IgYW55IGVycm9ycyBpbiBsb2FkaW5nIGluZGV4ZXMgKGluIGEgbm90aWNlIHRoYXQgcG9wcGVkIHVwIGEgZmV3IHRpbWVzIG9yIHRoZSBjb25zb2xlKVwifSk7XG4gICAgICAgIGZvciAobGV0IGUgb2YgdGhpcy5wbHVnaW4uc2VhcmNoLnJlc3VsdHMucmVzKSB7XG4gICAgICAgICAgICBsZXQgY2ggPSByZXMuY3JlYXRlRGl2KHsgY2xzOiAncG93ZXItc2VhcmNoLXJlc3VsdHMtY2hpbGQnIH0pXG4gICAgICAgICAgICBsZXQgaGVhZEVsID0gY2guY3JlYXRlRGl2KHsgY2xzOiBcInBvd2VyLXNlYXJjaC1yZXN1bHRzLXR5cGVcIiB9KVxuICAgICAgICAgICAgaGVhZEVsLmlubmVySFRNTCA9IGA8YSBocmVmPVwiJHtlLmxpbmt9XCI+JHtlLm5hbWV9PC9hPiBUeXBlOiAke2UudHlwZX1gXG4gICAgICAgICAgICBjaC5hcHBlbmQoZS5kaXNwbGF5KVxuICAgICAgICAgICAgLy8gZi5vbmVycm9yID0gZnVuY3Rpb24oKSB7fSAvLyBUT0RPIGZpeCBlcnJvcnNcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuY2hpbGRyZW5bMV0uZW1wdHkoKVxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdLmFwcGVuZChhcnJvd0VsKVxuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdLmFwcGVuZChyZXMpXG4gICAgfVxuXG4gICAgbmV4dFBhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZWFyY2gucmVzdWx0cy5yZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2UgKz0gMVxuICAgICAgICAgICAgbGV0IG9mZiA9ICh0aGlzLnBhZ2UgLSAxKSAqIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhZ2VTaXplXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZWFyY2guX3NlYXJjaCh0aGlzLnBsdWdpbi5zZWFyY2gucmVzdWx0cy5xdWVyeSwgb2ZmLCB0cnVlKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJldlBhZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhZ2UgIT0gMSkge1xuICAgICAgICAgICAgdGhpcy5wYWdlIC09IDFcbiAgICAgICAgICAgIGxldCBvZmYgPSAodGhpcy5wYWdlIC0gMSkgKiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYWdlU2l6ZVxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2VhcmNoLl9zZWFyY2godGhpcy5wbHVnaW4uc2VhcmNoLnJlc3VsdHMucXVlcnksIG9mZiwgdHJ1ZSlcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBnZXRWaWV3VHlwZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gU0VBUkNIX1JFU1VMVF9WSUVXX1RZUEU7XG4gICAgfVxuXG4gICAgZ2V0RGlzcGxheVRleHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiUG93ZXIgU2VhcmNoXCI7XG4gICAgfVxuXG4gICAgZ2V0SWNvbigpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJzZWFyY2hcIjtcbiAgICB9XG59XG5cblxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBT0EsSUFBQyxhQUFZLE1BQUs7QUFBQztBQUFhLFVBQUc7QUFBQyxZQUFHO0FBQU8saUJBQUs7QUFBQSxlQUFhLEdBQU47QUFBQTtBQUFVLFdBQUssV0FBUztBQUFHLFVBQUk7QUFBRSxpQkFBVyxJQUFFO0FBQUMsZUFBTSxBQUFjLE9BQU8sT0FBckIsY0FBdUIsS0FBRTtBQUFBO0FBQUcsa0JBQVksSUFBRTtBQUFDLGNBQU0sS0FBRSxNQUFNO0FBQUcsaUJBQVEsS0FBRSxHQUFFLEtBQUUsSUFBRTtBQUFJLGFBQUUsTUFBRztBQUFJLGVBQU87QUFBQTtBQUFFLG1CQUFZO0FBQUMsZUFBTyxPQUFPLE9BQU87QUFBQTtBQUFNLGtCQUFZLElBQUUsSUFBRTtBQUFDLGVBQU8sR0FBRSxTQUFPLEdBQUU7QUFBQTtBQUFPLGlCQUFXLElBQUU7QUFBQyxlQUFNLEFBQVcsT0FBTyxPQUFsQjtBQUFBO0FBQW9CLGlCQUFXLElBQUU7QUFBQyxlQUFNLEFBQVcsT0FBTyxPQUFsQjtBQUFBO0FBQW9CLGlCQUFXLElBQUU7QUFBQyxlQUFNLEFBQWEsT0FBTyxPQUFwQjtBQUFBO0FBQXNCO0FBQUMsa0JBQVksSUFBRSxJQUFFO0FBQUMsWUFBSSxLQUFFO0FBQUcsWUFBRyxNQUFJLE9BQUksTUFBRSxFQUFFLElBQUUsTUFBSSxLQUFL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
